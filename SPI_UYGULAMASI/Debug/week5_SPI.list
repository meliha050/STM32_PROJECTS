
week5_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003498  08003498  00004498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c8  080034c8  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  080034c8  080034c8  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034c8  080034c8  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c8  080034c8  000044c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034cc  080034cc  000044cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080034d0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000010  080034e0  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080034e0  000054a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa0b  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002039  00000000  00000000  0000fa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00011a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000735  00000000  00000000  00012418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019130  00000000  00000000  00012b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c466  00000000  00000000  0002bc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a9c  00000000  00000000  000380e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c4  00000000  00000000  000c8bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003480 	.word	0x08003480

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003480 	.word	0x08003480

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc8a 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f826 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f992 	bl	8000554 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f96a 	bl	8000508 <MX_DMA_Init>
  MX_TSC_Init();
 8000234:	f000 f8fe 	bl	8000434 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f940 	bl	80004bc <MX_USB_PCD_Init>
  MX_SPI1_Init();
 800023c:	f000 f882 	bl	8000344 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000240:	f000 f8be 	bl	80003c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  HAL_SPI_Receive_IT(&hspi2, RX_Buffer, sizeof(RX_Buffer));
 8000244:	4908      	ldr	r1, [pc, #32]	@ (8000268 <main+0x48>)
 8000246:	4b09      	ldr	r3, [pc, #36]	@ (800026c <main+0x4c>)
 8000248:	2201      	movs	r2, #1
 800024a:	0018      	movs	r0, r3
 800024c:	f002 f9c4 	bl	80025d8 <HAL_SPI_Receive_IT>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
      /* USER CODE END WHILE */
  	  HAL_SPI_Transmit(&hspi1, TX_Buffer, sizeof(TX_Buffer), HAL_MAX_DELAY);
 8000250:	2301      	movs	r3, #1
 8000252:	425b      	negs	r3, r3
 8000254:	4906      	ldr	r1, [pc, #24]	@ (8000270 <main+0x50>)
 8000256:	4807      	ldr	r0, [pc, #28]	@ (8000274 <main+0x54>)
 8000258:	2202      	movs	r2, #2
 800025a:	f002 f85d 	bl	8002318 <HAL_SPI_Transmit>
      HAL_Delay(100);
 800025e:	2064      	movs	r0, #100	@ 0x64
 8000260:	f000 fcd0 	bl	8000c04 <HAL_Delay>
  	  HAL_SPI_Transmit(&hspi1, TX_Buffer, sizeof(TX_Buffer), HAL_MAX_DELAY);
 8000264:	46c0      	nop			@ (mov r8, r8)
 8000266:	e7f3      	b.n	8000250 <main+0x30>
 8000268:	2000002c 	.word	0x2000002c
 800026c:	20000094 	.word	0x20000094
 8000270:	20000000 	.word	0x20000000
 8000274:	20000030 	.word	0x20000030

08000278 <SystemClock_Config>:
//  	  }
//    }
//
//  }
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b099      	sub	sp, #100	@ 0x64
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	242c      	movs	r4, #44	@ 0x2c
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2334      	movs	r3, #52	@ 0x34
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f003 f8cd 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	231c      	movs	r3, #28
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	0018      	movs	r0, r3
 8000294:	2310      	movs	r3, #16
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f003 f8c5 	bl	8003428 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029e:	003b      	movs	r3, r7
 80002a0:	0018      	movs	r0, r3
 80002a2:	231c      	movs	r3, #28
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f003 f8be 	bl	8003428 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80002ac:	0021      	movs	r1, r4
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2222      	movs	r2, #34	@ 0x22
 80002b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2201      	movs	r2, #1
 80002b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2201      	movs	r2, #1
 80002be:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2210      	movs	r2, #16
 80002c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2202      	movs	r2, #2
 80002ca:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2280      	movs	r2, #128	@ 0x80
 80002d0:	0212      	lsls	r2, r2, #8
 80002d2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2280      	movs	r2, #128	@ 0x80
 80002d8:	0352      	lsls	r2, r2, #13
 80002da:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 f98f 	bl	8001608 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ee:	f000 f9c5 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	211c      	movs	r1, #28
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2207      	movs	r2, #7
 80002f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2202      	movs	r2, #2
 80002fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2101      	movs	r1, #1
 8000310:	0018      	movs	r0, r3
 8000312:	f001 fcff 	bl	8001d14 <HAL_RCC_ClockConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800031a:	f000 f9af 	bl	800067c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800031e:	003b      	movs	r3, r7
 8000320:	2280      	movs	r2, #128	@ 0x80
 8000322:	0292      	lsls	r2, r2, #10
 8000324:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000326:	003b      	movs	r3, r7
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032c:	003b      	movs	r3, r7
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fe3c 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000338:	f000 f9a0 	bl	800067c <Error_Handler>
  }
}
 800033c:	46c0      	nop			@ (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b019      	add	sp, #100	@ 0x64
 8000342:	bd90      	pop	{r4, r7, pc}

08000344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	@ (80003bc <MX_SPI1_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800034e:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000350:	2282      	movs	r2, #130	@ 0x82
 8000352:	0052      	lsls	r2, r2, #1
 8000354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000356:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800035c:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800035e:	22e0      	movs	r2, #224	@ 0xe0
 8000360:	00d2      	lsls	r2, r2, #3
 8000362:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000364:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036a:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000370:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000376:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000378:	2208      	movs	r2, #8
 800037a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037c:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000382:	4b0d      	ldr	r3, [pc, #52]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000388:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000390:	2207      	movs	r2, #7
 8000392:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000394:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800039a:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800039c:	2208      	movs	r2, #8
 800039e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a0:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <MX_SPI1_Init+0x74>)
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 ff00 	bl	80021a8 <HAL_SPI_Init>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 80003ac:	f000 f966 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003b0:	46c0      	nop			@ (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			@ (mov r8, r8)
 80003b8:	20000030 	.word	0x20000030
 80003bc:	40013000 	.word	0x40013000

080003c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003c4:	4b19      	ldr	r3, [pc, #100]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000430 <MX_SPI2_Init+0x70>)
 80003c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80003ca:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003d0:	4b16      	ldr	r3, [pc, #88]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d6:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003d8:	22e0      	movs	r2, #224	@ 0xe0
 80003da:	00d2      	lsls	r2, r2, #3
 80003dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003de:	4b13      	ldr	r3, [pc, #76]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e4:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80003ea:	4b10      	ldr	r3, [pc, #64]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f6:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fc:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <MX_SPI2_Init+0x6c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000402:	4b0a      	ldr	r3, [pc, #40]	@ (800042c <MX_SPI2_Init+0x6c>)
 8000404:	2207      	movs	r2, #7
 8000406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000408:	4b08      	ldr	r3, [pc, #32]	@ (800042c <MX_SPI2_Init+0x6c>)
 800040a:	2200      	movs	r2, #0
 800040c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800040e:	4b07      	ldr	r3, [pc, #28]	@ (800042c <MX_SPI2_Init+0x6c>)
 8000410:	2200      	movs	r2, #0
 8000412:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000414:	4b05      	ldr	r3, [pc, #20]	@ (800042c <MX_SPI2_Init+0x6c>)
 8000416:	0018      	movs	r0, r3
 8000418:	f001 fec6 	bl	80021a8 <HAL_SPI_Init>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8000420:	f000 f92c 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000424:	46c0      	nop			@ (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	20000094 	.word	0x20000094
 8000430:	40003800 	.word	0x40003800

08000434 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <MX_TSC_Init+0x80>)
 800043a:	4a1f      	ldr	r2, [pc, #124]	@ (80004b8 <MX_TSC_Init+0x84>)
 800043c:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800043e:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000440:	2280      	movs	r2, #128	@ 0x80
 8000442:	0552      	lsls	r2, r2, #21
 8000444:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000446:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000448:	2280      	movs	r2, #128	@ 0x80
 800044a:	0452      	lsls	r2, r2, #17
 800044c:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000450:	2200      	movs	r2, #0
 8000452:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000454:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000456:	2201      	movs	r2, #1
 8000458:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800045a:	4b16      	ldr	r3, [pc, #88]	@ (80004b4 <MX_TSC_Init+0x80>)
 800045c:	2200      	movs	r2, #0
 800045e:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000462:	2280      	movs	r2, #128	@ 0x80
 8000464:	0192      	lsls	r2, r2, #6
 8000466:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000468:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <MX_TSC_Init+0x80>)
 800046a:	22a0      	movs	r2, #160	@ 0xa0
 800046c:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800046e:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <MX_TSC_Init+0x80>)
 800047c:	2200      	movs	r2, #0
 800047e:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000482:	222c      	movs	r2, #44	@ 0x2c
 8000484:	2100      	movs	r1, #0
 8000486:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000488:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <MX_TSC_Init+0x80>)
 800048a:	2291      	movs	r2, #145	@ 0x91
 800048c:	0092      	lsls	r2, r2, #2
 800048e:	631a      	str	r2, [r3, #48]	@ 0x30
  htsc.Init.ShieldIOs = 0;
 8000490:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000492:	2200      	movs	r2, #0
 8000494:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8000496:	4b07      	ldr	r3, [pc, #28]	@ (80004b4 <MX_TSC_Init+0x80>)
 8000498:	2291      	movs	r2, #145	@ 0x91
 800049a:	00d2      	lsls	r2, r2, #3
 800049c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 800049e:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <MX_TSC_Init+0x80>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 fee6 	bl	8003272 <HAL_TSC_Init>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80004aa:	f000 f8e7 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000180 	.word	0x20000180
 80004b8:	40024000 	.word	0x40024000

080004bc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_USB_PCD_Init+0x44>)
 80004c2:	4a10      	ldr	r2, [pc, #64]	@ (8000504 <MX_USB_PCD_Init+0x48>)
 80004c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <MX_USB_PCD_Init+0x44>)
 80004c8:	2208      	movs	r2, #8
 80004ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_USB_PCD_Init+0x44>)
 80004ce:	2202      	movs	r2, #2
 80004d0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <MX_USB_PCD_Init+0x44>)
 80004d4:	2202      	movs	r2, #2
 80004d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_USB_PCD_Init+0x44>)
 80004da:	2200      	movs	r2, #0
 80004dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <MX_USB_PCD_Init+0x44>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_USB_PCD_Init+0x44>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004ea:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <MX_USB_PCD_Init+0x44>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 ff6d 	bl	80013cc <HAL_PCD_Init>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80004f6:	f000 f8c1 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200001c4 	.word	0x200001c4
 8000504:	40005c00 	.word	0x40005c00

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <MX_DMA_Init+0x48>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_DMA_Init+0x48>)
 8000514:	2101      	movs	r1, #1
 8000516:	430a      	orrs	r2, r1
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <MX_DMA_Init+0x48>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	2201      	movs	r2, #1
 8000520:	4013      	ands	r3, r2
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	200a      	movs	r0, #10
 800052c:	f000 fc3a 	bl	8000da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000530:	200a      	movs	r0, #10
 8000532:	f000 fc4c 	bl	8000dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	200b      	movs	r0, #11
 800053c:	f000 fc32 	bl	8000da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000540:	200b      	movs	r0, #11
 8000542:	f000 fc44 	bl	8000dce <HAL_NVIC_EnableIRQ>

}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b089      	sub	sp, #36	@ 0x24
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	240c      	movs	r4, #12
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2314      	movs	r3, #20
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 ff5f 	bl	8003428 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b40      	ldr	r3, [pc, #256]	@ (800066c <MX_GPIO_Init+0x118>)
 800056c:	695a      	ldr	r2, [r3, #20]
 800056e:	4b3f      	ldr	r3, [pc, #252]	@ (800066c <MX_GPIO_Init+0x118>)
 8000570:	2180      	movs	r1, #128	@ 0x80
 8000572:	0309      	lsls	r1, r1, #12
 8000574:	430a      	orrs	r2, r1
 8000576:	615a      	str	r2, [r3, #20]
 8000578:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <MX_GPIO_Init+0x118>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	2380      	movs	r3, #128	@ 0x80
 800057e:	031b      	lsls	r3, r3, #12
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b39      	ldr	r3, [pc, #228]	@ (800066c <MX_GPIO_Init+0x118>)
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	4b38      	ldr	r3, [pc, #224]	@ (800066c <MX_GPIO_Init+0x118>)
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	0289      	lsls	r1, r1, #10
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	4b35      	ldr	r3, [pc, #212]	@ (800066c <MX_GPIO_Init+0x118>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	2380      	movs	r3, #128	@ 0x80
 800059a:	029b      	lsls	r3, r3, #10
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b32      	ldr	r3, [pc, #200]	@ (800066c <MX_GPIO_Init+0x118>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b31      	ldr	r3, [pc, #196]	@ (800066c <MX_GPIO_Init+0x118>)
 80005a8:	2180      	movs	r1, #128	@ 0x80
 80005aa:	02c9      	lsls	r1, r1, #11
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b2e      	ldr	r3, [pc, #184]	@ (800066c <MX_GPIO_Init+0x118>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	@ 0x80
 80005b6:	02db      	lsls	r3, r3, #11
 80005b8:	4013      	ands	r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80005be:	492c      	ldr	r1, [pc, #176]	@ (8000670 <MX_GPIO_Init+0x11c>)
 80005c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000674 <MX_GPIO_Init+0x120>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fee3 	bl	8001390 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	4a28      	ldr	r2, [pc, #160]	@ (8000670 <MX_GPIO_Init+0x11c>)
 80005ce:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2201      	movs	r2, #1
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a23      	ldr	r2, [pc, #140]	@ (8000674 <MX_GPIO_Init+0x120>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f000 fd59 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80005ee:	0021      	movs	r1, r4
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2206      	movs	r2, #6
 80005f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2290      	movs	r2, #144	@ 0x90
 80005fa:	0352      	lsls	r2, r2, #13
 80005fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	000c      	movs	r4, r1
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000606:	193b      	adds	r3, r7, r4
 8000608:	4a1a      	ldr	r2, [pc, #104]	@ (8000674 <MX_GPIO_Init+0x120>)
 800060a:	0019      	movs	r1, r3
 800060c:	0010      	movs	r0, r2
 800060e:	f000 fd47 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2290      	movs	r2, #144	@ 0x90
 800061c:	0352      	lsls	r2, r2, #13
 800061e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000626:	193a      	adds	r2, r7, r4
 8000628:	2390      	movs	r3, #144	@ 0x90
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fd36 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000634:	0021      	movs	r1, r4
 8000636:	187b      	adds	r3, r7, r1
 8000638:	22c0      	movs	r2, #192	@ 0xc0
 800063a:	0112      	lsls	r2, r2, #4
 800063c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2212      	movs	r2, #18
 8000642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2201      	movs	r2, #1
 8000648:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2203      	movs	r2, #3
 800064e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2201      	movs	r2, #1
 8000654:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	187b      	adds	r3, r7, r1
 8000658:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <MX_GPIO_Init+0x124>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f000 fd1f 	bl	80010a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b009      	add	sp, #36	@ 0x24
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	40021000 	.word	0x40021000
 8000670:	000003e1 	.word	0x000003e1
 8000674:	48000800 	.word	0x48000800
 8000678:	48000400 	.word	0x48000400

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	e7fd      	b.n	8000684 <Error_Handler+0x8>

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <HAL_MspInit+0x44>)
 8000690:	699a      	ldr	r2, [r3, #24]
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <HAL_MspInit+0x44>)
 8000694:	2101      	movs	r1, #1
 8000696:	430a      	orrs	r2, r1
 8000698:	619a      	str	r2, [r3, #24]
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <HAL_MspInit+0x44>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_MspInit+0x44>)
 80006a8:	69da      	ldr	r2, [r3, #28]
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_MspInit+0x44>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0549      	lsls	r1, r1, #21
 80006b0:	430a      	orrs	r2, r1
 80006b2:	61da      	str	r2, [r3, #28]
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <HAL_MspInit+0x44>)
 80006b6:	69da      	ldr	r2, [r3, #28]
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	055b      	lsls	r3, r3, #21
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b08d      	sub	sp, #52	@ 0x34
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	241c      	movs	r4, #28
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	2314      	movs	r3, #20
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f002 fea0 	bl	8003428 <memset>
  if(hspi->Instance==SPI1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a75      	ldr	r2, [pc, #468]	@ (80008c4 <HAL_SPI_MspInit+0x1f4>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d000      	beq.n	80006f4 <HAL_SPI_MspInit+0x24>
 80006f2:	e07c      	b.n	80007ee <HAL_SPI_MspInit+0x11e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006f4:	4b74      	ldr	r3, [pc, #464]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 80006f6:	699a      	ldr	r2, [r3, #24]
 80006f8:	4b73      	ldr	r3, [pc, #460]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	0149      	lsls	r1, r1, #5
 80006fe:	430a      	orrs	r2, r1
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	4b71      	ldr	r3, [pc, #452]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 8000704:	699a      	ldr	r2, [r3, #24]
 8000706:	2380      	movs	r3, #128	@ 0x80
 8000708:	015b      	lsls	r3, r3, #5
 800070a:	4013      	ands	r3, r2
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b6d      	ldr	r3, [pc, #436]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	4b6c      	ldr	r3, [pc, #432]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 8000716:	2180      	movs	r1, #128	@ 0x80
 8000718:	0289      	lsls	r1, r1, #10
 800071a:	430a      	orrs	r2, r1
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	4b6a      	ldr	r3, [pc, #424]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	2380      	movs	r3, #128	@ 0x80
 8000724:	029b      	lsls	r3, r3, #10
 8000726:	4013      	ands	r3, r2
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	4b66      	ldr	r3, [pc, #408]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	4b65      	ldr	r3, [pc, #404]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	02c9      	lsls	r1, r1, #11
 8000736:	430a      	orrs	r2, r1
 8000738:	615a      	str	r2, [r3, #20]
 800073a:	4b63      	ldr	r3, [pc, #396]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	02db      	lsls	r3, r3, #11
 8000742:	4013      	ands	r3, r2
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2230      	movs	r2, #48	@ 0x30
 800074c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2202      	movs	r2, #2
 8000752:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2203      	movs	r2, #3
 800075e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	193a      	adds	r2, r7, r4
 8000768:	2390      	movs	r3, #144	@ 0x90
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fc96 	bl	80010a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000774:	0021      	movs	r1, r4
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2230      	movs	r2, #48	@ 0x30
 800077a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2202      	movs	r2, #2
 8000780:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2203      	movs	r2, #3
 800078c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	187b      	adds	r3, r7, r1
 8000796:	4a4d      	ldr	r2, [pc, #308]	@ (80008cc <HAL_SPI_MspInit+0x1fc>)
 8000798:	0019      	movs	r1, r3
 800079a:	0010      	movs	r0, r2
 800079c:	f000 fc80 	bl	80010a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80007a0:	4b4b      	ldr	r3, [pc, #300]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007a2:	4a4c      	ldr	r2, [pc, #304]	@ (80008d4 <HAL_SPI_MspInit+0x204>)
 80007a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007a6:	4b4a      	ldr	r3, [pc, #296]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007a8:	2210      	movs	r2, #16
 80007aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ac:	4b48      	ldr	r3, [pc, #288]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007b2:	4b47      	ldr	r3, [pc, #284]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b8:	4b45      	ldr	r3, [pc, #276]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007be:	4b44      	ldr	r3, [pc, #272]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80007c4:	4b42      	ldr	r3, [pc, #264]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007ca:	4b41      	ldr	r3, [pc, #260]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80007d0:	4b3f      	ldr	r3, [pc, #252]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 fb18 	bl	8000e08 <HAL_DMA_Init>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80007dc:	f7ff ff4e 	bl	800067c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a3b      	ldr	r2, [pc, #236]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80007e6:	4b3a      	ldr	r3, [pc, #232]	@ (80008d0 <HAL_SPI_MspInit+0x200>)
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007ec:	e065      	b.n	80008ba <HAL_SPI_MspInit+0x1ea>
  else if(hspi->Instance==SPI2)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a39      	ldr	r2, [pc, #228]	@ (80008d8 <HAL_SPI_MspInit+0x208>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d160      	bne.n	80008ba <HAL_SPI_MspInit+0x1ea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007f8:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 80007fa:	69da      	ldr	r2, [r3, #28]
 80007fc:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 80007fe:	2180      	movs	r1, #128	@ 0x80
 8000800:	01c9      	lsls	r1, r1, #7
 8000802:	430a      	orrs	r2, r1
 8000804:	61da      	str	r2, [r3, #28]
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 8000808:	69da      	ldr	r2, [r3, #28]
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	01db      	lsls	r3, r3, #7
 800080e:	4013      	ands	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000814:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 800081a:	2180      	movs	r1, #128	@ 0x80
 800081c:	02c9      	lsls	r1, r1, #11
 800081e:	430a      	orrs	r2, r1
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <HAL_SPI_MspInit+0x1f8>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	2380      	movs	r3, #128	@ 0x80
 8000828:	02db      	lsls	r3, r3, #11
 800082a:	4013      	ands	r3, r2
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000830:	211c      	movs	r1, #28
 8000832:	187b      	adds	r3, r7, r1
 8000834:	22f0      	movs	r2, #240	@ 0xf0
 8000836:	0212      	lsls	r2, r2, #8
 8000838:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2203      	movs	r2, #3
 800084a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	187b      	adds	r3, r7, r1
 8000854:	4a1d      	ldr	r2, [pc, #116]	@ (80008cc <HAL_SPI_MspInit+0x1fc>)
 8000856:	0019      	movs	r1, r3
 8000858:	0010      	movs	r0, r2
 800085a:	f000 fc21 	bl	80010a0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 8000860:	4a1f      	ldr	r2, [pc, #124]	@ (80008e0 <HAL_SPI_MspInit+0x210>)
 8000862:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fab9 	bl	8000e08 <HAL_DMA_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 800089a:	f7ff feef 	bl	800067c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a0e      	ldr	r2, [pc, #56]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 80008a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <HAL_SPI_MspInit+0x20c>)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	201a      	movs	r0, #26
 80008b0:	f000 fa78 	bl	8000da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008b4:	201a      	movs	r0, #26
 80008b6:	f000 fa8a 	bl	8000dce <HAL_NVIC_EnableIRQ>
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b00d      	add	sp, #52	@ 0x34
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	40013000 	.word	0x40013000
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000400 	.word	0x48000400
 80008d0:	200000f8 	.word	0x200000f8
 80008d4:	40020030 	.word	0x40020030
 80008d8:	40003800 	.word	0x40003800
 80008dc:	2000013c 	.word	0x2000013c
 80008e0:	40020044 	.word	0x40020044

080008e4 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b08b      	sub	sp, #44	@ 0x2c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	2414      	movs	r4, #20
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	0018      	movs	r0, r3
 80008f2:	2314      	movs	r3, #20
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f002 fd96 	bl	8003428 <memset>
  if(htsc->Instance==TSC)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a44      	ldr	r2, [pc, #272]	@ (8000a14 <HAL_TSC_MspInit+0x130>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d000      	beq.n	8000908 <HAL_TSC_MspInit+0x24>
 8000906:	e080      	b.n	8000a0a <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000908:	4b43      	ldr	r3, [pc, #268]	@ (8000a18 <HAL_TSC_MspInit+0x134>)
 800090a:	695a      	ldr	r2, [r3, #20]
 800090c:	4b42      	ldr	r3, [pc, #264]	@ (8000a18 <HAL_TSC_MspInit+0x134>)
 800090e:	2180      	movs	r1, #128	@ 0x80
 8000910:	0449      	lsls	r1, r1, #17
 8000912:	430a      	orrs	r2, r1
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	4b40      	ldr	r3, [pc, #256]	@ (8000a18 <HAL_TSC_MspInit+0x134>)
 8000918:	695a      	ldr	r2, [r3, #20]
 800091a:	2380      	movs	r3, #128	@ 0x80
 800091c:	045b      	lsls	r3, r3, #17
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b3c      	ldr	r3, [pc, #240]	@ (8000a18 <HAL_TSC_MspInit+0x134>)
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	4b3b      	ldr	r3, [pc, #236]	@ (8000a18 <HAL_TSC_MspInit+0x134>)
 800092a:	2180      	movs	r1, #128	@ 0x80
 800092c:	0289      	lsls	r1, r1, #10
 800092e:	430a      	orrs	r2, r1
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	4b39      	ldr	r3, [pc, #228]	@ (8000a18 <HAL_TSC_MspInit+0x134>)
 8000934:	695a      	ldr	r2, [r3, #20]
 8000936:	2380      	movs	r3, #128	@ 0x80
 8000938:	029b      	lsls	r3, r3, #10
 800093a:	4013      	ands	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b35      	ldr	r3, [pc, #212]	@ (8000a18 <HAL_TSC_MspInit+0x134>)
 8000942:	695a      	ldr	r2, [r3, #20]
 8000944:	4b34      	ldr	r3, [pc, #208]	@ (8000a18 <HAL_TSC_MspInit+0x134>)
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	02c9      	lsls	r1, r1, #11
 800094a:	430a      	orrs	r2, r1
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	4b32      	ldr	r3, [pc, #200]	@ (8000a18 <HAL_TSC_MspInit+0x134>)
 8000950:	695a      	ldr	r2, [r3, #20]
 8000952:	2380      	movs	r3, #128	@ 0x80
 8000954:	02db      	lsls	r3, r3, #11
 8000956:	4013      	ands	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2244      	movs	r2, #68	@ 0x44
 8000960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2202      	movs	r2, #2
 8000966:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2203      	movs	r2, #3
 8000978:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	193a      	adds	r2, r7, r4
 800097c:	2390      	movs	r3, #144	@ 0x90
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fb8c 	bl	80010a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2288      	movs	r2, #136	@ 0x88
 800098c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2212      	movs	r2, #18
 8000992:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2203      	movs	r2, #3
 80009a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	193a      	adds	r2, r7, r4
 80009a8:	2390      	movs	r3, #144	@ 0x90
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fb76 	bl	80010a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2202      	movs	r2, #2
 80009be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2203      	movs	r2, #3
 80009d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	4a11      	ldr	r2, [pc, #68]	@ (8000a1c <HAL_TSC_MspInit+0x138>)
 80009d6:	0019      	movs	r1, r3
 80009d8:	0010      	movs	r0, r2
 80009da:	f000 fb61 	bl	80010a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2202      	movs	r2, #2
 80009e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2212      	movs	r2, #18
 80009ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2203      	movs	r2, #3
 80009fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	4a06      	ldr	r2, [pc, #24]	@ (8000a1c <HAL_TSC_MspInit+0x138>)
 8000a02:	0019      	movs	r1, r3
 8000a04:	0010      	movs	r0, r2
 8000a06:	f000 fb4b 	bl	80010a0 <HAL_GPIO_Init>

  /* USER CODE END TSC_MspInit 1 */

  }

}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b00b      	add	sp, #44	@ 0x2c
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	40024000 	.word	0x40024000
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000400 	.word	0x48000400

08000a20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <HAL_PCD_MspInit+0x38>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d10d      	bne.n	8000a4e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a32:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <HAL_PCD_MspInit+0x3c>)
 8000a34:	69da      	ldr	r2, [r3, #28]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_PCD_MspInit+0x3c>)
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	0409      	lsls	r1, r1, #16
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	61da      	str	r2, [r3, #28]
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_PCD_MspInit+0x3c>)
 8000a42:	69da      	ldr	r2, [r3, #28]
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	041b      	lsls	r3, r3, #16
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40005c00 	.word	0x40005c00
 8000a5c:	40021000 	.word	0x40021000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8a0 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000a98:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fa41 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	200000f8 	.word	0x200000f8

08000aac <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fa35 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	2000013c 	.word	0x2000013c

08000ac4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <SPI2_IRQHandler+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 ff0e 	bl	80028ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	20000094 	.word	0x20000094

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae8:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aec:	f7ff fff6 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	@ (8000b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	@ (8000b34 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b16:	f002 fc8f 	bl	8003438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1a:	f7ff fb81 	bl	8000220 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   r0, =_estack
 8000b20:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b2c:	080034d0 	.word	0x080034d0
  ldr r2, =_sbss
 8000b30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b34:	200004a4 	.word	0x200004a4

08000b38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_COMP_IRQHandler>
	...

08000b3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <HAL_Init+0x24>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_Init+0x24>)
 8000b46:	2110      	movs	r1, #16
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 f809 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b52:	f7ff fd99 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_InitTick+0x5c>)
 8000b6e:	681c      	ldr	r4, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <HAL_InitTick+0x60>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	0019      	movs	r1, r3
 8000b76:	23fa      	movs	r3, #250	@ 0xfa
 8000b78:	0098      	lsls	r0, r3, #2
 8000b7a:	f7ff fac5 	bl	8000108 <__udivsi3>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	0019      	movs	r1, r3
 8000b82:	0020      	movs	r0, r4
 8000b84:	f7ff fac0 	bl	8000108 <__udivsi3>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f92f 	bl	8000dee <HAL_SYSTICK_Config>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e00f      	b.n	8000bb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d80b      	bhi.n	8000bb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f8fc 	bl	8000da4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_InitTick+0x64>)
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b003      	add	sp, #12
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	20000004 	.word	0x20000004
 8000bc4:	2000000c 	.word	0x2000000c
 8000bc8:	20000008 	.word	0x20000008

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <HAL_IncTick+0x1c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <HAL_IncTick+0x20>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	18d2      	adds	r2, r2, r3
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <HAL_IncTick+0x20>)
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	2000000c 	.word	0x2000000c
 8000bec:	200004a0 	.word	0x200004a0

08000bf0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b02      	ldr	r3, [pc, #8]	@ (8000c00 <HAL_GetTick+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	200004a0 	.word	0x200004a0

08000c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff fff0 	bl	8000bf0 <HAL_GetTick>
 8000c10:	0003      	movs	r3, r0
 8000c12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	d005      	beq.n	8000c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_Delay+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	001a      	movs	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	189b      	adds	r3, r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	f7ff ffe0 	bl	8000bf0 <HAL_GetTick>
 8000c30:	0002      	movs	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d8f7      	bhi.n	8000c2c <HAL_Delay+0x28>
  {
  }
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b004      	add	sp, #16
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	2000000c 	.word	0x2000000c

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	0002      	movs	r2, r0
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c5e:	d809      	bhi.n	8000c74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	001a      	movs	r2, r3
 8000c66:	231f      	movs	r3, #31
 8000c68:	401a      	ands	r2, r3
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <__NVIC_EnableIRQ+0x30>)
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	000a      	movs	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]
  }
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b002      	add	sp, #8
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	0002      	movs	r2, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c94:	d828      	bhi.n	8000ce8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c96:	4a2f      	ldr	r2, [pc, #188]	@ (8000d54 <__NVIC_SetPriority+0xd4>)
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	33c0      	adds	r3, #192	@ 0xc0
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	589b      	ldr	r3, [r3, r2]
 8000ca6:	1dfa      	adds	r2, r7, #7
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	0011      	movs	r1, r2
 8000cac:	2203      	movs	r2, #3
 8000cae:	400a      	ands	r2, r1
 8000cb0:	00d2      	lsls	r2, r2, #3
 8000cb2:	21ff      	movs	r1, #255	@ 0xff
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	43d2      	mvns	r2, r2
 8000cba:	401a      	ands	r2, r3
 8000cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	22ff      	movs	r2, #255	@ 0xff
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	2303      	movs	r3, #3
 8000cce:	4003      	ands	r3, r0
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd4:	481f      	ldr	r0, [pc, #124]	@ (8000d54 <__NVIC_SetPriority+0xd4>)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	33c0      	adds	r3, #192	@ 0xc0
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ce6:	e031      	b.n	8000d4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <__NVIC_SetPriority+0xd8>)
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0019      	movs	r1, r3
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	3b08      	subs	r3, #8
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3306      	adds	r3, #6
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	3304      	adds	r3, #4
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1dfa      	adds	r2, r7, #7
 8000d04:	7812      	ldrb	r2, [r2, #0]
 8000d06:	0011      	movs	r1, r2
 8000d08:	2203      	movs	r2, #3
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	00d2      	lsls	r2, r2, #3
 8000d0e:	21ff      	movs	r1, #255	@ 0xff
 8000d10:	4091      	lsls	r1, r2
 8000d12:	000a      	movs	r2, r1
 8000d14:	43d2      	mvns	r2, r2
 8000d16:	401a      	ands	r2, r3
 8000d18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	22ff      	movs	r2, #255	@ 0xff
 8000d20:	401a      	ands	r2, r3
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	0018      	movs	r0, r3
 8000d28:	2303      	movs	r3, #3
 8000d2a:	4003      	ands	r3, r0
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d30:	4809      	ldr	r0, [pc, #36]	@ (8000d58 <__NVIC_SetPriority+0xd8>)
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	001c      	movs	r4, r3
 8000d38:	230f      	movs	r3, #15
 8000d3a:	4023      	ands	r3, r4
 8000d3c:	3b08      	subs	r3, #8
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	430a      	orrs	r2, r1
 8000d42:	3306      	adds	r3, #6
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	18c3      	adds	r3, r0, r3
 8000d48:	3304      	adds	r3, #4
 8000d4a:	601a      	str	r2, [r3, #0]
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b003      	add	sp, #12
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	2380      	movs	r3, #128	@ 0x80
 8000d6a:	045b      	lsls	r3, r3, #17
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d301      	bcc.n	8000d74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d70:	2301      	movs	r3, #1
 8000d72:	e010      	b.n	8000d96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <SysTick_Config+0x44>)
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	425b      	negs	r3, r3
 8000d80:	2103      	movs	r1, #3
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff ff7c 	bl	8000c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <SysTick_Config+0x44>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <SysTick_Config+0x44>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	210f      	movs	r1, #15
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	1c02      	adds	r2, r0, #0
 8000db4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff ff5d 	bl	8000c80 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b004      	add	sp, #16
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff ff33 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff ffaf 	bl	8000d5c <SysTick_Config>
 8000dfe:	0003      	movs	r3, r0
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e036      	b.n	8000e8c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2221      	movs	r2, #33	@ 0x21
 8000e22:	2102      	movs	r1, #2
 8000e24:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4a18      	ldr	r2, [pc, #96]	@ (8000e94 <HAL_DMA_Init+0x8c>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 f8fa 	bl	8001068 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2221      	movs	r2, #33	@ 0x21
 8000e7e:	2101      	movs	r1, #1
 8000e80:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2220      	movs	r2, #32
 8000e86:	2100      	movs	r1, #0
 8000e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b004      	add	sp, #16
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	ffffc00f 	.word	0xffffc00f

08000e98 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2221      	movs	r2, #33	@ 0x21
 8000eac:	5c9b      	ldrb	r3, [r3, r2]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d006      	beq.n	8000ec2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e028      	b.n	8000f14 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	210e      	movs	r1, #14
 8000ece:	438a      	bics	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	438a      	bics	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eea:	2101      	movs	r1, #1
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2221      	movs	r2, #33	@ 0x21
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	0010      	movs	r0, r2
 8000f12:	4798      	blx	r3
    }
  }
  return status;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	2204      	movs	r2, #4
 8000f40:	409a      	lsls	r2, r3
 8000f42:	0013      	movs	r3, r2
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4013      	ands	r3, r2
 8000f48:	d024      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x72>
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d020      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d107      	bne.n	8000f6e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2104      	movs	r1, #4
 8000f6a:	438a      	bics	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f76:	2104      	movs	r1, #4
 8000f78:	4091      	lsls	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <HAL_DMA_IRQHandler+0x66>
 8000f86:	e06a      	b.n	800105e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	0010      	movs	r0, r2
 8000f90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f92:	e064      	b.n	800105e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	2202      	movs	r2, #2
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d02b      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xda>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d027      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d10b      	bne.n	8000fd0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	210a      	movs	r1, #10
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2221      	movs	r2, #33	@ 0x21
 8000fcc:	2101      	movs	r1, #1
 8000fce:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4091      	lsls	r1, r2
 8000fdc:	000a      	movs	r2, r1
 8000fde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d036      	beq.n	800105e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	0010      	movs	r0, r2
 8000ff8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000ffa:	e030      	b.n	800105e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	2208      	movs	r2, #8
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4013      	ands	r3, r2
 800100a:	d028      	beq.n	800105e <HAL_DMA_IRQHandler+0x13c>
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2208      	movs	r2, #8
 8001010:	4013      	ands	r3, r2
 8001012:	d024      	beq.n	800105e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	210e      	movs	r1, #14
 8001020:	438a      	bics	r2, r1
 8001022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800102c:	2101      	movs	r1, #1
 800102e:	4091      	lsls	r1, r2
 8001030:	000a      	movs	r2, r1
 8001032:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2221      	movs	r2, #33	@ 0x21
 800103e:	2101      	movs	r1, #1
 8001040:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2220      	movs	r2, #32
 8001046:	2100      	movs	r1, #0
 8001048:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	0010      	movs	r0, r2
 800105a:	4798      	blx	r3
    }
  }
}
 800105c:	e7ff      	b.n	800105e <HAL_DMA_IRQHandler+0x13c>
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b004      	add	sp, #16
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <DMA_CalcBaseAndBitshift+0x30>)
 8001076:	4694      	mov	ip, r2
 8001078:	4463      	add	r3, ip
 800107a:	2114      	movs	r1, #20
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff f843 	bl	8000108 <__udivsi3>
 8001082:	0003      	movs	r3, r0
 8001084:	009a      	lsls	r2, r3, #2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a03      	ldr	r2, [pc, #12]	@ (800109c <DMA_CalcBaseAndBitshift+0x34>)
 800108e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}
 8001098:	bffdfff8 	.word	0xbffdfff8
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ae:	e155      	b.n	800135c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d100      	bne.n	80010c8 <HAL_GPIO_Init+0x28>
 80010c6:	e146      	b.n	8001356 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d005      	beq.n	80010e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2203      	movs	r2, #3
 80010da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	409a      	lsls	r2, r3
 80010ee:	0013      	movs	r3, r2
 80010f0:	43da      	mvns	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	409a      	lsls	r2, r3
 8001102:	0013      	movs	r3, r2
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	43da      	mvns	r2, r3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	2201      	movs	r2, #1
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2203      	movs	r2, #3
 8001148:	4013      	ands	r3, r2
 800114a:	2b03      	cmp	r3, #3
 800114c:	d017      	beq.n	800117e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	43da      	mvns	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2203      	movs	r2, #3
 8001184:	4013      	ands	r3, r2
 8001186:	2b02      	cmp	r3, #2
 8001188:	d123      	bne.n	80011d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	58d3      	ldr	r3, [r2, r3]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2207      	movs	r2, #7
 800119c:	4013      	ands	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2107      	movs	r1, #7
 80011b6:	400b      	ands	r3, r1
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	6939      	ldr	r1, [r7, #16]
 80011d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	401a      	ands	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	23c0      	movs	r3, #192	@ 0xc0
 800120c:	029b      	lsls	r3, r3, #10
 800120e:	4013      	ands	r3, r2
 8001210:	d100      	bne.n	8001214 <HAL_GPIO_Init+0x174>
 8001212:	e0a0      	b.n	8001356 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001214:	4b57      	ldr	r3, [pc, #348]	@ (8001374 <HAL_GPIO_Init+0x2d4>)
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	4b56      	ldr	r3, [pc, #344]	@ (8001374 <HAL_GPIO_Init+0x2d4>)
 800121a:	2101      	movs	r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	619a      	str	r2, [r3, #24]
 8001220:	4b54      	ldr	r3, [pc, #336]	@ (8001374 <HAL_GPIO_Init+0x2d4>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2201      	movs	r2, #1
 8001226:	4013      	ands	r3, r2
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800122c:	4a52      	ldr	r2, [pc, #328]	@ (8001378 <HAL_GPIO_Init+0x2d8>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	589b      	ldr	r3, [r3, r2]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	409a      	lsls	r2, r3
 8001246:	0013      	movs	r3, r2
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	2390      	movs	r3, #144	@ 0x90
 8001254:	05db      	lsls	r3, r3, #23
 8001256:	429a      	cmp	r2, r3
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x1ee>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a47      	ldr	r2, [pc, #284]	@ (800137c <HAL_GPIO_Init+0x2dc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x1ea>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a46      	ldr	r2, [pc, #280]	@ (8001380 <HAL_GPIO_Init+0x2e0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x1e6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a45      	ldr	r2, [pc, #276]	@ (8001384 <HAL_GPIO_Init+0x2e4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x1e2>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a44      	ldr	r2, [pc, #272]	@ (8001388 <HAL_GPIO_Init+0x2e8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x1de>
 800127a:	2304      	movs	r3, #4
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 800127e:	2305      	movs	r3, #5
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 800128e:	2300      	movs	r3, #0
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	2103      	movs	r1, #3
 8001294:	400a      	ands	r2, r1
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	@ (8001378 <HAL_GPIO_Init+0x2d8>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b37      	ldr	r3, [pc, #220]	@ (800138c <HAL_GPIO_Init+0x2ec>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	035b      	lsls	r3, r3, #13
 80012c6:	4013      	ands	r3, r2
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d2:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <HAL_GPIO_Init+0x2ec>)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012d8:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <HAL_GPIO_Init+0x2ec>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	039b      	lsls	r3, r3, #14
 80012f0:	4013      	ands	r3, r2
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_GPIO_Init+0x2ec>)
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <HAL_GPIO_Init+0x2ec>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	029b      	lsls	r3, r3, #10
 800131a:	4013      	ands	r3, r2
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_GPIO_Init+0x2ec>)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800132c:	4b17      	ldr	r3, [pc, #92]	@ (800138c <HAL_GPIO_Init+0x2ec>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43da      	mvns	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	4013      	ands	r3, r2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001350:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <HAL_GPIO_Init+0x2ec>)
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	40da      	lsrs	r2, r3
 8001364:	1e13      	subs	r3, r2, #0
 8001366:	d000      	beq.n	800136a <HAL_GPIO_Init+0x2ca>
 8001368:	e6a2      	b.n	80010b0 <HAL_GPIO_Init+0x10>
  } 
}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b006      	add	sp, #24
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	48001000 	.word	0x48001000
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	0008      	movs	r0, r1
 800139a:	0011      	movs	r1, r2
 800139c:	1cbb      	adds	r3, r7, #2
 800139e:	1c02      	adds	r2, r0, #0
 80013a0:	801a      	strh	r2, [r3, #0]
 80013a2:	1c7b      	adds	r3, r7, #1
 80013a4:	1c0a      	adds	r2, r1, #0
 80013a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	1c7b      	adds	r3, r7, #1
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b0:	1cbb      	adds	r3, r7, #2
 80013b2:	881a      	ldrh	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ba:	1cbb      	adds	r3, r7, #2
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0e4      	b.n	80015a8 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a73      	ldr	r2, [pc, #460]	@ (80015b0 <HAL_PCD_Init+0x1e4>)
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	23a4      	movs	r3, #164	@ 0xa4
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	2100      	movs	r1, #0
 80013f2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fb12 	bl	8000a20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a6c      	ldr	r2, [pc, #432]	@ (80015b0 <HAL_PCD_Init+0x1e4>)
 8001400:	2103      	movs	r1, #3
 8001402:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0018      	movs	r0, r3
 800140a:	f001 ffd7 	bl	80033bc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140e:	230f      	movs	r3, #15
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	e047      	b.n	80014a8 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001418:	200f      	movs	r0, #15
 800141a:	183b      	adds	r3, r7, r0
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	0013      	movs	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	189b      	adds	r3, r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	18cb      	adds	r3, r1, r3
 800142a:	3311      	adds	r3, #17
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001430:	183b      	adds	r3, r7, r0
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	0013      	movs	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	189b      	adds	r3, r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	18cb      	adds	r3, r1, r3
 8001440:	3310      	adds	r3, #16
 8001442:	183a      	adds	r2, r7, r0
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001448:	183b      	adds	r3, r7, r0
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	0013      	movs	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	189b      	adds	r3, r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	18cb      	adds	r3, r1, r3
 8001458:	3313      	adds	r3, #19
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800145e:	183b      	adds	r3, r7, r0
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	0013      	movs	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	189b      	adds	r3, r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	18cb      	adds	r3, r1, r3
 800146e:	3320      	adds	r3, #32
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001474:	183b      	adds	r3, r7, r0
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	0013      	movs	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	189b      	adds	r3, r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	18cb      	adds	r3, r1, r3
 8001484:	3324      	adds	r3, #36	@ 0x24
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800148a:	183b      	adds	r3, r7, r0
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	0013      	movs	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	189b      	adds	r3, r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	2200      	movs	r2, #0
 800149c:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149e:	183b      	adds	r3, r7, r0
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	183b      	adds	r3, r7, r0
 80014a4:	3201      	adds	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	791b      	ldrb	r3, [r3, #4]
 80014ac:	210f      	movs	r1, #15
 80014ae:	187a      	adds	r2, r7, r1
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3b0      	bcc.n	8001418 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e056      	b.n	800156c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014be:	240f      	movs	r4, #15
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	2352      	movs	r3, #82	@ 0x52
 80014c8:	33ff      	adds	r3, #255	@ 0xff
 80014ca:	0019      	movs	r1, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	189b      	adds	r3, r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	18c3      	adds	r3, r0, r3
 80014d6:	185b      	adds	r3, r3, r1
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014dc:	193b      	adds	r3, r7, r4
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	23a8      	movs	r3, #168	@ 0xa8
 80014e4:	0059      	lsls	r1, r3, #1
 80014e6:	0013      	movs	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	189b      	adds	r3, r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	18c3      	adds	r3, r0, r3
 80014f0:	185b      	adds	r3, r3, r1
 80014f2:	193a      	adds	r2, r7, r4
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	2354      	movs	r3, #84	@ 0x54
 8001500:	33ff      	adds	r3, #255	@ 0xff
 8001502:	0019      	movs	r1, r3
 8001504:	0013      	movs	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	189b      	adds	r3, r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	18c3      	adds	r3, r0, r3
 800150e:	185b      	adds	r3, r3, r1
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001514:	193b      	adds	r3, r7, r4
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	23b0      	movs	r3, #176	@ 0xb0
 800151c:	0059      	lsls	r1, r3, #1
 800151e:	0013      	movs	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	189b      	adds	r3, r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	18c3      	adds	r3, r0, r3
 8001528:	185b      	adds	r3, r3, r1
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	23b2      	movs	r3, #178	@ 0xb2
 8001536:	0059      	lsls	r1, r3, #1
 8001538:	0013      	movs	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	189b      	adds	r3, r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	18c3      	adds	r3, r0, r3
 8001542:	185b      	adds	r3, r3, r1
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001548:	193b      	adds	r3, r7, r4
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	23b4      	movs	r3, #180	@ 0xb4
 8001550:	0059      	lsls	r1, r3, #1
 8001552:	0013      	movs	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	189b      	adds	r3, r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	18c3      	adds	r3, r0, r3
 800155c:	185b      	adds	r3, r3, r1
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	193b      	adds	r3, r7, r4
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	193b      	adds	r3, r7, r4
 8001568:	3201      	adds	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	791b      	ldrb	r3, [r3, #4]
 8001570:	220f      	movs	r2, #15
 8001572:	18ba      	adds	r2, r7, r2
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3a1      	bcc.n	80014be <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	f001 ff34 	bl	80033f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <HAL_PCD_Init+0x1e4>)
 8001592:	2101      	movs	r1, #1
 8001594:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7a9b      	ldrb	r3, [r3, #10]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d103      	bne.n	80015a6 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 f807 	bl	80015b4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b005      	add	sp, #20
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	00000291 	.word	0x00000291

080015b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	23b4      	movs	r3, #180	@ 0xb4
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	2101      	movs	r1, #1
 80015ca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	23b2      	movs	r3, #178	@ 0xb2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	2100      	movs	r1, #0
 80015d4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2254      	movs	r2, #84	@ 0x54
 80015da:	5a9b      	ldrh	r3, [r3, r2]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	2201      	movs	r2, #1
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b299      	uxth	r1, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2254      	movs	r2, #84	@ 0x54
 80015e8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2254      	movs	r2, #84	@ 0x54
 80015ee:	5a9b      	ldrh	r3, [r3, r2]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	2202      	movs	r2, #2
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b299      	uxth	r1, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2254      	movs	r2, #84	@ 0x54
 80015fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b004      	add	sp, #16
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f000 fb76 	bl	8001d08 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	4013      	ands	r3, r2
 8001624:	d100      	bne.n	8001628 <HAL_RCC_OscConfig+0x20>
 8001626:	e08e      	b.n	8001746 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001628:	4bc5      	ldr	r3, [pc, #788]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	220c      	movs	r2, #12
 800162e:	4013      	ands	r3, r2
 8001630:	2b04      	cmp	r3, #4
 8001632:	d00e      	beq.n	8001652 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001634:	4bc2      	ldr	r3, [pc, #776]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	220c      	movs	r2, #12
 800163a:	4013      	ands	r3, r2
 800163c:	2b08      	cmp	r3, #8
 800163e:	d117      	bne.n	8001670 <HAL_RCC_OscConfig+0x68>
 8001640:	4bbf      	ldr	r3, [pc, #764]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	23c0      	movs	r3, #192	@ 0xc0
 8001646:	025b      	lsls	r3, r3, #9
 8001648:	401a      	ands	r2, r3
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	429a      	cmp	r2, r3
 8001650:	d10e      	bne.n	8001670 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001652:	4bbb      	ldr	r3, [pc, #748]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d100      	bne.n	8001660 <HAL_RCC_OscConfig+0x58>
 800165e:	e071      	b.n	8001744 <HAL_RCC_OscConfig+0x13c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d000      	beq.n	800166a <HAL_RCC_OscConfig+0x62>
 8001668:	e06c      	b.n	8001744 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	f000 fb4c 	bl	8001d08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d107      	bne.n	8001688 <HAL_RCC_OscConfig+0x80>
 8001678:	4bb1      	ldr	r3, [pc, #708]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4bb0      	ldr	r3, [pc, #704]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0249      	lsls	r1, r1, #9
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e02f      	b.n	80016e8 <HAL_RCC_OscConfig+0xe0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0xa2>
 8001690:	4bab      	ldr	r3, [pc, #684]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4baa      	ldr	r3, [pc, #680]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001696:	49ab      	ldr	r1, [pc, #684]	@ (8001944 <HAL_RCC_OscConfig+0x33c>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	4ba8      	ldr	r3, [pc, #672]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4ba7      	ldr	r3, [pc, #668]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80016a2:	49a9      	ldr	r1, [pc, #676]	@ (8001948 <HAL_RCC_OscConfig+0x340>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e01e      	b.n	80016e8 <HAL_RCC_OscConfig+0xe0>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10e      	bne.n	80016d0 <HAL_RCC_OscConfig+0xc8>
 80016b2:	4ba3      	ldr	r3, [pc, #652]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80016b8:	2180      	movs	r1, #128	@ 0x80
 80016ba:	02c9      	lsls	r1, r1, #11
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	4b9f      	ldr	r3, [pc, #636]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b9e      	ldr	r3, [pc, #632]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	0249      	lsls	r1, r1, #9
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0xe0>
 80016d0:	4b9b      	ldr	r3, [pc, #620]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b9a      	ldr	r3, [pc, #616]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80016d6:	499b      	ldr	r1, [pc, #620]	@ (8001944 <HAL_RCC_OscConfig+0x33c>)
 80016d8:	400a      	ands	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	4b98      	ldr	r3, [pc, #608]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b97      	ldr	r3, [pc, #604]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80016e2:	4999      	ldr	r1, [pc, #612]	@ (8001948 <HAL_RCC_OscConfig+0x340>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d014      	beq.n	800171a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fa7e 	bl	8000bf0 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fa:	f7ff fa79 	bl	8000bf0 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b64      	cmp	r3, #100	@ 0x64
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e2fd      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170c:	4b8c      	ldr	r3, [pc, #560]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	029b      	lsls	r3, r3, #10
 8001714:	4013      	ands	r3, r2
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0xf2>
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fa69 	bl	8000bf0 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fa64 	bl	8000bf0 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	@ 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e2e8      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	4b82      	ldr	r3, [pc, #520]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	@ 0x80
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	4013      	ands	r3, r2
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x11c>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	d100      	bne.n	8001752 <HAL_RCC_OscConfig+0x14a>
 8001750:	e06c      	b.n	800182c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001752:	4b7b      	ldr	r3, [pc, #492]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	220c      	movs	r2, #12
 8001758:	4013      	ands	r3, r2
 800175a:	d00e      	beq.n	800177a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800175c:	4b78      	ldr	r3, [pc, #480]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	220c      	movs	r2, #12
 8001762:	4013      	ands	r3, r2
 8001764:	2b08      	cmp	r3, #8
 8001766:	d11f      	bne.n	80017a8 <HAL_RCC_OscConfig+0x1a0>
 8001768:	4b75      	ldr	r3, [pc, #468]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	23c0      	movs	r3, #192	@ 0xc0
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	401a      	ands	r2, r3
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	429a      	cmp	r2, r3
 8001778:	d116      	bne.n	80017a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	4b71      	ldr	r3, [pc, #452]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2202      	movs	r2, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d005      	beq.n	8001790 <HAL_RCC_OscConfig+0x188>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d001      	beq.n	8001790 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e2bb      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b6b      	ldr	r3, [pc, #428]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	22f8      	movs	r2, #248	@ 0xf8
 8001796:	4393      	bics	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00da      	lsls	r2, r3, #3
 80017a0:	4b67      	ldr	r3, [pc, #412]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	e041      	b.n	800182c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d024      	beq.n	80017fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b0:	4b63      	ldr	r3, [pc, #396]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b62      	ldr	r3, [pc, #392]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fa18 	bl	8000bf0 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff fa13 	bl	8000bf0 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e297      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	4b59      	ldr	r3, [pc, #356]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d0f1      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	4b57      	ldr	r3, [pc, #348]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	22f8      	movs	r2, #248	@ 0xf8
 80017e8:	4393      	bics	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	00da      	lsls	r2, r3, #3
 80017f2:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e018      	b.n	800182c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fa:	4b51      	ldr	r3, [pc, #324]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001800:	2101      	movs	r1, #1
 8001802:	438a      	bics	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff f9f3 	bl	8000bf0 <HAL_GetTick>
 800180a:	0003      	movs	r3, r0
 800180c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff f9ee 	bl	8000bf0 <HAL_GetTick>
 8001814:	0002      	movs	r2, r0
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e272      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2202      	movs	r2, #2
 8001828:	4013      	ands	r3, r2
 800182a:	d1f1      	bne.n	8001810 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2208      	movs	r2, #8
 8001832:	4013      	ands	r3, r2
 8001834:	d036      	beq.n	80018a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d019      	beq.n	8001872 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	4b40      	ldr	r3, [pc, #256]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001840:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001842:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001844:	2101      	movs	r1, #1
 8001846:	430a      	orrs	r2, r1
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff f9d1 	bl	8000bf0 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff f9cc 	bl	8000bf0 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e250      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	4b36      	ldr	r3, [pc, #216]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d0f1      	beq.n	8001854 <HAL_RCC_OscConfig+0x24c>
 8001870:	e018      	b.n	80018a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001872:	4b33      	ldr	r3, [pc, #204]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001876:	4b32      	ldr	r3, [pc, #200]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001878:	2101      	movs	r1, #1
 800187a:	438a      	bics	r2, r1
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff f9b7 	bl	8000bf0 <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001888:	f7ff f9b2 	bl	8000bf0 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e236      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	4b29      	ldr	r3, [pc, #164]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	2202      	movs	r2, #2
 80018a0:	4013      	ands	r3, r2
 80018a2:	d1f1      	bne.n	8001888 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2204      	movs	r2, #4
 80018aa:	4013      	ands	r3, r2
 80018ac:	d100      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2a8>
 80018ae:	e0b5      	b.n	8001a1c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b0:	201f      	movs	r0, #31
 80018b2:	183b      	adds	r3, r7, r0
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b8:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80018ba:	69da      	ldr	r2, [r3, #28]
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	055b      	lsls	r3, r3, #21
 80018c0:	4013      	ands	r3, r2
 80018c2:	d110      	bne.n	80018e6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80018ca:	2180      	movs	r1, #128	@ 0x80
 80018cc:	0549      	lsls	r1, r1, #21
 80018ce:	430a      	orrs	r2, r1
 80018d0:	61da      	str	r2, [r3, #28]
 80018d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	055b      	lsls	r3, r3, #21
 80018da:	4013      	ands	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018e0:	183b      	adds	r3, r7, r0
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b19      	ldr	r3, [pc, #100]	@ (800194c <HAL_RCC_OscConfig+0x344>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	d11a      	bne.n	8001928 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <HAL_RCC_OscConfig+0x344>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_RCC_OscConfig+0x344>)
 80018f8:	2180      	movs	r1, #128	@ 0x80
 80018fa:	0049      	lsls	r1, r1, #1
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001900:	f7ff f976 	bl	8000bf0 <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7ff f971 	bl	8000bf0 <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b64      	cmp	r3, #100	@ 0x64
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1f5      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_RCC_OscConfig+0x344>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4013      	ands	r3, r2
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d10f      	bne.n	8001950 <HAL_RCC_OscConfig+0x348>
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001932:	6a1a      	ldr	r2, [r3, #32]
 8001934:	4b02      	ldr	r3, [pc, #8]	@ (8001940 <HAL_RCC_OscConfig+0x338>)
 8001936:	2101      	movs	r1, #1
 8001938:	430a      	orrs	r2, r1
 800193a:	621a      	str	r2, [r3, #32]
 800193c:	e036      	b.n	80019ac <HAL_RCC_OscConfig+0x3a4>
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	40021000 	.word	0x40021000
 8001944:	fffeffff 	.word	0xfffeffff
 8001948:	fffbffff 	.word	0xfffbffff
 800194c:	40007000 	.word	0x40007000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x36a>
 8001958:	4bca      	ldr	r3, [pc, #808]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 800195a:	6a1a      	ldr	r2, [r3, #32]
 800195c:	4bc9      	ldr	r3, [pc, #804]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 800195e:	2101      	movs	r1, #1
 8001960:	438a      	bics	r2, r1
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	4bc7      	ldr	r3, [pc, #796]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001966:	6a1a      	ldr	r2, [r3, #32]
 8001968:	4bc6      	ldr	r3, [pc, #792]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 800196a:	2104      	movs	r1, #4
 800196c:	438a      	bics	r2, r1
 800196e:	621a      	str	r2, [r3, #32]
 8001970:	e01c      	b.n	80019ac <HAL_RCC_OscConfig+0x3a4>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x38c>
 800197a:	4bc2      	ldr	r3, [pc, #776]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	4bc1      	ldr	r3, [pc, #772]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001980:	2104      	movs	r1, #4
 8001982:	430a      	orrs	r2, r1
 8001984:	621a      	str	r2, [r3, #32]
 8001986:	4bbf      	ldr	r3, [pc, #764]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001988:	6a1a      	ldr	r2, [r3, #32]
 800198a:	4bbe      	ldr	r3, [pc, #760]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	621a      	str	r2, [r3, #32]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0x3a4>
 8001994:	4bbb      	ldr	r3, [pc, #748]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001996:	6a1a      	ldr	r2, [r3, #32]
 8001998:	4bba      	ldr	r3, [pc, #744]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 800199a:	2101      	movs	r1, #1
 800199c:	438a      	bics	r2, r1
 800199e:	621a      	str	r2, [r3, #32]
 80019a0:	4bb8      	ldr	r3, [pc, #736]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 80019a2:	6a1a      	ldr	r2, [r3, #32]
 80019a4:	4bb7      	ldr	r3, [pc, #732]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 80019a6:	2104      	movs	r1, #4
 80019a8:	438a      	bics	r2, r1
 80019aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d014      	beq.n	80019de <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff f91c 	bl	8000bf0 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	e009      	b.n	80019d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff f917 	bl	8000bf0 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	4aaf      	ldr	r2, [pc, #700]	@ (8001c88 <HAL_RCC_OscConfig+0x680>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e19a      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	4bac      	ldr	r3, [pc, #688]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x3b6>
 80019dc:	e013      	b.n	8001a06 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019de:	f7ff f907 	bl	8000bf0 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e6:	e009      	b.n	80019fc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e8:	f7ff f902 	bl	8000bf0 <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	4aa5      	ldr	r2, [pc, #660]	@ (8001c88 <HAL_RCC_OscConfig+0x680>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e185      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fc:	4ba1      	ldr	r3, [pc, #644]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	2202      	movs	r2, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a06:	231f      	movs	r3, #31
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a10:	4b9c      	ldr	r3, [pc, #624]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a12:	69da      	ldr	r2, [r3, #28]
 8001a14:	4b9b      	ldr	r3, [pc, #620]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a16:	499d      	ldr	r1, [pc, #628]	@ (8001c8c <HAL_RCC_OscConfig+0x684>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2210      	movs	r2, #16
 8001a22:	4013      	ands	r3, r2
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d12a      	bne.n	8001a84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a2e:	4b95      	ldr	r3, [pc, #596]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a32:	4b94      	ldr	r3, [pc, #592]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a34:	2104      	movs	r1, #4
 8001a36:	430a      	orrs	r2, r1
 8001a38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a3a:	4b92      	ldr	r3, [pc, #584]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a3e:	4b91      	ldr	r3, [pc, #580]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a40:	2101      	movs	r1, #1
 8001a42:	430a      	orrs	r2, r1
 8001a44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff f8d3 	bl	8000bf0 <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a50:	f7ff f8ce 	bl	8000bf0 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e152      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a62:	4b88      	ldr	r3, [pc, #544]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d0f1      	beq.n	8001a50 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a6c:	4b85      	ldr	r3, [pc, #532]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a70:	22f8      	movs	r2, #248	@ 0xf8
 8001a72:	4393      	bics	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	00da      	lsls	r2, r3, #3
 8001a7c:	4b81      	ldr	r3, [pc, #516]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a82:	e034      	b.n	8001aee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	3305      	adds	r3, #5
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a8c:	4b7d      	ldr	r3, [pc, #500]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a90:	4b7c      	ldr	r3, [pc, #496]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a92:	2104      	movs	r1, #4
 8001a94:	438a      	bics	r2, r1
 8001a96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a98:	4b7a      	ldr	r3, [pc, #488]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9c:	22f8      	movs	r2, #248	@ 0xf8
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	00da      	lsls	r2, r3, #3
 8001aa8:	4b76      	ldr	r3, [pc, #472]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aae:	e01e      	b.n	8001aee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ab0:	4b74      	ldr	r3, [pc, #464]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab4:	4b73      	ldr	r3, [pc, #460]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001abc:	4b71      	ldr	r3, [pc, #452]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ac0:	4b70      	ldr	r3, [pc, #448]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff f892 	bl	8000bf0 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ad2:	f7ff f88d 	bl	8000bf0 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e111      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ae4:	4b67      	ldr	r3, [pc, #412]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f1      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2220      	movs	r2, #32
 8001af4:	4013      	ands	r3, r2
 8001af6:	d05c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001af8:	4b62      	ldr	r3, [pc, #392]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	220c      	movs	r2, #12
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d00e      	beq.n	8001b22 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b04:	4b5f      	ldr	r3, [pc, #380]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	220c      	movs	r2, #12
 8001b0a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d114      	bne.n	8001b3a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b10:	4b5c      	ldr	r3, [pc, #368]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	23c0      	movs	r3, #192	@ 0xc0
 8001b16:	025b      	lsls	r3, r3, #9
 8001b18:	401a      	ands	r2, r3
 8001b1a:	23c0      	movs	r3, #192	@ 0xc0
 8001b1c:	025b      	lsls	r3, r3, #9
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d10b      	bne.n	8001b3a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b22:	4b58      	ldr	r3, [pc, #352]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b26:	2380      	movs	r3, #128	@ 0x80
 8001b28:	029b      	lsls	r3, r3, #10
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d040      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x5a8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d03c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0e6      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d01b      	beq.n	8001b7a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b42:	4b50      	ldr	r3, [pc, #320]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b46:	4b4f      	ldr	r3, [pc, #316]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001b48:	2180      	movs	r1, #128	@ 0x80
 8001b4a:	0249      	lsls	r1, r1, #9
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f84e 	bl	8000bf0 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b5a:	f7ff f849 	bl	8000bf0 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0cd      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b6c:	4b45      	ldr	r3, [pc, #276]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b70:	2380      	movs	r3, #128	@ 0x80
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	4013      	ands	r3, r2
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x552>
 8001b78:	e01b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b7a:	4b42      	ldr	r3, [pc, #264]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b7e:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001b80:	4943      	ldr	r1, [pc, #268]	@ (8001c90 <HAL_RCC_OscConfig+0x688>)
 8001b82:	400a      	ands	r2, r1
 8001b84:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff f833 	bl	8000bf0 <HAL_GetTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b90:	f7ff f82e 	bl	8000bf0 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e0b2      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ba2:	4b38      	ldr	r3, [pc, #224]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	4013      	ands	r3, r2
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x588>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001bb0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d100      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5b4>
 8001bba:	e0a4      	b.n	8001d06 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bbc:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	220c      	movs	r2, #12
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d100      	bne.n	8001bca <HAL_RCC_OscConfig+0x5c2>
 8001bc8:	e078      	b.n	8001cbc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d14c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001bd8:	492e      	ldr	r1, [pc, #184]	@ (8001c94 <HAL_RCC_OscConfig+0x68c>)
 8001bda:	400a      	ands	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff f807 	bl	8000bf0 <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f802 	bl	8000bf0 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e086      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	4b22      	ldr	r3, [pc, #136]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	049b      	lsls	r3, r3, #18
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c06:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	4393      	bics	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c14:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001c3a:	2180      	movs	r1, #128	@ 0x80
 8001c3c:	0449      	lsls	r1, r1, #17
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7fe ffd5 	bl	8000bf0 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7fe ffd0 	bl	8000bf0 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e054      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	@ 0x80
 8001c64:	049b      	lsls	r3, r3, #18
 8001c66:	4013      	ands	r3, r2
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x644>
 8001c6a:	e04c      	b.n	8001d06 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <HAL_RCC_OscConfig+0x67c>)
 8001c72:	4908      	ldr	r1, [pc, #32]	@ (8001c94 <HAL_RCC_OscConfig+0x68c>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7fe ffba 	bl	8000bf0 <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x6a6>
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	40021000 	.word	0x40021000
 8001c88:	00001388 	.word	0x00001388
 8001c8c:	efffffff 	.word	0xefffffff
 8001c90:	fffeffff 	.word	0xfffeffff
 8001c94:	feffffff 	.word	0xfeffffff
 8001c98:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7fe ffa8 	bl	8000bf0 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e02c      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_RCC_OscConfig+0x708>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	049b      	lsls	r3, r3, #18
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x694>
 8001cba:	e024      	b.n	8001d06 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e01f      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_RCC_OscConfig+0x708>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <HAL_RCC_OscConfig+0x708>)
 8001cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	23c0      	movs	r3, #192	@ 0xc0
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	401a      	ands	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d10e      	bne.n	8001d02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	401a      	ands	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	23f0      	movs	r3, #240	@ 0xf0
 8001cf6:	039b      	lsls	r3, r3, #14
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b008      	add	sp, #32
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0bf      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d28:	4b61      	ldr	r3, [pc, #388]	@ (8001eb0 <HAL_RCC_ClockConfig+0x19c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4013      	ands	r3, r2
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d911      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b5e      	ldr	r3, [pc, #376]	@ (8001eb0 <HAL_RCC_ClockConfig+0x19c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4393      	bics	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	4b5b      	ldr	r3, [pc, #364]	@ (8001eb0 <HAL_RCC_ClockConfig+0x19c>)
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d48:	4b59      	ldr	r3, [pc, #356]	@ (8001eb0 <HAL_RCC_ClockConfig+0x19c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4013      	ands	r3, r2
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0a6      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d015      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d006      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d6e:	4b51      	ldr	r3, [pc, #324]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4b50      	ldr	r3, [pc, #320]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001d74:	21e0      	movs	r1, #224	@ 0xe0
 8001d76:	00c9      	lsls	r1, r1, #3
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	22f0      	movs	r2, #240	@ 0xf0
 8001d82:	4393      	bics	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	d04c      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b44      	ldr	r3, [pc, #272]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	029b      	lsls	r3, r3, #10
 8001daa:	4013      	ands	r3, r2
 8001dac:	d120      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e07a      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	049b      	lsls	r3, r3, #18
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d114      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e06e      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001dd2:	4b38      	ldr	r3, [pc, #224]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d108      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e062      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e05b      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df0:	4b30      	ldr	r3, [pc, #192]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	4393      	bics	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001e00:	430a      	orrs	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e04:	f7fe fef4 	bl	8000bf0 <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0c:	e009      	b.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0e:	f7fe feef 	bl	8000bf0 <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a27      	ldr	r2, [pc, #156]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1a4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e042      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	220c      	movs	r2, #12
 8001e28:	401a      	ands	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d1ec      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e34:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_RCC_ClockConfig+0x19c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d211      	bcs.n	8001e66 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_RCC_ClockConfig+0x19c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4393      	bics	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_RCC_ClockConfig+0x19c>)
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_RCC_ClockConfig+0x19c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e020      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d009      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e70:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a11      	ldr	r2, [pc, #68]	@ (8001ebc <HAL_RCC_ClockConfig+0x1a8>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e84:	f000 f820 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e88:	0001      	movs	r1, r0
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1a0>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	220f      	movs	r2, #15
 8001e92:	4013      	ands	r3, r2
 8001e94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1ac>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	000a      	movs	r2, r1
 8001e9a:	40da      	lsrs	r2, r3
 8001e9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7fe fe5f 	bl	8000b64 <HAL_InitTick>
  
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40022000 	.word	0x40022000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	00001388 	.word	0x00001388
 8001ebc:	fffff8ff 	.word	0xfffff8ff
 8001ec0:	08003498 	.word	0x08003498
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	220c      	movs	r2, #12
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d046      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0xb8>
 8001ef2:	d848      	bhi.n	8001f86 <HAL_RCC_GetSysClockFreq+0xbe>
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d002      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x36>
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d003      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x3c>
 8001efc:	e043      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001efe:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f00:	613b      	str	r3, [r7, #16]
      break;
 8001f02:	e043      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	0c9b      	lsrs	r3, r3, #18
 8001f08:	220f      	movs	r2, #15
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	4a24      	ldr	r2, [pc, #144]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f16:	220f      	movs	r2, #15
 8001f18:	4013      	ands	r3, r2
 8001f1a:	4a22      	ldr	r2, [pc, #136]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	23c0      	movs	r3, #192	@ 0xc0
 8001f24:	025b      	lsls	r3, r3, #9
 8001f26:	401a      	ands	r2, r3
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	025b      	lsls	r3, r3, #9
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d109      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	481a      	ldr	r0, [pc, #104]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f34:	f7fe f8e8 	bl	8000108 <__udivsi3>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4353      	muls	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e01a      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	23c0      	movs	r3, #192	@ 0xc0
 8001f48:	025b      	lsls	r3, r3, #9
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	23c0      	movs	r3, #192	@ 0xc0
 8001f4e:	025b      	lsls	r3, r3, #9
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d109      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	4814      	ldr	r0, [pc, #80]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f58:	f7fe f8d6 	bl	8000108 <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	001a      	movs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4353      	muls	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f6c:	f7fe f8cc 	bl	8000108 <__udivsi3>
 8001f70:	0003      	movs	r3, r0
 8001f72:	001a      	movs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4353      	muls	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	613b      	str	r3, [r7, #16]
      break;
 8001f7e:	e005      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001f80:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f82:	613b      	str	r3, [r7, #16]
      break;
 8001f84:	e002      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f88:	613b      	str	r3, [r7, #16]
      break;
 8001f8a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f8c:	693b      	ldr	r3, [r7, #16]
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b006      	add	sp, #24
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	007a1200 	.word	0x007a1200
 8001fa0:	080034a8 	.word	0x080034a8
 8001fa4:	080034b8 	.word	0x080034b8
 8001fa8:	02dc6c00 	.word	0x02dc6c00

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	025b      	lsls	r3, r3, #9
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d100      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fc8:	e08e      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2017      	movs	r0, #23
 8001fcc:	183b      	adds	r3, r7, r0
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b6e      	ldr	r3, [pc, #440]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	055b      	lsls	r3, r3, #21
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d110      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b6b      	ldr	r3, [pc, #428]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	0549      	lsls	r1, r1, #21
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	61da      	str	r2, [r3, #28]
 8001fec:	4b67      	ldr	r3, [pc, #412]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffa:	183b      	adds	r3, r7, r0
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b63      	ldr	r3, [pc, #396]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4013      	ands	r3, r2
 800200a:	d11a      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200c:	4b60      	ldr	r3, [pc, #384]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b5f      	ldr	r3, [pc, #380]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002012:	2180      	movs	r1, #128	@ 0x80
 8002014:	0049      	lsls	r1, r1, #1
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201a:	f7fe fde9 	bl	8000bf0 <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	e008      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002024:	f7fe fde4 	bl	8000bf0 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	@ 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e0a6      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	4b56      	ldr	r3, [pc, #344]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4013      	ands	r3, r2
 8002040:	d0f0      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002042:	4b52      	ldr	r3, [pc, #328]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	23c0      	movs	r3, #192	@ 0xc0
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4013      	ands	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d034      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	23c0      	movs	r3, #192	@ 0xc0
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4013      	ands	r3, r2
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d02c      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002064:	4b49      	ldr	r3, [pc, #292]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a4a      	ldr	r2, [pc, #296]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	4b47      	ldr	r3, [pc, #284]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	4b46      	ldr	r3, [pc, #280]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002074:	2180      	movs	r1, #128	@ 0x80
 8002076:	0249      	lsls	r1, r1, #9
 8002078:	430a      	orrs	r2, r1
 800207a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800207c:	4b43      	ldr	r3, [pc, #268]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800207e:	6a1a      	ldr	r2, [r3, #32]
 8002080:	4b42      	ldr	r3, [pc, #264]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002082:	4945      	ldr	r1, [pc, #276]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002084:	400a      	ands	r2, r1
 8002086:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002088:	4b40      	ldr	r3, [pc, #256]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	4013      	ands	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe fdab 	bl	8000bf0 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209e:	e009      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7fe fda6 	bl	8000bf0 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	4a3c      	ldr	r2, [pc, #240]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e067      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	4b35      	ldr	r3, [pc, #212]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	2202      	movs	r2, #2
 80020ba:	4013      	ands	r3, r2
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020be:	4b33      	ldr	r3, [pc, #204]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a34      	ldr	r2, [pc, #208]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d2:	2317      	movs	r3, #23
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020dc:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020e2:	492f      	ldr	r1, [pc, #188]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f2:	4b26      	ldr	r3, [pc, #152]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	2203      	movs	r2, #3
 80020f8:	4393      	bics	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b22      	ldr	r3, [pc, #136]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002102:	430a      	orrs	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002110:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002114:	4a23      	ldr	r2, [pc, #140]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002120:	430a      	orrs	r2, r1
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2220      	movs	r2, #32
 800212a:	4013      	ands	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800212e:	4b17      	ldr	r3, [pc, #92]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	2210      	movs	r2, #16
 8002134:	4393      	bics	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	4b13      	ldr	r3, [pc, #76]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800213e:	430a      	orrs	r2, r1
 8002140:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	029b      	lsls	r3, r3, #10
 800214a:	4013      	ands	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	2280      	movs	r2, #128	@ 0x80
 8002154:	4393      	bics	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800215e:	430a      	orrs	r2, r1
 8002160:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4013      	ands	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800216e:	4b07      	ldr	r3, [pc, #28]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	2240      	movs	r2, #64	@ 0x40
 8002174:	4393      	bics	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800217e:	430a      	orrs	r2, r1
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b006      	add	sp, #24
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
 8002194:	fffffcff 	.word	0xfffffcff
 8002198:	fffeffff 	.word	0xfffeffff
 800219c:	00001388 	.word	0x00001388
 80021a0:	efffffff 	.word	0xefffffff
 80021a4:	fffcffff 	.word	0xfffcffff

080021a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0a8      	b.n	800230c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2382      	movs	r3, #130	@ 0x82
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d009      	beq.n	80021e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	61da      	str	r2, [r3, #28]
 80021d4:	e005      	b.n	80021e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	225d      	movs	r2, #93	@ 0x5d
 80021ec:	5c9b      	ldrb	r3, [r3, r2]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	225c      	movs	r2, #92	@ 0x5c
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fe fa66 	bl	80006d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	225d      	movs	r2, #93	@ 0x5d
 8002208:	2102      	movs	r1, #2
 800220a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2140      	movs	r1, #64	@ 0x40
 8002218:	438a      	bics	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	23e0      	movs	r3, #224	@ 0xe0
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	429a      	cmp	r2, r3
 8002226:	d902      	bls.n	800222e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e002      	b.n	8002234 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800222e:	2380      	movs	r3, #128	@ 0x80
 8002230:	015b      	lsls	r3, r3, #5
 8002232:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	23f0      	movs	r3, #240	@ 0xf0
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	429a      	cmp	r2, r3
 800223e:	d008      	beq.n	8002252 <HAL_SPI_Init+0xaa>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	23e0      	movs	r3, #224	@ 0xe0
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	429a      	cmp	r2, r3
 800224a:	d002      	beq.n	8002252 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	2382      	movs	r3, #130	@ 0x82
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	401a      	ands	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	2384      	movs	r3, #132	@ 0x84
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	400b      	ands	r3, r1
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2102      	movs	r1, #2
 800226e:	400b      	ands	r3, r1
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2101      	movs	r1, #1
 8002278:	400b      	ands	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6999      	ldr	r1, [r3, #24]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	400b      	ands	r3, r1
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2138      	movs	r1, #56	@ 0x38
 800228e:	400b      	ands	r3, r1
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	2180      	movs	r1, #128	@ 0x80
 8002298:	400b      	ands	r3, r1
 800229a:	431a      	orrs	r2, r3
 800229c:	0011      	movs	r1, r2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	401a      	ands	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	2204      	movs	r2, #4
 80022b8:	401a      	ands	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	2110      	movs	r1, #16
 80022c0:	400b      	ands	r3, r1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c8:	2108      	movs	r1, #8
 80022ca:	400b      	ands	r3, r1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68d9      	ldr	r1, [r3, #12]
 80022d2:	23f0      	movs	r3, #240	@ 0xf0
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	0011      	movs	r1, r2
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	2380      	movs	r3, #128	@ 0x80
 80022e0:	015b      	lsls	r3, r3, #5
 80022e2:	401a      	ands	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4907      	ldr	r1, [pc, #28]	@ (8002314 <HAL_SPI_Init+0x16c>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	225d      	movs	r2, #93	@ 0x5d
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b004      	add	sp, #16
 8002312:	bd80      	pop	{r7, pc}
 8002314:	fffff7ff 	.word	0xfffff7ff

08002318 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	1dbb      	adds	r3, r7, #6
 8002326:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002328:	231f      	movs	r3, #31
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	225c      	movs	r2, #92	@ 0x5c
 8002334:	5c9b      	ldrb	r3, [r3, r2]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_SPI_Transmit+0x26>
 800233a:	2302      	movs	r3, #2
 800233c:	e147      	b.n	80025ce <HAL_SPI_Transmit+0x2b6>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	225c      	movs	r2, #92	@ 0x5c
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002346:	f7fe fc53 	bl	8000bf0 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800234e:	2316      	movs	r3, #22
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	1dba      	adds	r2, r7, #6
 8002354:	8812      	ldrh	r2, [r2, #0]
 8002356:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	225d      	movs	r2, #93	@ 0x5d
 800235c:	5c9b      	ldrb	r3, [r3, r2]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d004      	beq.n	800236e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002364:	231f      	movs	r3, #31
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	2202      	movs	r2, #2
 800236a:	701a      	strb	r2, [r3, #0]
    goto error;
 800236c:	e128      	b.n	80025c0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_SPI_Transmit+0x64>
 8002374:	1dbb      	adds	r3, r7, #6
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800237c:	231f      	movs	r3, #31
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
    goto error;
 8002384:	e11c      	b.n	80025c0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	225d      	movs	r2, #93	@ 0x5d
 800238a:	2103      	movs	r1, #3
 800238c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1dba      	adds	r2, r7, #6
 800239e:	8812      	ldrh	r2, [r2, #0]
 80023a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1dba      	adds	r2, r7, #6
 80023a6:	8812      	ldrh	r2, [r2, #0]
 80023a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2244      	movs	r2, #68	@ 0x44
 80023b4:	2100      	movs	r1, #0
 80023b6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2246      	movs	r2, #70	@ 0x46
 80023bc:	2100      	movs	r1, #0
 80023be:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d110      	bne.n	80023fa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2140      	movs	r1, #64	@ 0x40
 80023e4:	438a      	bics	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	01c9      	lsls	r1, r1, #7
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2240      	movs	r2, #64	@ 0x40
 8002402:	4013      	ands	r3, r2
 8002404:	2b40      	cmp	r3, #64	@ 0x40
 8002406:	d007      	beq.n	8002418 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2140      	movs	r1, #64	@ 0x40
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	23e0      	movs	r3, #224	@ 0xe0
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	429a      	cmp	r2, r3
 8002422:	d952      	bls.n	80024ca <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_SPI_Transmit+0x11e>
 800242c:	2316      	movs	r3, #22
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d143      	bne.n	80024be <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243a:	881a      	ldrh	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002446:	1c9a      	adds	r2, r3, #2
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800245a:	e030      	b.n	80024be <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2202      	movs	r2, #2
 8002464:	4013      	ands	r3, r2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d112      	bne.n	8002490 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247a:	1c9a      	adds	r2, r3, #2
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800248e:	e016      	b.n	80024be <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002490:	f7fe fbae 	bl	8000bf0 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d802      	bhi.n	80024a6 <HAL_SPI_Transmit+0x18e>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_SPI_Transmit+0x194>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d108      	bne.n	80024be <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80024ac:	231f      	movs	r3, #31
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	2203      	movs	r2, #3
 80024b2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	225d      	movs	r2, #93	@ 0x5d
 80024b8:	2101      	movs	r1, #1
 80024ba:	5499      	strb	r1, [r3, r2]
          goto error;
 80024bc:	e080      	b.n	80025c0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1c9      	bne.n	800245c <HAL_SPI_Transmit+0x144>
 80024c8:	e053      	b.n	8002572 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_SPI_Transmit+0x1c4>
 80024d2:	2316      	movs	r3, #22
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d145      	bne.n	8002568 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	330c      	adds	r3, #12
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002502:	e031      	b.n	8002568 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2202      	movs	r2, #2
 800250c:	4013      	ands	r3, r2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d113      	bne.n	800253a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002538:	e016      	b.n	8002568 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800253a:	f7fe fb59 	bl	8000bf0 <HAL_GetTick>
 800253e:	0002      	movs	r2, r0
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d802      	bhi.n	8002550 <HAL_SPI_Transmit+0x238>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	d102      	bne.n	8002556 <HAL_SPI_Transmit+0x23e>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d108      	bne.n	8002568 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002556:	231f      	movs	r3, #31
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2203      	movs	r2, #3
 800255c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	225d      	movs	r2, #93	@ 0x5d
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]
          goto error;
 8002566:	e02b      	b.n	80025c0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1c8      	bne.n	8002504 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	0018      	movs	r0, r3
 800257a:	f000 fdbd 	bl	80030f8 <SPI_EndRxTxTransaction>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d002      	beq.n	8002588 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e003      	b.n	80025c0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	225d      	movs	r2, #93	@ 0x5d
 80025bc:	2101      	movs	r1, #1
 80025be:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	225c      	movs	r2, #92	@ 0x5c
 80025c4:	2100      	movs	r1, #0
 80025c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025c8:	231f      	movs	r3, #31
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	781b      	ldrb	r3, [r3, #0]
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b008      	add	sp, #32
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	1dbb      	adds	r3, r7, #6
 80025e4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025e6:	2117      	movs	r1, #23
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]


  if (hspi->State != HAL_SPI_STATE_READY)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	225d      	movs	r2, #93	@ 0x5d
 80025f2:	5c9b      	ldrb	r3, [r3, r2]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d003      	beq.n	8002602 <HAL_SPI_Receive_IT+0x2a>
  {
    errorcode = HAL_BUSY;
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2202      	movs	r2, #2
 80025fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002600:	e09c      	b.n	800273c <HAL_SPI_Receive_IT+0x164>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d112      	bne.n	8002630 <HAL_SPI_Receive_IT+0x58>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	2382      	movs	r3, #130	@ 0x82
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	429a      	cmp	r2, r3
 8002614:	d10c      	bne.n	8002630 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	225d      	movs	r2, #93	@ 0x5d
 800261a:	2104      	movs	r1, #4
 800261c:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800261e:	1dbb      	adds	r3, r7, #6
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f898 	bl	800275c <HAL_SPI_TransmitReceive_IT>
 800262c:	0003      	movs	r3, r0
 800262e:	e088      	b.n	8002742 <HAL_SPI_Receive_IT+0x16a>
  }


  if ((pData == NULL) || (Size == 0U))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_SPI_Receive_IT+0x66>
 8002636:	1dbb      	adds	r3, r7, #6
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d104      	bne.n	8002648 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800263e:	2317      	movs	r3, #23
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
    goto error;
 8002646:	e079      	b.n	800273c <HAL_SPI_Receive_IT+0x164>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	225c      	movs	r2, #92	@ 0x5c
 800264c:	5c9b      	ldrb	r3, [r3, r2]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_SPI_Receive_IT+0x7e>
 8002652:	2302      	movs	r3, #2
 8002654:	e075      	b.n	8002742 <HAL_SPI_Receive_IT+0x16a>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	225c      	movs	r2, #92	@ 0x5c
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	225d      	movs	r2, #93	@ 0x5d
 8002662:	2104      	movs	r1, #4
 8002664:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1dba      	adds	r2, r7, #6
 8002676:	2144      	movs	r1, #68	@ 0x44
 8002678:	8812      	ldrh	r2, [r2, #0]
 800267a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1dba      	adds	r2, r7, #6
 8002680:	2146      	movs	r1, #70	@ 0x46
 8002682:	8812      	ldrh	r2, [r2, #0]
 8002684:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	23e0      	movs	r3, #224	@ 0xe0
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d90b      	bls.n	80026c2 <HAL_SPI_Receive_IT+0xea>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4925      	ldr	r1, [pc, #148]	@ (800274c <HAL_SPI_Receive_IT+0x174>)
 80026b6:	400a      	ands	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a24      	ldr	r2, [pc, #144]	@ (8002750 <HAL_SPI_Receive_IT+0x178>)
 80026be:	64da      	str	r2, [r3, #76]	@ 0x4c
 80026c0:	e00b      	b.n	80026da <HAL_SPI_Receive_IT+0x102>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2180      	movs	r1, #128	@ 0x80
 80026ce:	0149      	lsls	r1, r1, #5
 80026d0:	430a      	orrs	r2, r1
 80026d2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <HAL_SPI_Receive_IT+0x17c>)
 80026d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d10f      	bne.n	8002706 <HAL_SPI_Receive_IT+0x12e>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2140      	movs	r1, #64	@ 0x40
 80026f2:	438a      	bics	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4915      	ldr	r1, [pc, #84]	@ (8002758 <HAL_SPI_Receive_IT+0x180>)
 8002702:	400a      	ands	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2240      	movs	r2, #64	@ 0x40
 800270e:	4013      	ands	r3, r2
 8002710:	2b40      	cmp	r3, #64	@ 0x40
 8002712:	d007      	beq.n	8002724 <HAL_SPI_Receive_IT+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2140      	movs	r1, #64	@ 0x40
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	225c      	movs	r2, #92	@ 0x5c
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2160      	movs	r1, #96	@ 0x60
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800273c:	2317      	movs	r3, #23
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	781b      	ldrb	r3, [r3, #0]
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b006      	add	sp, #24
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	ffffefff 	.word	0xffffefff
 8002750:	08002d8f 	.word	0x08002d8f
 8002754:	08002d3d 	.word	0x08002d3d
 8002758:	ffffbfff 	.word	0xffffbfff

0800275c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	001a      	movs	r2, r3
 800276a:	1cbb      	adds	r3, r7, #2
 800276c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800276e:	2317      	movs	r3, #23
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002776:	2016      	movs	r0, #22
 8002778:	183b      	adds	r3, r7, r0
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	215d      	movs	r1, #93	@ 0x5d
 800277e:	5c52      	ldrb	r2, [r2, r1]
 8002780:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002788:	0001      	movs	r1, r0
 800278a:	187b      	adds	r3, r7, r1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d011      	beq.n	80027b6 <HAL_SPI_TransmitReceive_IT+0x5a>
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	2382      	movs	r3, #130	@ 0x82
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	429a      	cmp	r2, r3
 800279a:	d107      	bne.n	80027ac <HAL_SPI_TransmitReceive_IT+0x50>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <HAL_SPI_TransmitReceive_IT+0x50>
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d004      	beq.n	80027b6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80027ac:	2317      	movs	r3, #23
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80027b4:	e088      	b.n	80028c8 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_SPI_TransmitReceive_IT+0x6e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_SPI_TransmitReceive_IT+0x6e>
 80027c2:	1cbb      	adds	r3, r7, #2
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d104      	bne.n	80027d4 <HAL_SPI_TransmitReceive_IT+0x78>
  {
    errorcode = HAL_ERROR;
 80027ca:	2317      	movs	r3, #23
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80027d2:	e079      	b.n	80028c8 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	225c      	movs	r2, #92	@ 0x5c
 80027d8:	5c9b      	ldrb	r3, [r3, r2]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_SPI_TransmitReceive_IT+0x86>
 80027de:	2302      	movs	r3, #2
 80027e0:	e075      	b.n	80028ce <HAL_SPI_TransmitReceive_IT+0x172>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	225c      	movs	r2, #92	@ 0x5c
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	225d      	movs	r2, #93	@ 0x5d
 80027ee:	5c9b      	ldrb	r3, [r3, r2]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d003      	beq.n	80027fe <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	225d      	movs	r2, #93	@ 0x5d
 80027fa:	2105      	movs	r1, #5
 80027fc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1cba      	adds	r2, r7, #2
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1cba      	adds	r2, r7, #2
 8002816:	8812      	ldrh	r2, [r2, #0]
 8002818:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1cba      	adds	r2, r7, #2
 8002824:	2144      	movs	r1, #68	@ 0x44
 8002826:	8812      	ldrh	r2, [r2, #0]
 8002828:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1cba      	adds	r2, r7, #2
 800282e:	2146      	movs	r1, #70	@ 0x46
 8002830:	8812      	ldrh	r2, [r2, #0]
 8002832:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	23e0      	movs	r3, #224	@ 0xe0
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	429a      	cmp	r2, r3
 800283e:	d906      	bls.n	800284e <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <HAL_SPI_TransmitReceive_IT+0x17c>)
 8002844:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a24      	ldr	r2, [pc, #144]	@ (80028dc <HAL_SPI_TransmitReceive_IT+0x180>)
 800284a:	651a      	str	r2, [r3, #80]	@ 0x50
 800284c:	e005      	b.n	800285a <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a23      	ldr	r2, [pc, #140]	@ (80028e0 <HAL_SPI_TransmitReceive_IT+0x184>)
 8002852:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a23      	ldr	r2, [pc, #140]	@ (80028e4 <HAL_SPI_TransmitReceive_IT+0x188>)
 8002858:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	23e0      	movs	r3, #224	@ 0xe0
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	429a      	cmp	r2, r3
 8002864:	d803      	bhi.n	800286e <HAL_SPI_TransmitReceive_IT+0x112>
 8002866:	1cbb      	adds	r3, r7, #2
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d908      	bls.n	8002880 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	491b      	ldr	r1, [pc, #108]	@ (80028e8 <HAL_SPI_TransmitReceive_IT+0x18c>)
 800287a:	400a      	ands	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	e008      	b.n	8002892 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2180      	movs	r1, #128	@ 0x80
 800288c:	0149      	lsls	r1, r1, #5
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2240      	movs	r2, #64	@ 0x40
 800289a:	4013      	ands	r3, r2
 800289c:	2b40      	cmp	r3, #64	@ 0x40
 800289e:	d007      	beq.n	80028b0 <HAL_SPI_TransmitReceive_IT+0x154>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2140      	movs	r1, #64	@ 0x40
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	225c      	movs	r2, #92	@ 0x5c
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	21e0      	movs	r1, #224	@ 0xe0
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80028c8:	2317      	movs	r3, #23
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	781b      	ldrb	r3, [r3, #0]
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b006      	add	sp, #24
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	08002c73 	.word	0x08002c73
 80028dc:	08002cdb 	.word	0x08002cdb
 80028e0:	08002b1d 	.word	0x08002b1d
 80028e4:	08002bdf 	.word	0x08002bdf
 80028e8:	ffffefff 	.word	0xffffefff

080028ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2240      	movs	r2, #64	@ 0x40
 8002908:	4013      	ands	r3, r2
 800290a:	d10d      	bne.n	8002928 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2201      	movs	r2, #1
 8002910:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002912:	d009      	beq.n	8002928 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2240      	movs	r2, #64	@ 0x40
 8002918:	4013      	ands	r3, r2
 800291a:	d005      	beq.n	8002928 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	0010      	movs	r0, r2
 8002924:	4798      	blx	r3
    return;
 8002926:	e0c5      	b.n	8002ab4 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_SPI_IRQHandler+0x58>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2280      	movs	r2, #128	@ 0x80
 8002934:	4013      	ands	r3, r2
 8002936:	d005      	beq.n	8002944 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	0010      	movs	r0, r2
 8002940:	4798      	blx	r3
    return;
 8002942:	e0b7      	b.n	8002ab4 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2220      	movs	r2, #32
 8002948:	4013      	ands	r3, r2
 800294a:	d109      	bne.n	8002960 <HAL_SPI_IRQHandler+0x74>
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	4013      	ands	r3, r2
 8002952:	d105      	bne.n	8002960 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4013      	ands	r3, r2
 800295c:	d100      	bne.n	8002960 <HAL_SPI_IRQHandler+0x74>
 800295e:	e0a9      	b.n	8002ab4 <HAL_SPI_IRQHandler+0x1c8>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2220      	movs	r2, #32
 8002964:	4013      	ands	r3, r2
 8002966:	d100      	bne.n	800296a <HAL_SPI_IRQHandler+0x7e>
 8002968:	e0a4      	b.n	8002ab4 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2240      	movs	r2, #64	@ 0x40
 800296e:	4013      	ands	r3, r2
 8002970:	d023      	beq.n	80029ba <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	225d      	movs	r2, #93	@ 0x5d
 8002976:	5c9b      	ldrb	r3, [r3, r2]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b03      	cmp	r3, #3
 800297c:	d011      	beq.n	80029a2 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002982:	2204      	movs	r2, #4
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	e00b      	b.n	80029ba <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]
        return;
 80029b8:	e07c      	b.n	8002ab4 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2220      	movs	r2, #32
 80029be:	4013      	ands	r3, r2
 80029c0:	d014      	beq.n	80029ec <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c6:	2201      	movs	r2, #1
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2140      	movs	r1, #64	@ 0x40
 80029e6:	438a      	bics	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	d00c      	beq.n	8002a10 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fa:	2208      	movs	r2, #8
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d04c      	beq.n	8002ab2 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	21e0      	movs	r1, #224	@ 0xe0
 8002a24:	438a      	bics	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	225d      	movs	r2, #93	@ 0x5d
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2202      	movs	r2, #2
 8002a34:	4013      	ands	r3, r2
 8002a36:	d103      	bne.n	8002a40 <HAL_SPI_IRQHandler+0x154>
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d032      	beq.n	8002aa6 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d010      	beq.n	8002a7a <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5c:	4a17      	ldr	r2, [pc, #92]	@ (8002abc <HAL_SPI_IRQHandler+0x1d0>)
 8002a5e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7fe fa17 	bl	8000e98 <HAL_DMA_Abort_IT>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a72:	2240      	movs	r2, #64	@ 0x40
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a86:	4a0d      	ldr	r2, [pc, #52]	@ (8002abc <HAL_SPI_IRQHandler+0x1d0>)
 8002a88:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fe fa02 	bl	8000e98 <HAL_DMA_Abort_IT>
 8002a94:	1e03      	subs	r3, r0, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9c:	2240      	movs	r2, #64	@ 0x40
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002aa4:	e004      	b.n	8002ab0 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 f819 	bl	8002ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002aae:	e000      	b.n	8002ab2 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002ab0:	46c0      	nop			@ (mov r8, r8)
    return;
 8002ab2:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b008      	add	sp, #32
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	08002af1 	.word	0x08002af1

08002ac0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002ac8:	46c0      	nop			@ (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002ad8:	46c0      	nop			@ (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b002      	add	sp, #8
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ae8:	46c0      	nop			@ (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b002      	add	sp, #8
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2246      	movs	r2, #70	@ 0x46
 8002b02:	2100      	movs	r1, #0
 8002b04:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7ff ffe6 	bl	8002ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b004      	add	sp, #16
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2246      	movs	r2, #70	@ 0x46
 8002b28:	5a9b      	ldrh	r3, [r3, r2]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d924      	bls.n	8002b7a <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	1c9a      	adds	r2, r3, #2
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2246      	movs	r2, #70	@ 0x46
 8002b4c:	5a9b      	ldrh	r3, [r3, r2]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b02      	subs	r3, #2
 8002b52:	b299      	uxth	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2246      	movs	r2, #70	@ 0x46
 8002b58:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2246      	movs	r2, #70	@ 0x46
 8002b5e:	5a9b      	ldrh	r3, [r3, r2]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d120      	bne.n	8002ba8 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2180      	movs	r1, #128	@ 0x80
 8002b72:	0149      	lsls	r1, r1, #5
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	e016      	b.n	8002ba8 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	001a      	movs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	7812      	ldrb	r2, [r2, #0]
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2246      	movs	r2, #70	@ 0x46
 8002b9a:	5a9b      	ldrh	r3, [r3, r2]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b299      	uxth	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2246      	movs	r2, #70	@ 0x46
 8002ba6:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2246      	movs	r2, #70	@ 0x46
 8002bac:	5a9b      	ldrh	r3, [r3, r2]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d110      	bne.n	8002bd6 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2160      	movs	r1, #96	@ 0x60
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 fad7 	bl	8003184 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d912      	bls.n	8002c16 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf4:	881a      	ldrh	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c00:	1c9a      	adds	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b02      	subs	r3, #2
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c14:	e012      	b.n	8002c3c <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d111      	bne.n	8002c6a <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2180      	movs	r1, #128	@ 0x80
 8002c52:	438a      	bics	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2246      	movs	r2, #70	@ 0x46
 8002c5a:	5a9b      	ldrh	r3, [r3, r2]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 fa8d 	bl	8003184 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	b292      	uxth	r2, r2
 8002c86:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2246      	movs	r2, #70	@ 0x46
 8002c96:	5a9b      	ldrh	r3, [r3, r2]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b299      	uxth	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2246      	movs	r2, #70	@ 0x46
 8002ca2:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2246      	movs	r2, #70	@ 0x46
 8002ca8:	5a9b      	ldrh	r3, [r3, r2]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d110      	bne.n	8002cd2 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2140      	movs	r1, #64	@ 0x40
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 fa59 	bl	8003184 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	881a      	ldrh	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	1c9a      	adds	r2, r3, #2
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d111      	bne.n	8002d34 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2180      	movs	r1, #128	@ 0x80
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2246      	movs	r2, #70	@ 0x46
 8002d24:	5a9b      	ldrh	r3, [r3, r2]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fa28 	bl	8003184 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	7812      	ldrb	r2, [r2, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2246      	movs	r2, #70	@ 0x46
 8002d64:	5a9b      	ldrh	r3, [r3, r2]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b299      	uxth	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2246      	movs	r2, #70	@ 0x46
 8002d70:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2246      	movs	r2, #70	@ 0x46
 8002d76:	5a9b      	ldrh	r3, [r3, r2]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 fa45 	bl	8003210 <SPI_CloseRx_ISR>
  }
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	b292      	uxth	r2, r2
 8002da2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	1c9a      	adds	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2246      	movs	r2, #70	@ 0x46
 8002db2:	5a9b      	ldrh	r3, [r3, r2]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b299      	uxth	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2246      	movs	r2, #70	@ 0x46
 8002dbe:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2246      	movs	r2, #70	@ 0x46
 8002dc4:	5a9b      	ldrh	r3, [r3, r2]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 fa1e 	bl	8003210 <SPI_CloseRx_ISR>
  }
}
 8002dd4:	46c0      	nop			@ (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dec:	f7fd ff00 	bl	8000bf0 <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	18d3      	adds	r3, r2, r3
 8002dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dfc:	f7fd fef8 	bl	8000bf0 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e04:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	015b      	lsls	r3, r3, #5
 8002e0a:	0d1b      	lsrs	r3, r3, #20
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	4353      	muls	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e12:	e058      	b.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	d055      	beq.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e1a:	f7fd fee9 	bl	8000bf0 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d902      	bls.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d142      	bne.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	21e0      	movs	r1, #224	@ 0xe0
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	2382      	movs	r3, #130	@ 0x82
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d113      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	2380      	movs	r3, #128	@ 0x80
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d005      	beq.n	8002e64 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	2380      	movs	r3, #128	@ 0x80
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d107      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2140      	movs	r1, #64	@ 0x40
 8002e70:	438a      	bics	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	019b      	lsls	r3, r3, #6
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d110      	bne.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	491a      	ldr	r1, [pc, #104]	@ (8002ef4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2180      	movs	r1, #128	@ 0x80
 8002e9c:	0189      	lsls	r1, r1, #6
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	225d      	movs	r2, #93	@ 0x5d
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	225c      	movs	r2, #92	@ 0x5c
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e017      	b.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	425a      	negs	r2, r3
 8002ed6:	4153      	adcs	r3, r2
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	001a      	movs	r2, r3
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d197      	bne.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b008      	add	sp, #32
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	20000004 	.word	0x20000004
 8002ef4:	ffffdfff 	.word	0xffffdfff

08002ef8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	@ 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f06:	2317      	movs	r3, #23
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f0e:	f7fd fe6f 	bl	8000bf0 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	18d3      	adds	r3, r2, r3
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002f1e:	f7fd fe67 	bl	8000bf0 <HAL_GetTick>
 8002f22:	0003      	movs	r3, r0
 8002f24:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f2e:	4b41      	ldr	r3, [pc, #260]	@ (8003034 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	0013      	movs	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	00da      	lsls	r2, r3, #3
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	0d1b      	lsrs	r3, r3, #20
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f40:	4353      	muls	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f44:	e068      	b.n	8003018 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	23c0      	movs	r3, #192	@ 0xc0
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d10a      	bne.n	8002f66 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	2117      	movs	r1, #23
 8002f5e:	187b      	adds	r3, r7, r1
 8002f60:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	d055      	beq.n	8003018 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f6c:	f7fd fe40 	bl	8000bf0 <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d902      	bls.n	8002f82 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d142      	bne.n	8003008 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	21e0      	movs	r1, #224	@ 0xe0
 8002f8e:	438a      	bics	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	2382      	movs	r3, #130	@ 0x82
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d113      	bne.n	8002fc6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	2380      	movs	r3, #128	@ 0x80
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d005      	beq.n	8002fb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d107      	bne.n	8002fc6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2140      	movs	r1, #64	@ 0x40
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d110      	bne.n	8002ff4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4916      	ldr	r1, [pc, #88]	@ (8003038 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002fde:	400a      	ands	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	0189      	lsls	r1, r1, #6
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	225d      	movs	r2, #93	@ 0x5d
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	225c      	movs	r2, #92	@ 0x5c
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e010      	b.n	800302a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	3b01      	subs	r3, #1
 8003016:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	d18e      	bne.n	8002f46 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b00a      	add	sp, #40	@ 0x28
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	20000004 	.word	0x20000004
 8003038:	ffffdfff 	.word	0xffffdfff

0800303c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	2382      	movs	r3, #130	@ 0x82
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	429a      	cmp	r2, r3
 8003052:	d113      	bne.n	800307c <SPI_EndRxTransaction+0x40>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	2380      	movs	r3, #128	@ 0x80
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	429a      	cmp	r2, r3
 800305e:	d005      	beq.n	800306c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	2380      	movs	r3, #128	@ 0x80
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	429a      	cmp	r2, r3
 800306a:	d107      	bne.n	800307c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2140      	movs	r1, #64	@ 0x40
 8003078:	438a      	bics	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	0013      	movs	r3, r2
 8003086:	2200      	movs	r2, #0
 8003088:	2180      	movs	r1, #128	@ 0x80
 800308a:	f7ff fea7 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 800308e:	1e03      	subs	r3, r0, #0
 8003090:	d007      	beq.n	80030a2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003096:	2220      	movs	r2, #32
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e026      	b.n	80030f0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	2382      	movs	r3, #130	@ 0x82
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d11f      	bne.n	80030ee <SPI_EndRxTransaction+0xb2>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d005      	beq.n	80030c6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d113      	bne.n	80030ee <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	23c0      	movs	r3, #192	@ 0xc0
 80030ca:	00d9      	lsls	r1, r3, #3
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	0013      	movs	r3, r2
 80030d4:	2200      	movs	r2, #0
 80030d6:	f7ff ff0f 	bl	8002ef8 <SPI_WaitFifoStateUntilTimeout>
 80030da:	1e03      	subs	r3, r0, #0
 80030dc:	d007      	beq.n	80030ee <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e2:	2220      	movs	r2, #32
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e000      	b.n	80030f0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b004      	add	sp, #16
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	23c0      	movs	r3, #192	@ 0xc0
 8003108:	0159      	lsls	r1, r3, #5
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	0013      	movs	r3, r2
 8003112:	2200      	movs	r2, #0
 8003114:	f7ff fef0 	bl	8002ef8 <SPI_WaitFifoStateUntilTimeout>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d007      	beq.n	800312c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003120:	2220      	movs	r2, #32
 8003122:	431a      	orrs	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e027      	b.n	800317c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	0013      	movs	r3, r2
 8003136:	2200      	movs	r2, #0
 8003138:	2180      	movs	r1, #128	@ 0x80
 800313a:	f7ff fe4f 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 800313e:	1e03      	subs	r3, r0, #0
 8003140:	d007      	beq.n	8003152 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003146:	2220      	movs	r2, #32
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e014      	b.n	800317c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	23c0      	movs	r3, #192	@ 0xc0
 8003156:	00d9      	lsls	r1, r3, #3
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	0013      	movs	r3, r2
 8003160:	2200      	movs	r2, #0
 8003162:	f7ff fec9 	bl	8002ef8 <SPI_WaitFifoStateUntilTimeout>
 8003166:	1e03      	subs	r3, r0, #0
 8003168:	d007      	beq.n	800317a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316e:	2220      	movs	r2, #32
 8003170:	431a      	orrs	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e000      	b.n	800317c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	0018      	movs	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	b004      	add	sp, #16
 8003182:	bd80      	pop	{r7, pc}

08003184 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800318c:	f7fd fd30 	bl	8000bf0 <HAL_GetTick>
 8003190:	0003      	movs	r3, r0
 8003192:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2120      	movs	r1, #32
 80031a0:	438a      	bics	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2164      	movs	r1, #100	@ 0x64
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7ff ffa4 	bl	80030f8 <SPI_EndRxTxTransaction>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d005      	beq.n	80031c0 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b8:	2220      	movs	r2, #32
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d117      	bne.n	80031f8 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	225d      	movs	r2, #93	@ 0x5d
 80031cc:	5c9b      	ldrb	r3, [r3, r2]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d108      	bne.n	80031e6 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	225d      	movs	r2, #93	@ 0x5d
 80031d8:	2101      	movs	r1, #1
 80031da:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	0018      	movs	r0, r3
 80031e0:	f7ff fc6e 	bl	8002ac0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80031e4:	e010      	b.n	8003208 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	225d      	movs	r2, #93	@ 0x5d
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff fc6d 	bl	8002ad0 <HAL_SPI_TxRxCpltCallback>
}
 80031f6:	e007      	b.n	8003208 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	225d      	movs	r2, #93	@ 0x5d
 80031fc:	2101      	movs	r1, #1
 80031fe:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	0018      	movs	r0, r3
 8003204:	f7ff fc6c 	bl	8002ae0 <HAL_SPI_ErrorCallback>
}
 8003208:	46c0      	nop			@ (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b004      	add	sp, #16
 800320e:	bd80      	pop	{r7, pc}

08003210 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2160      	movs	r1, #96	@ 0x60
 8003224:	438a      	bics	r2, r1
 8003226:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003228:	f7fd fce2 	bl	8000bf0 <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2164      	movs	r1, #100	@ 0x64
 8003232:	0018      	movs	r0, r3
 8003234:	f7ff ff02 	bl	800303c <SPI_EndRxTransaction>
 8003238:	1e03      	subs	r3, r0, #0
 800323a:	d005      	beq.n	8003248 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003240:	2220      	movs	r2, #32
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	225d      	movs	r2, #93	@ 0x5d
 800324c:	2101      	movs	r1, #1
 800324e:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003254:	2b00      	cmp	r3, #0
 8003256:	d104      	bne.n	8003262 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	0018      	movs	r0, r3
 800325c:	f7ff fc30 	bl	8002ac0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003260:	e003      	b.n	800326a <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f7ff fc3b 	bl	8002ae0 <HAL_SPI_ErrorCallback>
}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b002      	add	sp, #8
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8003272:	b590      	push	{r4, r7, lr}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e074      	b.n	800336e <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	223c      	movs	r2, #60	@ 0x3c
 8003288:	5c9b      	ldrb	r3, [r3, r2]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	223d      	movs	r2, #61	@ 0x3d
 8003294:	2100      	movs	r1, #0
 8003296:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	0018      	movs	r0, r3
 800329c:	f7fd fb22 	bl	80008e4 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	223c      	movs	r2, #60	@ 0x3c
 80032a4:	2102      	movs	r1, #2
 80032a6:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80032be:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 80032c6:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80032cc:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 80032d2:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 80032d8:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 80032de:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 80032e4:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7b1b      	ldrb	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d108      	bne.n	8003308 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2180      	movs	r1, #128	@ 0x80
 8003302:	0249      	lsls	r1, r1, #9
 8003304:	430a      	orrs	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	43d2      	mvns	r2, r2
 800331e:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003338:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681c      	ldr	r4, [r3, #0]
 8003342:	0010      	movs	r0, r2
 8003344:	f000 f817 	bl	8003376 <TSC_extract_groups>
 8003348:	0003      	movs	r3, r0
 800334a:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2103      	movs	r1, #3
 8003358:	438a      	bics	r2, r1
 800335a:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2203      	movs	r2, #3
 8003362:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223c      	movs	r2, #60	@ 0x3c
 8003368:	2101      	movs	r1, #1
 800336a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b003      	add	sp, #12
 8003374:	bd90      	pop	{r4, r7, pc}

08003376 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	e011      	b.n	80033ac <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4013      	ands	r3, r2
 8003396:	d006      	beq.n	80033a6 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8003398:	2201      	movs	r2, #1
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	409a      	lsls	r2, r3
 800339e:	0013      	movs	r3, r2
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b07      	cmp	r3, #7
 80033b0:	d9ea      	bls.n	8003388 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80033b2:	68fb      	ldr	r3, [r7, #12]
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}

080033bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80033c4:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <USB_DisableGlobalInt+0x30>)
 80033c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2240      	movs	r2, #64	@ 0x40
 80033cc:	5a9b      	ldrh	r3, [r3, r2]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	b292      	uxth	r2, r2
 80033d4:	43d2      	mvns	r2, r2
 80033d6:	b292      	uxth	r2, r2
 80033d8:	4013      	ands	r3, r2
 80033da:	b299      	uxth	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2240      	movs	r2, #64	@ 0x40
 80033e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b004      	add	sp, #16
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	0000bf80 	.word	0x0000bf80

080033f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	6019      	str	r1, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2240      	movs	r2, #64	@ 0x40
 8003402:	2101      	movs	r1, #1
 8003404:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2240      	movs	r2, #64	@ 0x40
 800340a:	2100      	movs	r1, #0
 800340c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2244      	movs	r2, #68	@ 0x44
 8003412:	2100      	movs	r1, #0
 8003414:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2250      	movs	r2, #80	@ 0x50
 800341a:	2100      	movs	r1, #0
 800341c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bd80      	pop	{r7, pc}

08003428 <memset>:
 8003428:	0003      	movs	r3, r0
 800342a:	1882      	adds	r2, r0, r2
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	7019      	strb	r1, [r3, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <__libc_init_array>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	2600      	movs	r6, #0
 800343c:	4c0c      	ldr	r4, [pc, #48]	@ (8003470 <__libc_init_array+0x38>)
 800343e:	4d0d      	ldr	r5, [pc, #52]	@ (8003474 <__libc_init_array+0x3c>)
 8003440:	1b64      	subs	r4, r4, r5
 8003442:	10a4      	asrs	r4, r4, #2
 8003444:	42a6      	cmp	r6, r4
 8003446:	d109      	bne.n	800345c <__libc_init_array+0x24>
 8003448:	2600      	movs	r6, #0
 800344a:	f000 f819 	bl	8003480 <_init>
 800344e:	4c0a      	ldr	r4, [pc, #40]	@ (8003478 <__libc_init_array+0x40>)
 8003450:	4d0a      	ldr	r5, [pc, #40]	@ (800347c <__libc_init_array+0x44>)
 8003452:	1b64      	subs	r4, r4, r5
 8003454:	10a4      	asrs	r4, r4, #2
 8003456:	42a6      	cmp	r6, r4
 8003458:	d105      	bne.n	8003466 <__libc_init_array+0x2e>
 800345a:	bd70      	pop	{r4, r5, r6, pc}
 800345c:	00b3      	lsls	r3, r6, #2
 800345e:	58eb      	ldr	r3, [r5, r3]
 8003460:	4798      	blx	r3
 8003462:	3601      	adds	r6, #1
 8003464:	e7ee      	b.n	8003444 <__libc_init_array+0xc>
 8003466:	00b3      	lsls	r3, r6, #2
 8003468:	58eb      	ldr	r3, [r5, r3]
 800346a:	4798      	blx	r3
 800346c:	3601      	adds	r6, #1
 800346e:	e7f2      	b.n	8003456 <__libc_init_array+0x1e>
 8003470:	080034c8 	.word	0x080034c8
 8003474:	080034c8 	.word	0x080034c8
 8003478:	080034cc 	.word	0x080034cc
 800347c:	080034c8 	.word	0x080034c8

08003480 <_init>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr

0800348c <_fini>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr
