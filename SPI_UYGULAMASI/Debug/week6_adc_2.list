
week6_adc_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003a94  08003a94  00004a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  2000000c  08003b54  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08003b54  0000544c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db75  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002338  00000000  00000000  00012ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00014ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ff  00000000  00000000  00015be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b45  00000000  00000000  000165e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001115c  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094792  00000000  00000000  00041288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5a1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f98  00000000  00000000  000d5a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d89f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a7c 	.word	0x08003a7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a7c 	.word	0x08003a7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9cb 	bl	80005c4 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f94b 	bl	80004d4 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9bd 	bl	80005c4 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9b3 	bl	80005c4 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f959 	bl	8000524 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f94f 	bl	8000524 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_fdiv>:
 8000294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000296:	464f      	mov	r7, r9
 8000298:	4646      	mov	r6, r8
 800029a:	46d6      	mov	lr, sl
 800029c:	0244      	lsls	r4, r0, #9
 800029e:	b5c0      	push	{r6, r7, lr}
 80002a0:	0047      	lsls	r7, r0, #1
 80002a2:	1c0e      	adds	r6, r1, #0
 80002a4:	0a64      	lsrs	r4, r4, #9
 80002a6:	0e3f      	lsrs	r7, r7, #24
 80002a8:	0fc5      	lsrs	r5, r0, #31
 80002aa:	2f00      	cmp	r7, #0
 80002ac:	d03c      	beq.n	8000328 <__aeabi_fdiv+0x94>
 80002ae:	2fff      	cmp	r7, #255	@ 0xff
 80002b0:	d042      	beq.n	8000338 <__aeabi_fdiv+0xa4>
 80002b2:	2300      	movs	r3, #0
 80002b4:	2280      	movs	r2, #128	@ 0x80
 80002b6:	4699      	mov	r9, r3
 80002b8:	469a      	mov	sl, r3
 80002ba:	00e4      	lsls	r4, r4, #3
 80002bc:	04d2      	lsls	r2, r2, #19
 80002be:	4314      	orrs	r4, r2
 80002c0:	3f7f      	subs	r7, #127	@ 0x7f
 80002c2:	0273      	lsls	r3, r6, #9
 80002c4:	0a5b      	lsrs	r3, r3, #9
 80002c6:	4698      	mov	r8, r3
 80002c8:	0073      	lsls	r3, r6, #1
 80002ca:	0e1b      	lsrs	r3, r3, #24
 80002cc:	0ff6      	lsrs	r6, r6, #31
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d01b      	beq.n	800030a <__aeabi_fdiv+0x76>
 80002d2:	2bff      	cmp	r3, #255	@ 0xff
 80002d4:	d013      	beq.n	80002fe <__aeabi_fdiv+0x6a>
 80002d6:	4642      	mov	r2, r8
 80002d8:	2180      	movs	r1, #128	@ 0x80
 80002da:	00d2      	lsls	r2, r2, #3
 80002dc:	04c9      	lsls	r1, r1, #19
 80002de:	4311      	orrs	r1, r2
 80002e0:	4688      	mov	r8, r1
 80002e2:	2000      	movs	r0, #0
 80002e4:	3b7f      	subs	r3, #127	@ 0x7f
 80002e6:	0029      	movs	r1, r5
 80002e8:	1aff      	subs	r7, r7, r3
 80002ea:	464b      	mov	r3, r9
 80002ec:	4071      	eors	r1, r6
 80002ee:	b2c9      	uxtb	r1, r1
 80002f0:	2b0f      	cmp	r3, #15
 80002f2:	d900      	bls.n	80002f6 <__aeabi_fdiv+0x62>
 80002f4:	e0b5      	b.n	8000462 <__aeabi_fdiv+0x1ce>
 80002f6:	4a74      	ldr	r2, [pc, #464]	@ (80004c8 <__aeabi_fdiv+0x234>)
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	58d3      	ldr	r3, [r2, r3]
 80002fc:	469f      	mov	pc, r3
 80002fe:	4643      	mov	r3, r8
 8000300:	2b00      	cmp	r3, #0
 8000302:	d13f      	bne.n	8000384 <__aeabi_fdiv+0xf0>
 8000304:	3fff      	subs	r7, #255	@ 0xff
 8000306:	3302      	adds	r3, #2
 8000308:	e003      	b.n	8000312 <__aeabi_fdiv+0x7e>
 800030a:	4643      	mov	r3, r8
 800030c:	2b00      	cmp	r3, #0
 800030e:	d12d      	bne.n	800036c <__aeabi_fdiv+0xd8>
 8000310:	2301      	movs	r3, #1
 8000312:	0029      	movs	r1, r5
 8000314:	464a      	mov	r2, r9
 8000316:	4071      	eors	r1, r6
 8000318:	b2c9      	uxtb	r1, r1
 800031a:	431a      	orrs	r2, r3
 800031c:	2a0e      	cmp	r2, #14
 800031e:	d838      	bhi.n	8000392 <__aeabi_fdiv+0xfe>
 8000320:	486a      	ldr	r0, [pc, #424]	@ (80004cc <__aeabi_fdiv+0x238>)
 8000322:	0092      	lsls	r2, r2, #2
 8000324:	5882      	ldr	r2, [r0, r2]
 8000326:	4697      	mov	pc, r2
 8000328:	2c00      	cmp	r4, #0
 800032a:	d113      	bne.n	8000354 <__aeabi_fdiv+0xc0>
 800032c:	2304      	movs	r3, #4
 800032e:	4699      	mov	r9, r3
 8000330:	3b03      	subs	r3, #3
 8000332:	2700      	movs	r7, #0
 8000334:	469a      	mov	sl, r3
 8000336:	e7c4      	b.n	80002c2 <__aeabi_fdiv+0x2e>
 8000338:	2c00      	cmp	r4, #0
 800033a:	d105      	bne.n	8000348 <__aeabi_fdiv+0xb4>
 800033c:	2308      	movs	r3, #8
 800033e:	4699      	mov	r9, r3
 8000340:	3b06      	subs	r3, #6
 8000342:	27ff      	movs	r7, #255	@ 0xff
 8000344:	469a      	mov	sl, r3
 8000346:	e7bc      	b.n	80002c2 <__aeabi_fdiv+0x2e>
 8000348:	230c      	movs	r3, #12
 800034a:	4699      	mov	r9, r3
 800034c:	3b09      	subs	r3, #9
 800034e:	27ff      	movs	r7, #255	@ 0xff
 8000350:	469a      	mov	sl, r3
 8000352:	e7b6      	b.n	80002c2 <__aeabi_fdiv+0x2e>
 8000354:	0020      	movs	r0, r4
 8000356:	f000 fd59 	bl	8000e0c <__clzsi2>
 800035a:	2776      	movs	r7, #118	@ 0x76
 800035c:	1f43      	subs	r3, r0, #5
 800035e:	409c      	lsls	r4, r3
 8000360:	2300      	movs	r3, #0
 8000362:	427f      	negs	r7, r7
 8000364:	4699      	mov	r9, r3
 8000366:	469a      	mov	sl, r3
 8000368:	1a3f      	subs	r7, r7, r0
 800036a:	e7aa      	b.n	80002c2 <__aeabi_fdiv+0x2e>
 800036c:	4640      	mov	r0, r8
 800036e:	f000 fd4d 	bl	8000e0c <__clzsi2>
 8000372:	4642      	mov	r2, r8
 8000374:	1f43      	subs	r3, r0, #5
 8000376:	409a      	lsls	r2, r3
 8000378:	2376      	movs	r3, #118	@ 0x76
 800037a:	425b      	negs	r3, r3
 800037c:	1a1b      	subs	r3, r3, r0
 800037e:	4690      	mov	r8, r2
 8000380:	2000      	movs	r0, #0
 8000382:	e7b0      	b.n	80002e6 <__aeabi_fdiv+0x52>
 8000384:	2303      	movs	r3, #3
 8000386:	464a      	mov	r2, r9
 8000388:	431a      	orrs	r2, r3
 800038a:	4691      	mov	r9, r2
 800038c:	2003      	movs	r0, #3
 800038e:	33fc      	adds	r3, #252	@ 0xfc
 8000390:	e7a9      	b.n	80002e6 <__aeabi_fdiv+0x52>
 8000392:	000d      	movs	r5, r1
 8000394:	20ff      	movs	r0, #255	@ 0xff
 8000396:	2200      	movs	r2, #0
 8000398:	05c0      	lsls	r0, r0, #23
 800039a:	07ed      	lsls	r5, r5, #31
 800039c:	4310      	orrs	r0, r2
 800039e:	4328      	orrs	r0, r5
 80003a0:	bce0      	pop	{r5, r6, r7}
 80003a2:	46ba      	mov	sl, r7
 80003a4:	46b1      	mov	r9, r6
 80003a6:	46a8      	mov	r8, r5
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003aa:	000d      	movs	r5, r1
 80003ac:	2000      	movs	r0, #0
 80003ae:	2200      	movs	r2, #0
 80003b0:	e7f2      	b.n	8000398 <__aeabi_fdiv+0x104>
 80003b2:	4653      	mov	r3, sl
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d0ed      	beq.n	8000394 <__aeabi_fdiv+0x100>
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	d033      	beq.n	8000424 <__aeabi_fdiv+0x190>
 80003bc:	46a0      	mov	r8, r4
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d105      	bne.n	80003ce <__aeabi_fdiv+0x13a>
 80003c2:	2000      	movs	r0, #0
 80003c4:	2200      	movs	r2, #0
 80003c6:	e7e7      	b.n	8000398 <__aeabi_fdiv+0x104>
 80003c8:	0035      	movs	r5, r6
 80003ca:	2803      	cmp	r0, #3
 80003cc:	d07a      	beq.n	80004c4 <__aeabi_fdiv+0x230>
 80003ce:	003b      	movs	r3, r7
 80003d0:	337f      	adds	r3, #127	@ 0x7f
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	dd2d      	ble.n	8000432 <__aeabi_fdiv+0x19e>
 80003d6:	4642      	mov	r2, r8
 80003d8:	0752      	lsls	r2, r2, #29
 80003da:	d007      	beq.n	80003ec <__aeabi_fdiv+0x158>
 80003dc:	220f      	movs	r2, #15
 80003de:	4641      	mov	r1, r8
 80003e0:	400a      	ands	r2, r1
 80003e2:	2a04      	cmp	r2, #4
 80003e4:	d002      	beq.n	80003ec <__aeabi_fdiv+0x158>
 80003e6:	2204      	movs	r2, #4
 80003e8:	4694      	mov	ip, r2
 80003ea:	44e0      	add	r8, ip
 80003ec:	4642      	mov	r2, r8
 80003ee:	0112      	lsls	r2, r2, #4
 80003f0:	d505      	bpl.n	80003fe <__aeabi_fdiv+0x16a>
 80003f2:	4642      	mov	r2, r8
 80003f4:	4b36      	ldr	r3, [pc, #216]	@ (80004d0 <__aeabi_fdiv+0x23c>)
 80003f6:	401a      	ands	r2, r3
 80003f8:	003b      	movs	r3, r7
 80003fa:	4690      	mov	r8, r2
 80003fc:	3380      	adds	r3, #128	@ 0x80
 80003fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8000400:	dcc8      	bgt.n	8000394 <__aeabi_fdiv+0x100>
 8000402:	4642      	mov	r2, r8
 8000404:	0192      	lsls	r2, r2, #6
 8000406:	0a52      	lsrs	r2, r2, #9
 8000408:	b2d8      	uxtb	r0, r3
 800040a:	e7c5      	b.n	8000398 <__aeabi_fdiv+0x104>
 800040c:	2280      	movs	r2, #128	@ 0x80
 800040e:	2500      	movs	r5, #0
 8000410:	20ff      	movs	r0, #255	@ 0xff
 8000412:	03d2      	lsls	r2, r2, #15
 8000414:	e7c0      	b.n	8000398 <__aeabi_fdiv+0x104>
 8000416:	2280      	movs	r2, #128	@ 0x80
 8000418:	03d2      	lsls	r2, r2, #15
 800041a:	4214      	tst	r4, r2
 800041c:	d002      	beq.n	8000424 <__aeabi_fdiv+0x190>
 800041e:	4643      	mov	r3, r8
 8000420:	4213      	tst	r3, r2
 8000422:	d049      	beq.n	80004b8 <__aeabi_fdiv+0x224>
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	03d2      	lsls	r2, r2, #15
 8000428:	4322      	orrs	r2, r4
 800042a:	0252      	lsls	r2, r2, #9
 800042c:	20ff      	movs	r0, #255	@ 0xff
 800042e:	0a52      	lsrs	r2, r2, #9
 8000430:	e7b2      	b.n	8000398 <__aeabi_fdiv+0x104>
 8000432:	2201      	movs	r2, #1
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	2b1b      	cmp	r3, #27
 8000438:	dcc3      	bgt.n	80003c2 <__aeabi_fdiv+0x12e>
 800043a:	4642      	mov	r2, r8
 800043c:	40da      	lsrs	r2, r3
 800043e:	4643      	mov	r3, r8
 8000440:	379e      	adds	r7, #158	@ 0x9e
 8000442:	40bb      	lsls	r3, r7
 8000444:	1e59      	subs	r1, r3, #1
 8000446:	418b      	sbcs	r3, r1
 8000448:	431a      	orrs	r2, r3
 800044a:	0753      	lsls	r3, r2, #29
 800044c:	d004      	beq.n	8000458 <__aeabi_fdiv+0x1c4>
 800044e:	230f      	movs	r3, #15
 8000450:	4013      	ands	r3, r2
 8000452:	2b04      	cmp	r3, #4
 8000454:	d000      	beq.n	8000458 <__aeabi_fdiv+0x1c4>
 8000456:	3204      	adds	r2, #4
 8000458:	0153      	lsls	r3, r2, #5
 800045a:	d529      	bpl.n	80004b0 <__aeabi_fdiv+0x21c>
 800045c:	2001      	movs	r0, #1
 800045e:	2200      	movs	r2, #0
 8000460:	e79a      	b.n	8000398 <__aeabi_fdiv+0x104>
 8000462:	4642      	mov	r2, r8
 8000464:	0163      	lsls	r3, r4, #5
 8000466:	0155      	lsls	r5, r2, #5
 8000468:	42ab      	cmp	r3, r5
 800046a:	d215      	bcs.n	8000498 <__aeabi_fdiv+0x204>
 800046c:	201b      	movs	r0, #27
 800046e:	2200      	movs	r2, #0
 8000470:	3f01      	subs	r7, #1
 8000472:	2601      	movs	r6, #1
 8000474:	001c      	movs	r4, r3
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	2c00      	cmp	r4, #0
 800047c:	db01      	blt.n	8000482 <__aeabi_fdiv+0x1ee>
 800047e:	429d      	cmp	r5, r3
 8000480:	d801      	bhi.n	8000486 <__aeabi_fdiv+0x1f2>
 8000482:	1b5b      	subs	r3, r3, r5
 8000484:	4332      	orrs	r2, r6
 8000486:	3801      	subs	r0, #1
 8000488:	2800      	cmp	r0, #0
 800048a:	d1f3      	bne.n	8000474 <__aeabi_fdiv+0x1e0>
 800048c:	1e58      	subs	r0, r3, #1
 800048e:	4183      	sbcs	r3, r0
 8000490:	4313      	orrs	r3, r2
 8000492:	4698      	mov	r8, r3
 8000494:	000d      	movs	r5, r1
 8000496:	e79a      	b.n	80003ce <__aeabi_fdiv+0x13a>
 8000498:	201a      	movs	r0, #26
 800049a:	2201      	movs	r2, #1
 800049c:	1b5b      	subs	r3, r3, r5
 800049e:	e7e8      	b.n	8000472 <__aeabi_fdiv+0x1de>
 80004a0:	3b02      	subs	r3, #2
 80004a2:	425a      	negs	r2, r3
 80004a4:	4153      	adcs	r3, r2
 80004a6:	425b      	negs	r3, r3
 80004a8:	0035      	movs	r5, r6
 80004aa:	2200      	movs	r2, #0
 80004ac:	b2d8      	uxtb	r0, r3
 80004ae:	e773      	b.n	8000398 <__aeabi_fdiv+0x104>
 80004b0:	0192      	lsls	r2, r2, #6
 80004b2:	2000      	movs	r0, #0
 80004b4:	0a52      	lsrs	r2, r2, #9
 80004b6:	e76f      	b.n	8000398 <__aeabi_fdiv+0x104>
 80004b8:	431a      	orrs	r2, r3
 80004ba:	0252      	lsls	r2, r2, #9
 80004bc:	0035      	movs	r5, r6
 80004be:	20ff      	movs	r0, #255	@ 0xff
 80004c0:	0a52      	lsrs	r2, r2, #9
 80004c2:	e769      	b.n	8000398 <__aeabi_fdiv+0x104>
 80004c4:	4644      	mov	r4, r8
 80004c6:	e7ad      	b.n	8000424 <__aeabi_fdiv+0x190>
 80004c8:	08003a94 	.word	0x08003a94
 80004cc:	08003ad4 	.word	0x08003ad4
 80004d0:	f7ffffff 	.word	0xf7ffffff

080004d4 <__eqsf2>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	0042      	lsls	r2, r0, #1
 80004d8:	024e      	lsls	r6, r1, #9
 80004da:	004c      	lsls	r4, r1, #1
 80004dc:	0245      	lsls	r5, r0, #9
 80004de:	0a6d      	lsrs	r5, r5, #9
 80004e0:	0e12      	lsrs	r2, r2, #24
 80004e2:	0fc3      	lsrs	r3, r0, #31
 80004e4:	0a76      	lsrs	r6, r6, #9
 80004e6:	0e24      	lsrs	r4, r4, #24
 80004e8:	0fc9      	lsrs	r1, r1, #31
 80004ea:	2aff      	cmp	r2, #255	@ 0xff
 80004ec:	d010      	beq.n	8000510 <__eqsf2+0x3c>
 80004ee:	2cff      	cmp	r4, #255	@ 0xff
 80004f0:	d00c      	beq.n	800050c <__eqsf2+0x38>
 80004f2:	2001      	movs	r0, #1
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d10a      	bne.n	800050e <__eqsf2+0x3a>
 80004f8:	42b5      	cmp	r5, r6
 80004fa:	d108      	bne.n	800050e <__eqsf2+0x3a>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d00f      	beq.n	8000520 <__eqsf2+0x4c>
 8000500:	2a00      	cmp	r2, #0
 8000502:	d104      	bne.n	800050e <__eqsf2+0x3a>
 8000504:	0028      	movs	r0, r5
 8000506:	1e43      	subs	r3, r0, #1
 8000508:	4198      	sbcs	r0, r3
 800050a:	e000      	b.n	800050e <__eqsf2+0x3a>
 800050c:	2001      	movs	r0, #1
 800050e:	bd70      	pop	{r4, r5, r6, pc}
 8000510:	2001      	movs	r0, #1
 8000512:	2cff      	cmp	r4, #255	@ 0xff
 8000514:	d1fb      	bne.n	800050e <__eqsf2+0x3a>
 8000516:	4335      	orrs	r5, r6
 8000518:	d1f9      	bne.n	800050e <__eqsf2+0x3a>
 800051a:	404b      	eors	r3, r1
 800051c:	0018      	movs	r0, r3
 800051e:	e7f6      	b.n	800050e <__eqsf2+0x3a>
 8000520:	2000      	movs	r0, #0
 8000522:	e7f4      	b.n	800050e <__eqsf2+0x3a>

08000524 <__gesf2>:
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	0042      	lsls	r2, r0, #1
 8000528:	0244      	lsls	r4, r0, #9
 800052a:	024d      	lsls	r5, r1, #9
 800052c:	0fc3      	lsrs	r3, r0, #31
 800052e:	0048      	lsls	r0, r1, #1
 8000530:	0a64      	lsrs	r4, r4, #9
 8000532:	0e12      	lsrs	r2, r2, #24
 8000534:	0a6d      	lsrs	r5, r5, #9
 8000536:	0e00      	lsrs	r0, r0, #24
 8000538:	0fc9      	lsrs	r1, r1, #31
 800053a:	2aff      	cmp	r2, #255	@ 0xff
 800053c:	d019      	beq.n	8000572 <__gesf2+0x4e>
 800053e:	28ff      	cmp	r0, #255	@ 0xff
 8000540:	d00b      	beq.n	800055a <__gesf2+0x36>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d11e      	bne.n	8000584 <__gesf2+0x60>
 8000546:	2800      	cmp	r0, #0
 8000548:	d10b      	bne.n	8000562 <__gesf2+0x3e>
 800054a:	2d00      	cmp	r5, #0
 800054c:	d027      	beq.n	800059e <__gesf2+0x7a>
 800054e:	2c00      	cmp	r4, #0
 8000550:	d134      	bne.n	80005bc <__gesf2+0x98>
 8000552:	2900      	cmp	r1, #0
 8000554:	d02f      	beq.n	80005b6 <__gesf2+0x92>
 8000556:	0008      	movs	r0, r1
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	2d00      	cmp	r5, #0
 800055c:	d128      	bne.n	80005b0 <__gesf2+0x8c>
 800055e:	2a00      	cmp	r2, #0
 8000560:	d101      	bne.n	8000566 <__gesf2+0x42>
 8000562:	2c00      	cmp	r4, #0
 8000564:	d0f5      	beq.n	8000552 <__gesf2+0x2e>
 8000566:	428b      	cmp	r3, r1
 8000568:	d107      	bne.n	800057a <__gesf2+0x56>
 800056a:	2b00      	cmp	r3, #0
 800056c:	d023      	beq.n	80005b6 <__gesf2+0x92>
 800056e:	0018      	movs	r0, r3
 8000570:	e7f2      	b.n	8000558 <__gesf2+0x34>
 8000572:	2c00      	cmp	r4, #0
 8000574:	d11c      	bne.n	80005b0 <__gesf2+0x8c>
 8000576:	28ff      	cmp	r0, #255	@ 0xff
 8000578:	d014      	beq.n	80005a4 <__gesf2+0x80>
 800057a:	1e58      	subs	r0, r3, #1
 800057c:	2302      	movs	r3, #2
 800057e:	4018      	ands	r0, r3
 8000580:	3801      	subs	r0, #1
 8000582:	e7e9      	b.n	8000558 <__gesf2+0x34>
 8000584:	2800      	cmp	r0, #0
 8000586:	d0f8      	beq.n	800057a <__gesf2+0x56>
 8000588:	428b      	cmp	r3, r1
 800058a:	d1f6      	bne.n	800057a <__gesf2+0x56>
 800058c:	4282      	cmp	r2, r0
 800058e:	dcf4      	bgt.n	800057a <__gesf2+0x56>
 8000590:	dbeb      	blt.n	800056a <__gesf2+0x46>
 8000592:	42ac      	cmp	r4, r5
 8000594:	d8f1      	bhi.n	800057a <__gesf2+0x56>
 8000596:	2000      	movs	r0, #0
 8000598:	42ac      	cmp	r4, r5
 800059a:	d2dd      	bcs.n	8000558 <__gesf2+0x34>
 800059c:	e7e5      	b.n	800056a <__gesf2+0x46>
 800059e:	2c00      	cmp	r4, #0
 80005a0:	d0da      	beq.n	8000558 <__gesf2+0x34>
 80005a2:	e7ea      	b.n	800057a <__gesf2+0x56>
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d103      	bne.n	80005b0 <__gesf2+0x8c>
 80005a8:	428b      	cmp	r3, r1
 80005aa:	d1e6      	bne.n	800057a <__gesf2+0x56>
 80005ac:	2000      	movs	r0, #0
 80005ae:	e7d3      	b.n	8000558 <__gesf2+0x34>
 80005b0:	2002      	movs	r0, #2
 80005b2:	4240      	negs	r0, r0
 80005b4:	e7d0      	b.n	8000558 <__gesf2+0x34>
 80005b6:	2001      	movs	r0, #1
 80005b8:	4240      	negs	r0, r0
 80005ba:	e7cd      	b.n	8000558 <__gesf2+0x34>
 80005bc:	428b      	cmp	r3, r1
 80005be:	d0e8      	beq.n	8000592 <__gesf2+0x6e>
 80005c0:	e7db      	b.n	800057a <__gesf2+0x56>
 80005c2:	46c0      	nop			@ (mov r8, r8)

080005c4 <__lesf2>:
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	0042      	lsls	r2, r0, #1
 80005c8:	0244      	lsls	r4, r0, #9
 80005ca:	024d      	lsls	r5, r1, #9
 80005cc:	0fc3      	lsrs	r3, r0, #31
 80005ce:	0048      	lsls	r0, r1, #1
 80005d0:	0a64      	lsrs	r4, r4, #9
 80005d2:	0e12      	lsrs	r2, r2, #24
 80005d4:	0a6d      	lsrs	r5, r5, #9
 80005d6:	0e00      	lsrs	r0, r0, #24
 80005d8:	0fc9      	lsrs	r1, r1, #31
 80005da:	2aff      	cmp	r2, #255	@ 0xff
 80005dc:	d01a      	beq.n	8000614 <__lesf2+0x50>
 80005de:	28ff      	cmp	r0, #255	@ 0xff
 80005e0:	d00e      	beq.n	8000600 <__lesf2+0x3c>
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d11e      	bne.n	8000624 <__lesf2+0x60>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	d10e      	bne.n	8000608 <__lesf2+0x44>
 80005ea:	2d00      	cmp	r5, #0
 80005ec:	d02a      	beq.n	8000644 <__lesf2+0x80>
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d00c      	beq.n	800060c <__lesf2+0x48>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d01d      	beq.n	8000632 <__lesf2+0x6e>
 80005f6:	1e58      	subs	r0, r3, #1
 80005f8:	2302      	movs	r3, #2
 80005fa:	4018      	ands	r0, r3
 80005fc:	3801      	subs	r0, #1
 80005fe:	e010      	b.n	8000622 <__lesf2+0x5e>
 8000600:	2d00      	cmp	r5, #0
 8000602:	d10d      	bne.n	8000620 <__lesf2+0x5c>
 8000604:	2a00      	cmp	r2, #0
 8000606:	d120      	bne.n	800064a <__lesf2+0x86>
 8000608:	2c00      	cmp	r4, #0
 800060a:	d11e      	bne.n	800064a <__lesf2+0x86>
 800060c:	2900      	cmp	r1, #0
 800060e:	d023      	beq.n	8000658 <__lesf2+0x94>
 8000610:	0008      	movs	r0, r1
 8000612:	e006      	b.n	8000622 <__lesf2+0x5e>
 8000614:	2c00      	cmp	r4, #0
 8000616:	d103      	bne.n	8000620 <__lesf2+0x5c>
 8000618:	28ff      	cmp	r0, #255	@ 0xff
 800061a:	d1ec      	bne.n	80005f6 <__lesf2+0x32>
 800061c:	2d00      	cmp	r5, #0
 800061e:	d017      	beq.n	8000650 <__lesf2+0x8c>
 8000620:	2002      	movs	r0, #2
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	2800      	cmp	r0, #0
 8000626:	d0e6      	beq.n	80005f6 <__lesf2+0x32>
 8000628:	428b      	cmp	r3, r1
 800062a:	d1e4      	bne.n	80005f6 <__lesf2+0x32>
 800062c:	4282      	cmp	r2, r0
 800062e:	dce2      	bgt.n	80005f6 <__lesf2+0x32>
 8000630:	db04      	blt.n	800063c <__lesf2+0x78>
 8000632:	42ac      	cmp	r4, r5
 8000634:	d8df      	bhi.n	80005f6 <__lesf2+0x32>
 8000636:	2000      	movs	r0, #0
 8000638:	42ac      	cmp	r4, r5
 800063a:	d2f2      	bcs.n	8000622 <__lesf2+0x5e>
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00b      	beq.n	8000658 <__lesf2+0x94>
 8000640:	0018      	movs	r0, r3
 8000642:	e7ee      	b.n	8000622 <__lesf2+0x5e>
 8000644:	2c00      	cmp	r4, #0
 8000646:	d0ec      	beq.n	8000622 <__lesf2+0x5e>
 8000648:	e7d5      	b.n	80005f6 <__lesf2+0x32>
 800064a:	428b      	cmp	r3, r1
 800064c:	d1d3      	bne.n	80005f6 <__lesf2+0x32>
 800064e:	e7f5      	b.n	800063c <__lesf2+0x78>
 8000650:	2000      	movs	r0, #0
 8000652:	428b      	cmp	r3, r1
 8000654:	d0e5      	beq.n	8000622 <__lesf2+0x5e>
 8000656:	e7ce      	b.n	80005f6 <__lesf2+0x32>
 8000658:	2001      	movs	r0, #1
 800065a:	4240      	negs	r0, r0
 800065c:	e7e1      	b.n	8000622 <__lesf2+0x5e>
 800065e:	46c0      	nop			@ (mov r8, r8)

08000660 <__aeabi_ui2f>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	1e04      	subs	r4, r0, #0
 8000664:	d00e      	beq.n	8000684 <__aeabi_ui2f+0x24>
 8000666:	f000 fbd1 	bl	8000e0c <__clzsi2>
 800066a:	239e      	movs	r3, #158	@ 0x9e
 800066c:	0001      	movs	r1, r0
 800066e:	1a1b      	subs	r3, r3, r0
 8000670:	2b96      	cmp	r3, #150	@ 0x96
 8000672:	dc0c      	bgt.n	800068e <__aeabi_ui2f+0x2e>
 8000674:	2808      	cmp	r0, #8
 8000676:	d02f      	beq.n	80006d8 <__aeabi_ui2f+0x78>
 8000678:	3908      	subs	r1, #8
 800067a:	408c      	lsls	r4, r1
 800067c:	0264      	lsls	r4, r4, #9
 800067e:	0a64      	lsrs	r4, r4, #9
 8000680:	b2d8      	uxtb	r0, r3
 8000682:	e001      	b.n	8000688 <__aeabi_ui2f+0x28>
 8000684:	2000      	movs	r0, #0
 8000686:	2400      	movs	r4, #0
 8000688:	05c0      	lsls	r0, r0, #23
 800068a:	4320      	orrs	r0, r4
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	2b99      	cmp	r3, #153	@ 0x99
 8000690:	dc16      	bgt.n	80006c0 <__aeabi_ui2f+0x60>
 8000692:	1f42      	subs	r2, r0, #5
 8000694:	2805      	cmp	r0, #5
 8000696:	d000      	beq.n	800069a <__aeabi_ui2f+0x3a>
 8000698:	4094      	lsls	r4, r2
 800069a:	0022      	movs	r2, r4
 800069c:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <__aeabi_ui2f+0x80>)
 800069e:	4002      	ands	r2, r0
 80006a0:	0765      	lsls	r5, r4, #29
 80006a2:	d009      	beq.n	80006b8 <__aeabi_ui2f+0x58>
 80006a4:	250f      	movs	r5, #15
 80006a6:	402c      	ands	r4, r5
 80006a8:	2c04      	cmp	r4, #4
 80006aa:	d005      	beq.n	80006b8 <__aeabi_ui2f+0x58>
 80006ac:	3204      	adds	r2, #4
 80006ae:	0154      	lsls	r4, r2, #5
 80006b0:	d502      	bpl.n	80006b8 <__aeabi_ui2f+0x58>
 80006b2:	239f      	movs	r3, #159	@ 0x9f
 80006b4:	4002      	ands	r2, r0
 80006b6:	1a5b      	subs	r3, r3, r1
 80006b8:	0192      	lsls	r2, r2, #6
 80006ba:	0a54      	lsrs	r4, r2, #9
 80006bc:	b2d8      	uxtb	r0, r3
 80006be:	e7e3      	b.n	8000688 <__aeabi_ui2f+0x28>
 80006c0:	0002      	movs	r2, r0
 80006c2:	0020      	movs	r0, r4
 80006c4:	321b      	adds	r2, #27
 80006c6:	4090      	lsls	r0, r2
 80006c8:	0002      	movs	r2, r0
 80006ca:	1e50      	subs	r0, r2, #1
 80006cc:	4182      	sbcs	r2, r0
 80006ce:	2005      	movs	r0, #5
 80006d0:	1a40      	subs	r0, r0, r1
 80006d2:	40c4      	lsrs	r4, r0
 80006d4:	4314      	orrs	r4, r2
 80006d6:	e7e0      	b.n	800069a <__aeabi_ui2f+0x3a>
 80006d8:	0264      	lsls	r4, r4, #9
 80006da:	2096      	movs	r0, #150	@ 0x96
 80006dc:	0a64      	lsrs	r4, r4, #9
 80006de:	e7d3      	b.n	8000688 <__aeabi_ui2f+0x28>
 80006e0:	fbffffff 	.word	0xfbffffff

080006e4 <__aeabi_dmul>:
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	4657      	mov	r7, sl
 80006e8:	46de      	mov	lr, fp
 80006ea:	464e      	mov	r6, r9
 80006ec:	4645      	mov	r5, r8
 80006ee:	b5e0      	push	{r5, r6, r7, lr}
 80006f0:	001f      	movs	r7, r3
 80006f2:	030b      	lsls	r3, r1, #12
 80006f4:	0b1b      	lsrs	r3, r3, #12
 80006f6:	0016      	movs	r6, r2
 80006f8:	469a      	mov	sl, r3
 80006fa:	0fca      	lsrs	r2, r1, #31
 80006fc:	004b      	lsls	r3, r1, #1
 80006fe:	0004      	movs	r4, r0
 8000700:	4693      	mov	fp, r2
 8000702:	b087      	sub	sp, #28
 8000704:	0d5b      	lsrs	r3, r3, #21
 8000706:	d100      	bne.n	800070a <__aeabi_dmul+0x26>
 8000708:	e0d5      	b.n	80008b6 <__aeabi_dmul+0x1d2>
 800070a:	4abb      	ldr	r2, [pc, #748]	@ (80009f8 <__aeabi_dmul+0x314>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d100      	bne.n	8000712 <__aeabi_dmul+0x2e>
 8000710:	e0f8      	b.n	8000904 <__aeabi_dmul+0x220>
 8000712:	4651      	mov	r1, sl
 8000714:	0f42      	lsrs	r2, r0, #29
 8000716:	00c9      	lsls	r1, r1, #3
 8000718:	430a      	orrs	r2, r1
 800071a:	2180      	movs	r1, #128	@ 0x80
 800071c:	0409      	lsls	r1, r1, #16
 800071e:	4311      	orrs	r1, r2
 8000720:	00c2      	lsls	r2, r0, #3
 8000722:	4691      	mov	r9, r2
 8000724:	4ab5      	ldr	r2, [pc, #724]	@ (80009fc <__aeabi_dmul+0x318>)
 8000726:	468a      	mov	sl, r1
 8000728:	189d      	adds	r5, r3, r2
 800072a:	2300      	movs	r3, #0
 800072c:	4698      	mov	r8, r3
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	033c      	lsls	r4, r7, #12
 8000732:	007b      	lsls	r3, r7, #1
 8000734:	0ffa      	lsrs	r2, r7, #31
 8000736:	0030      	movs	r0, r6
 8000738:	0b24      	lsrs	r4, r4, #12
 800073a:	0d5b      	lsrs	r3, r3, #21
 800073c:	9200      	str	r2, [sp, #0]
 800073e:	d100      	bne.n	8000742 <__aeabi_dmul+0x5e>
 8000740:	e096      	b.n	8000870 <__aeabi_dmul+0x18c>
 8000742:	4aad      	ldr	r2, [pc, #692]	@ (80009f8 <__aeabi_dmul+0x314>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d031      	beq.n	80007ac <__aeabi_dmul+0xc8>
 8000748:	0f72      	lsrs	r2, r6, #29
 800074a:	00e4      	lsls	r4, r4, #3
 800074c:	4322      	orrs	r2, r4
 800074e:	2480      	movs	r4, #128	@ 0x80
 8000750:	0424      	lsls	r4, r4, #16
 8000752:	4314      	orrs	r4, r2
 8000754:	4aa9      	ldr	r2, [pc, #676]	@ (80009fc <__aeabi_dmul+0x318>)
 8000756:	00f0      	lsls	r0, r6, #3
 8000758:	4694      	mov	ip, r2
 800075a:	4463      	add	r3, ip
 800075c:	195b      	adds	r3, r3, r5
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	9201      	str	r2, [sp, #4]
 8000762:	4642      	mov	r2, r8
 8000764:	2600      	movs	r6, #0
 8000766:	2a0a      	cmp	r2, #10
 8000768:	dc42      	bgt.n	80007f0 <__aeabi_dmul+0x10c>
 800076a:	465a      	mov	r2, fp
 800076c:	9900      	ldr	r1, [sp, #0]
 800076e:	404a      	eors	r2, r1
 8000770:	4693      	mov	fp, r2
 8000772:	4642      	mov	r2, r8
 8000774:	2a02      	cmp	r2, #2
 8000776:	dc32      	bgt.n	80007de <__aeabi_dmul+0xfa>
 8000778:	3a01      	subs	r2, #1
 800077a:	2a01      	cmp	r2, #1
 800077c:	d900      	bls.n	8000780 <__aeabi_dmul+0x9c>
 800077e:	e149      	b.n	8000a14 <__aeabi_dmul+0x330>
 8000780:	2e02      	cmp	r6, #2
 8000782:	d100      	bne.n	8000786 <__aeabi_dmul+0xa2>
 8000784:	e0ca      	b.n	800091c <__aeabi_dmul+0x238>
 8000786:	2e01      	cmp	r6, #1
 8000788:	d13d      	bne.n	8000806 <__aeabi_dmul+0x122>
 800078a:	2300      	movs	r3, #0
 800078c:	2400      	movs	r4, #0
 800078e:	2200      	movs	r2, #0
 8000790:	0010      	movs	r0, r2
 8000792:	465a      	mov	r2, fp
 8000794:	051b      	lsls	r3, r3, #20
 8000796:	4323      	orrs	r3, r4
 8000798:	07d2      	lsls	r2, r2, #31
 800079a:	4313      	orrs	r3, r2
 800079c:	0019      	movs	r1, r3
 800079e:	b007      	add	sp, #28
 80007a0:	bcf0      	pop	{r4, r5, r6, r7}
 80007a2:	46bb      	mov	fp, r7
 80007a4:	46b2      	mov	sl, r6
 80007a6:	46a9      	mov	r9, r5
 80007a8:	46a0      	mov	r8, r4
 80007aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ac:	4b92      	ldr	r3, [pc, #584]	@ (80009f8 <__aeabi_dmul+0x314>)
 80007ae:	4326      	orrs	r6, r4
 80007b0:	18eb      	adds	r3, r5, r3
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_dmul+0xd4>
 80007b6:	e0bb      	b.n	8000930 <__aeabi_dmul+0x24c>
 80007b8:	2203      	movs	r2, #3
 80007ba:	4641      	mov	r1, r8
 80007bc:	4311      	orrs	r1, r2
 80007be:	465a      	mov	r2, fp
 80007c0:	4688      	mov	r8, r1
 80007c2:	9900      	ldr	r1, [sp, #0]
 80007c4:	404a      	eors	r2, r1
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	0109      	lsls	r1, r1, #4
 80007ca:	468c      	mov	ip, r1
 80007cc:	0029      	movs	r1, r5
 80007ce:	4461      	add	r1, ip
 80007d0:	9101      	str	r1, [sp, #4]
 80007d2:	4641      	mov	r1, r8
 80007d4:	290a      	cmp	r1, #10
 80007d6:	dd00      	ble.n	80007da <__aeabi_dmul+0xf6>
 80007d8:	e233      	b.n	8000c42 <__aeabi_dmul+0x55e>
 80007da:	4693      	mov	fp, r2
 80007dc:	2603      	movs	r6, #3
 80007de:	4642      	mov	r2, r8
 80007e0:	2701      	movs	r7, #1
 80007e2:	4097      	lsls	r7, r2
 80007e4:	21a6      	movs	r1, #166	@ 0xa6
 80007e6:	003a      	movs	r2, r7
 80007e8:	00c9      	lsls	r1, r1, #3
 80007ea:	400a      	ands	r2, r1
 80007ec:	420f      	tst	r7, r1
 80007ee:	d031      	beq.n	8000854 <__aeabi_dmul+0x170>
 80007f0:	9e02      	ldr	r6, [sp, #8]
 80007f2:	2e02      	cmp	r6, #2
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dmul+0x114>
 80007f6:	e235      	b.n	8000c64 <__aeabi_dmul+0x580>
 80007f8:	2e03      	cmp	r6, #3
 80007fa:	d100      	bne.n	80007fe <__aeabi_dmul+0x11a>
 80007fc:	e1d2      	b.n	8000ba4 <__aeabi_dmul+0x4c0>
 80007fe:	4654      	mov	r4, sl
 8000800:	4648      	mov	r0, r9
 8000802:	2e01      	cmp	r6, #1
 8000804:	d0c1      	beq.n	800078a <__aeabi_dmul+0xa6>
 8000806:	9a01      	ldr	r2, [sp, #4]
 8000808:	4b7d      	ldr	r3, [pc, #500]	@ (8000a00 <__aeabi_dmul+0x31c>)
 800080a:	4694      	mov	ip, r2
 800080c:	4463      	add	r3, ip
 800080e:	2b00      	cmp	r3, #0
 8000810:	dc00      	bgt.n	8000814 <__aeabi_dmul+0x130>
 8000812:	e0c0      	b.n	8000996 <__aeabi_dmul+0x2b2>
 8000814:	0742      	lsls	r2, r0, #29
 8000816:	d009      	beq.n	800082c <__aeabi_dmul+0x148>
 8000818:	220f      	movs	r2, #15
 800081a:	4002      	ands	r2, r0
 800081c:	2a04      	cmp	r2, #4
 800081e:	d005      	beq.n	800082c <__aeabi_dmul+0x148>
 8000820:	1d02      	adds	r2, r0, #4
 8000822:	4282      	cmp	r2, r0
 8000824:	4180      	sbcs	r0, r0
 8000826:	4240      	negs	r0, r0
 8000828:	1824      	adds	r4, r4, r0
 800082a:	0010      	movs	r0, r2
 800082c:	01e2      	lsls	r2, r4, #7
 800082e:	d506      	bpl.n	800083e <__aeabi_dmul+0x15a>
 8000830:	4b74      	ldr	r3, [pc, #464]	@ (8000a04 <__aeabi_dmul+0x320>)
 8000832:	9a01      	ldr	r2, [sp, #4]
 8000834:	401c      	ands	r4, r3
 8000836:	2380      	movs	r3, #128	@ 0x80
 8000838:	4694      	mov	ip, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4463      	add	r3, ip
 800083e:	4a72      	ldr	r2, [pc, #456]	@ (8000a08 <__aeabi_dmul+0x324>)
 8000840:	4293      	cmp	r3, r2
 8000842:	dc6b      	bgt.n	800091c <__aeabi_dmul+0x238>
 8000844:	0762      	lsls	r2, r4, #29
 8000846:	08c0      	lsrs	r0, r0, #3
 8000848:	0264      	lsls	r4, r4, #9
 800084a:	055b      	lsls	r3, r3, #21
 800084c:	4302      	orrs	r2, r0
 800084e:	0b24      	lsrs	r4, r4, #12
 8000850:	0d5b      	lsrs	r3, r3, #21
 8000852:	e79d      	b.n	8000790 <__aeabi_dmul+0xac>
 8000854:	2190      	movs	r1, #144	@ 0x90
 8000856:	0089      	lsls	r1, r1, #2
 8000858:	420f      	tst	r7, r1
 800085a:	d163      	bne.n	8000924 <__aeabi_dmul+0x240>
 800085c:	2288      	movs	r2, #136	@ 0x88
 800085e:	423a      	tst	r2, r7
 8000860:	d100      	bne.n	8000864 <__aeabi_dmul+0x180>
 8000862:	e0d7      	b.n	8000a14 <__aeabi_dmul+0x330>
 8000864:	9b00      	ldr	r3, [sp, #0]
 8000866:	46a2      	mov	sl, r4
 8000868:	469b      	mov	fp, r3
 800086a:	4681      	mov	r9, r0
 800086c:	9602      	str	r6, [sp, #8]
 800086e:	e7bf      	b.n	80007f0 <__aeabi_dmul+0x10c>
 8000870:	0023      	movs	r3, r4
 8000872:	4333      	orrs	r3, r6
 8000874:	d100      	bne.n	8000878 <__aeabi_dmul+0x194>
 8000876:	e07f      	b.n	8000978 <__aeabi_dmul+0x294>
 8000878:	2c00      	cmp	r4, #0
 800087a:	d100      	bne.n	800087e <__aeabi_dmul+0x19a>
 800087c:	e1ad      	b.n	8000bda <__aeabi_dmul+0x4f6>
 800087e:	0020      	movs	r0, r4
 8000880:	f000 fac4 	bl	8000e0c <__clzsi2>
 8000884:	0002      	movs	r2, r0
 8000886:	0003      	movs	r3, r0
 8000888:	3a0b      	subs	r2, #11
 800088a:	201d      	movs	r0, #29
 800088c:	0019      	movs	r1, r3
 800088e:	1a82      	subs	r2, r0, r2
 8000890:	0030      	movs	r0, r6
 8000892:	3908      	subs	r1, #8
 8000894:	40d0      	lsrs	r0, r2
 8000896:	408c      	lsls	r4, r1
 8000898:	4304      	orrs	r4, r0
 800089a:	0030      	movs	r0, r6
 800089c:	4088      	lsls	r0, r1
 800089e:	4a5b      	ldr	r2, [pc, #364]	@ (8000a0c <__aeabi_dmul+0x328>)
 80008a0:	1aeb      	subs	r3, r5, r3
 80008a2:	4694      	mov	ip, r2
 80008a4:	4463      	add	r3, ip
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	9201      	str	r2, [sp, #4]
 80008aa:	4642      	mov	r2, r8
 80008ac:	2600      	movs	r6, #0
 80008ae:	2a0a      	cmp	r2, #10
 80008b0:	dc00      	bgt.n	80008b4 <__aeabi_dmul+0x1d0>
 80008b2:	e75a      	b.n	800076a <__aeabi_dmul+0x86>
 80008b4:	e79c      	b.n	80007f0 <__aeabi_dmul+0x10c>
 80008b6:	4653      	mov	r3, sl
 80008b8:	4303      	orrs	r3, r0
 80008ba:	4699      	mov	r9, r3
 80008bc:	d054      	beq.n	8000968 <__aeabi_dmul+0x284>
 80008be:	4653      	mov	r3, sl
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dmul+0x1e2>
 80008c4:	e177      	b.n	8000bb6 <__aeabi_dmul+0x4d2>
 80008c6:	4650      	mov	r0, sl
 80008c8:	f000 faa0 	bl	8000e0c <__clzsi2>
 80008cc:	230b      	movs	r3, #11
 80008ce:	425b      	negs	r3, r3
 80008d0:	469c      	mov	ip, r3
 80008d2:	0002      	movs	r2, r0
 80008d4:	4484      	add	ip, r0
 80008d6:	0011      	movs	r1, r2
 80008d8:	4650      	mov	r0, sl
 80008da:	3908      	subs	r1, #8
 80008dc:	4088      	lsls	r0, r1
 80008de:	231d      	movs	r3, #29
 80008e0:	4680      	mov	r8, r0
 80008e2:	4660      	mov	r0, ip
 80008e4:	1a1b      	subs	r3, r3, r0
 80008e6:	0020      	movs	r0, r4
 80008e8:	40d8      	lsrs	r0, r3
 80008ea:	0003      	movs	r3, r0
 80008ec:	4640      	mov	r0, r8
 80008ee:	4303      	orrs	r3, r0
 80008f0:	469a      	mov	sl, r3
 80008f2:	0023      	movs	r3, r4
 80008f4:	408b      	lsls	r3, r1
 80008f6:	4699      	mov	r9, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	4d44      	ldr	r5, [pc, #272]	@ (8000a0c <__aeabi_dmul+0x328>)
 80008fc:	4698      	mov	r8, r3
 80008fe:	1aad      	subs	r5, r5, r2
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	e715      	b.n	8000730 <__aeabi_dmul+0x4c>
 8000904:	4652      	mov	r2, sl
 8000906:	4302      	orrs	r2, r0
 8000908:	4691      	mov	r9, r2
 800090a:	d126      	bne.n	800095a <__aeabi_dmul+0x276>
 800090c:	2200      	movs	r2, #0
 800090e:	001d      	movs	r5, r3
 8000910:	2302      	movs	r3, #2
 8000912:	4692      	mov	sl, r2
 8000914:	3208      	adds	r2, #8
 8000916:	4690      	mov	r8, r2
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	e709      	b.n	8000730 <__aeabi_dmul+0x4c>
 800091c:	2400      	movs	r4, #0
 800091e:	2200      	movs	r2, #0
 8000920:	4b35      	ldr	r3, [pc, #212]	@ (80009f8 <__aeabi_dmul+0x314>)
 8000922:	e735      	b.n	8000790 <__aeabi_dmul+0xac>
 8000924:	2300      	movs	r3, #0
 8000926:	2480      	movs	r4, #128	@ 0x80
 8000928:	469b      	mov	fp, r3
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	4b32      	ldr	r3, [pc, #200]	@ (80009f8 <__aeabi_dmul+0x314>)
 800092e:	e72f      	b.n	8000790 <__aeabi_dmul+0xac>
 8000930:	2202      	movs	r2, #2
 8000932:	4641      	mov	r1, r8
 8000934:	4311      	orrs	r1, r2
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	4694      	mov	ip, r2
 800093c:	002a      	movs	r2, r5
 800093e:	4462      	add	r2, ip
 8000940:	4688      	mov	r8, r1
 8000942:	9201      	str	r2, [sp, #4]
 8000944:	290a      	cmp	r1, #10
 8000946:	dd00      	ble.n	800094a <__aeabi_dmul+0x266>
 8000948:	e752      	b.n	80007f0 <__aeabi_dmul+0x10c>
 800094a:	465a      	mov	r2, fp
 800094c:	2000      	movs	r0, #0
 800094e:	9900      	ldr	r1, [sp, #0]
 8000950:	0004      	movs	r4, r0
 8000952:	404a      	eors	r2, r1
 8000954:	4693      	mov	fp, r2
 8000956:	2602      	movs	r6, #2
 8000958:	e70b      	b.n	8000772 <__aeabi_dmul+0x8e>
 800095a:	220c      	movs	r2, #12
 800095c:	001d      	movs	r5, r3
 800095e:	2303      	movs	r3, #3
 8000960:	4681      	mov	r9, r0
 8000962:	4690      	mov	r8, r2
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	e6e3      	b.n	8000730 <__aeabi_dmul+0x4c>
 8000968:	2300      	movs	r3, #0
 800096a:	469a      	mov	sl, r3
 800096c:	3304      	adds	r3, #4
 800096e:	4698      	mov	r8, r3
 8000970:	3b03      	subs	r3, #3
 8000972:	2500      	movs	r5, #0
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	e6db      	b.n	8000730 <__aeabi_dmul+0x4c>
 8000978:	4642      	mov	r2, r8
 800097a:	3301      	adds	r3, #1
 800097c:	431a      	orrs	r2, r3
 800097e:	002b      	movs	r3, r5
 8000980:	4690      	mov	r8, r2
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	9201      	str	r2, [sp, #4]
 8000986:	4642      	mov	r2, r8
 8000988:	2400      	movs	r4, #0
 800098a:	2000      	movs	r0, #0
 800098c:	2601      	movs	r6, #1
 800098e:	2a0a      	cmp	r2, #10
 8000990:	dc00      	bgt.n	8000994 <__aeabi_dmul+0x2b0>
 8000992:	e6ea      	b.n	800076a <__aeabi_dmul+0x86>
 8000994:	e72c      	b.n	80007f0 <__aeabi_dmul+0x10c>
 8000996:	2201      	movs	r2, #1
 8000998:	1ad2      	subs	r2, r2, r3
 800099a:	2a38      	cmp	r2, #56	@ 0x38
 800099c:	dd00      	ble.n	80009a0 <__aeabi_dmul+0x2bc>
 800099e:	e6f4      	b.n	800078a <__aeabi_dmul+0xa6>
 80009a0:	2a1f      	cmp	r2, #31
 80009a2:	dc00      	bgt.n	80009a6 <__aeabi_dmul+0x2c2>
 80009a4:	e12a      	b.n	8000bfc <__aeabi_dmul+0x518>
 80009a6:	211f      	movs	r1, #31
 80009a8:	4249      	negs	r1, r1
 80009aa:	1acb      	subs	r3, r1, r3
 80009ac:	0021      	movs	r1, r4
 80009ae:	40d9      	lsrs	r1, r3
 80009b0:	000b      	movs	r3, r1
 80009b2:	2a20      	cmp	r2, #32
 80009b4:	d005      	beq.n	80009c2 <__aeabi_dmul+0x2de>
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <__aeabi_dmul+0x32c>)
 80009b8:	9d01      	ldr	r5, [sp, #4]
 80009ba:	4694      	mov	ip, r2
 80009bc:	4465      	add	r5, ip
 80009be:	40ac      	lsls	r4, r5
 80009c0:	4320      	orrs	r0, r4
 80009c2:	1e42      	subs	r2, r0, #1
 80009c4:	4190      	sbcs	r0, r2
 80009c6:	4318      	orrs	r0, r3
 80009c8:	2307      	movs	r3, #7
 80009ca:	0019      	movs	r1, r3
 80009cc:	2400      	movs	r4, #0
 80009ce:	4001      	ands	r1, r0
 80009d0:	4203      	tst	r3, r0
 80009d2:	d00c      	beq.n	80009ee <__aeabi_dmul+0x30a>
 80009d4:	230f      	movs	r3, #15
 80009d6:	4003      	ands	r3, r0
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d100      	bne.n	80009de <__aeabi_dmul+0x2fa>
 80009dc:	e140      	b.n	8000c60 <__aeabi_dmul+0x57c>
 80009de:	1d03      	adds	r3, r0, #4
 80009e0:	4283      	cmp	r3, r0
 80009e2:	41a4      	sbcs	r4, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	4264      	negs	r4, r4
 80009e8:	0761      	lsls	r1, r4, #29
 80009ea:	0264      	lsls	r4, r4, #9
 80009ec:	0b24      	lsrs	r4, r4, #12
 80009ee:	08c2      	lsrs	r2, r0, #3
 80009f0:	2300      	movs	r3, #0
 80009f2:	430a      	orrs	r2, r1
 80009f4:	e6cc      	b.n	8000790 <__aeabi_dmul+0xac>
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	000007ff 	.word	0x000007ff
 80009fc:	fffffc01 	.word	0xfffffc01
 8000a00:	000003ff 	.word	0x000003ff
 8000a04:	feffffff 	.word	0xfeffffff
 8000a08:	000007fe 	.word	0x000007fe
 8000a0c:	fffffc0d 	.word	0xfffffc0d
 8000a10:	0000043e 	.word	0x0000043e
 8000a14:	4649      	mov	r1, r9
 8000a16:	464a      	mov	r2, r9
 8000a18:	0409      	lsls	r1, r1, #16
 8000a1a:	0c09      	lsrs	r1, r1, #16
 8000a1c:	000d      	movs	r5, r1
 8000a1e:	0c16      	lsrs	r6, r2, #16
 8000a20:	0c02      	lsrs	r2, r0, #16
 8000a22:	0400      	lsls	r0, r0, #16
 8000a24:	0c00      	lsrs	r0, r0, #16
 8000a26:	4345      	muls	r5, r0
 8000a28:	46ac      	mov	ip, r5
 8000a2a:	0005      	movs	r5, r0
 8000a2c:	4375      	muls	r5, r6
 8000a2e:	46a8      	mov	r8, r5
 8000a30:	0015      	movs	r5, r2
 8000a32:	000f      	movs	r7, r1
 8000a34:	4375      	muls	r5, r6
 8000a36:	9200      	str	r2, [sp, #0]
 8000a38:	9502      	str	r5, [sp, #8]
 8000a3a:	002a      	movs	r2, r5
 8000a3c:	9d00      	ldr	r5, [sp, #0]
 8000a3e:	436f      	muls	r7, r5
 8000a40:	4665      	mov	r5, ip
 8000a42:	0c2d      	lsrs	r5, r5, #16
 8000a44:	46a9      	mov	r9, r5
 8000a46:	4447      	add	r7, r8
 8000a48:	444f      	add	r7, r9
 8000a4a:	45b8      	cmp	r8, r7
 8000a4c:	d905      	bls.n	8000a5a <__aeabi_dmul+0x376>
 8000a4e:	0015      	movs	r5, r2
 8000a50:	2280      	movs	r2, #128	@ 0x80
 8000a52:	0252      	lsls	r2, r2, #9
 8000a54:	4690      	mov	r8, r2
 8000a56:	4445      	add	r5, r8
 8000a58:	9502      	str	r5, [sp, #8]
 8000a5a:	0c3d      	lsrs	r5, r7, #16
 8000a5c:	9503      	str	r5, [sp, #12]
 8000a5e:	4665      	mov	r5, ip
 8000a60:	042d      	lsls	r5, r5, #16
 8000a62:	043f      	lsls	r7, r7, #16
 8000a64:	0c2d      	lsrs	r5, r5, #16
 8000a66:	46ac      	mov	ip, r5
 8000a68:	003d      	movs	r5, r7
 8000a6a:	4465      	add	r5, ip
 8000a6c:	9504      	str	r5, [sp, #16]
 8000a6e:	0c25      	lsrs	r5, r4, #16
 8000a70:	0424      	lsls	r4, r4, #16
 8000a72:	0c24      	lsrs	r4, r4, #16
 8000a74:	46ac      	mov	ip, r5
 8000a76:	0025      	movs	r5, r4
 8000a78:	4375      	muls	r5, r6
 8000a7a:	46a8      	mov	r8, r5
 8000a7c:	4665      	mov	r5, ip
 8000a7e:	000f      	movs	r7, r1
 8000a80:	4369      	muls	r1, r5
 8000a82:	4441      	add	r1, r8
 8000a84:	4689      	mov	r9, r1
 8000a86:	4367      	muls	r7, r4
 8000a88:	0c39      	lsrs	r1, r7, #16
 8000a8a:	4449      	add	r1, r9
 8000a8c:	436e      	muls	r6, r5
 8000a8e:	4588      	cmp	r8, r1
 8000a90:	d903      	bls.n	8000a9a <__aeabi_dmul+0x3b6>
 8000a92:	2280      	movs	r2, #128	@ 0x80
 8000a94:	0252      	lsls	r2, r2, #9
 8000a96:	4690      	mov	r8, r2
 8000a98:	4446      	add	r6, r8
 8000a9a:	0c0d      	lsrs	r5, r1, #16
 8000a9c:	46a8      	mov	r8, r5
 8000a9e:	0035      	movs	r5, r6
 8000aa0:	4445      	add	r5, r8
 8000aa2:	9505      	str	r5, [sp, #20]
 8000aa4:	9d03      	ldr	r5, [sp, #12]
 8000aa6:	043f      	lsls	r7, r7, #16
 8000aa8:	46a8      	mov	r8, r5
 8000aaa:	0c3f      	lsrs	r7, r7, #16
 8000aac:	0409      	lsls	r1, r1, #16
 8000aae:	19c9      	adds	r1, r1, r7
 8000ab0:	4488      	add	r8, r1
 8000ab2:	4645      	mov	r5, r8
 8000ab4:	9503      	str	r5, [sp, #12]
 8000ab6:	4655      	mov	r5, sl
 8000ab8:	042e      	lsls	r6, r5, #16
 8000aba:	0c36      	lsrs	r6, r6, #16
 8000abc:	0c2f      	lsrs	r7, r5, #16
 8000abe:	0035      	movs	r5, r6
 8000ac0:	4345      	muls	r5, r0
 8000ac2:	4378      	muls	r0, r7
 8000ac4:	4681      	mov	r9, r0
 8000ac6:	0038      	movs	r0, r7
 8000ac8:	46a8      	mov	r8, r5
 8000aca:	0c2d      	lsrs	r5, r5, #16
 8000acc:	46aa      	mov	sl, r5
 8000ace:	9a00      	ldr	r2, [sp, #0]
 8000ad0:	4350      	muls	r0, r2
 8000ad2:	4372      	muls	r2, r6
 8000ad4:	444a      	add	r2, r9
 8000ad6:	4452      	add	r2, sl
 8000ad8:	4591      	cmp	r9, r2
 8000ada:	d903      	bls.n	8000ae4 <__aeabi_dmul+0x400>
 8000adc:	2580      	movs	r5, #128	@ 0x80
 8000ade:	026d      	lsls	r5, r5, #9
 8000ae0:	46a9      	mov	r9, r5
 8000ae2:	4448      	add	r0, r9
 8000ae4:	0c15      	lsrs	r5, r2, #16
 8000ae6:	46a9      	mov	r9, r5
 8000ae8:	4645      	mov	r5, r8
 8000aea:	042d      	lsls	r5, r5, #16
 8000aec:	0c2d      	lsrs	r5, r5, #16
 8000aee:	46a8      	mov	r8, r5
 8000af0:	4665      	mov	r5, ip
 8000af2:	437d      	muls	r5, r7
 8000af4:	0412      	lsls	r2, r2, #16
 8000af6:	4448      	add	r0, r9
 8000af8:	4490      	add	r8, r2
 8000afa:	46a9      	mov	r9, r5
 8000afc:	0032      	movs	r2, r6
 8000afe:	4665      	mov	r5, ip
 8000b00:	4362      	muls	r2, r4
 8000b02:	436e      	muls	r6, r5
 8000b04:	437c      	muls	r4, r7
 8000b06:	0c17      	lsrs	r7, r2, #16
 8000b08:	1936      	adds	r6, r6, r4
 8000b0a:	19bf      	adds	r7, r7, r6
 8000b0c:	42bc      	cmp	r4, r7
 8000b0e:	d903      	bls.n	8000b18 <__aeabi_dmul+0x434>
 8000b10:	2480      	movs	r4, #128	@ 0x80
 8000b12:	0264      	lsls	r4, r4, #9
 8000b14:	46a4      	mov	ip, r4
 8000b16:	44e1      	add	r9, ip
 8000b18:	9c02      	ldr	r4, [sp, #8]
 8000b1a:	9e03      	ldr	r6, [sp, #12]
 8000b1c:	46a4      	mov	ip, r4
 8000b1e:	9d05      	ldr	r5, [sp, #20]
 8000b20:	4466      	add	r6, ip
 8000b22:	428e      	cmp	r6, r1
 8000b24:	4189      	sbcs	r1, r1
 8000b26:	46ac      	mov	ip, r5
 8000b28:	0412      	lsls	r2, r2, #16
 8000b2a:	043c      	lsls	r4, r7, #16
 8000b2c:	0c12      	lsrs	r2, r2, #16
 8000b2e:	18a2      	adds	r2, r4, r2
 8000b30:	4462      	add	r2, ip
 8000b32:	4249      	negs	r1, r1
 8000b34:	1854      	adds	r4, r2, r1
 8000b36:	4446      	add	r6, r8
 8000b38:	46a4      	mov	ip, r4
 8000b3a:	4546      	cmp	r6, r8
 8000b3c:	41a4      	sbcs	r4, r4
 8000b3e:	4682      	mov	sl, r0
 8000b40:	4264      	negs	r4, r4
 8000b42:	46a0      	mov	r8, r4
 8000b44:	42aa      	cmp	r2, r5
 8000b46:	4192      	sbcs	r2, r2
 8000b48:	458c      	cmp	ip, r1
 8000b4a:	4189      	sbcs	r1, r1
 8000b4c:	44e2      	add	sl, ip
 8000b4e:	44d0      	add	r8, sl
 8000b50:	4249      	negs	r1, r1
 8000b52:	4252      	negs	r2, r2
 8000b54:	430a      	orrs	r2, r1
 8000b56:	45a0      	cmp	r8, r4
 8000b58:	41a4      	sbcs	r4, r4
 8000b5a:	4582      	cmp	sl, r0
 8000b5c:	4189      	sbcs	r1, r1
 8000b5e:	4264      	negs	r4, r4
 8000b60:	4249      	negs	r1, r1
 8000b62:	430c      	orrs	r4, r1
 8000b64:	4641      	mov	r1, r8
 8000b66:	0c3f      	lsrs	r7, r7, #16
 8000b68:	19d2      	adds	r2, r2, r7
 8000b6a:	1912      	adds	r2, r2, r4
 8000b6c:	0dcc      	lsrs	r4, r1, #23
 8000b6e:	9904      	ldr	r1, [sp, #16]
 8000b70:	0270      	lsls	r0, r6, #9
 8000b72:	4308      	orrs	r0, r1
 8000b74:	1e41      	subs	r1, r0, #1
 8000b76:	4188      	sbcs	r0, r1
 8000b78:	4641      	mov	r1, r8
 8000b7a:	444a      	add	r2, r9
 8000b7c:	0df6      	lsrs	r6, r6, #23
 8000b7e:	0252      	lsls	r2, r2, #9
 8000b80:	4330      	orrs	r0, r6
 8000b82:	0249      	lsls	r1, r1, #9
 8000b84:	4314      	orrs	r4, r2
 8000b86:	4308      	orrs	r0, r1
 8000b88:	01d2      	lsls	r2, r2, #7
 8000b8a:	d535      	bpl.n	8000bf8 <__aeabi_dmul+0x514>
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	0843      	lsrs	r3, r0, #1
 8000b90:	4002      	ands	r2, r0
 8000b92:	4313      	orrs	r3, r2
 8000b94:	07e0      	lsls	r0, r4, #31
 8000b96:	4318      	orrs	r0, r3
 8000b98:	0864      	lsrs	r4, r4, #1
 8000b9a:	e634      	b.n	8000806 <__aeabi_dmul+0x122>
 8000b9c:	9b00      	ldr	r3, [sp, #0]
 8000b9e:	46a2      	mov	sl, r4
 8000ba0:	469b      	mov	fp, r3
 8000ba2:	4681      	mov	r9, r0
 8000ba4:	2480      	movs	r4, #128	@ 0x80
 8000ba6:	4653      	mov	r3, sl
 8000ba8:	0324      	lsls	r4, r4, #12
 8000baa:	431c      	orrs	r4, r3
 8000bac:	0324      	lsls	r4, r4, #12
 8000bae:	464a      	mov	r2, r9
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c6c <__aeabi_dmul+0x588>)
 8000bb2:	0b24      	lsrs	r4, r4, #12
 8000bb4:	e5ec      	b.n	8000790 <__aeabi_dmul+0xac>
 8000bb6:	f000 f929 	bl	8000e0c <__clzsi2>
 8000bba:	2315      	movs	r3, #21
 8000bbc:	469c      	mov	ip, r3
 8000bbe:	4484      	add	ip, r0
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	3220      	adds	r2, #32
 8000bc6:	2b1c      	cmp	r3, #28
 8000bc8:	dc00      	bgt.n	8000bcc <__aeabi_dmul+0x4e8>
 8000bca:	e684      	b.n	80008d6 <__aeabi_dmul+0x1f2>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4699      	mov	r9, r3
 8000bd0:	0023      	movs	r3, r4
 8000bd2:	3808      	subs	r0, #8
 8000bd4:	4083      	lsls	r3, r0
 8000bd6:	469a      	mov	sl, r3
 8000bd8:	e68e      	b.n	80008f8 <__aeabi_dmul+0x214>
 8000bda:	f000 f917 	bl	8000e0c <__clzsi2>
 8000bde:	0002      	movs	r2, r0
 8000be0:	0003      	movs	r3, r0
 8000be2:	3215      	adds	r2, #21
 8000be4:	3320      	adds	r3, #32
 8000be6:	2a1c      	cmp	r2, #28
 8000be8:	dc00      	bgt.n	8000bec <__aeabi_dmul+0x508>
 8000bea:	e64e      	b.n	800088a <__aeabi_dmul+0x1a6>
 8000bec:	0002      	movs	r2, r0
 8000bee:	0034      	movs	r4, r6
 8000bf0:	3a08      	subs	r2, #8
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	e652      	b.n	800089e <__aeabi_dmul+0x1ba>
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	e604      	b.n	8000806 <__aeabi_dmul+0x122>
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <__aeabi_dmul+0x58c>)
 8000bfe:	0021      	movs	r1, r4
 8000c00:	469c      	mov	ip, r3
 8000c02:	0003      	movs	r3, r0
 8000c04:	9d01      	ldr	r5, [sp, #4]
 8000c06:	40d3      	lsrs	r3, r2
 8000c08:	4465      	add	r5, ip
 8000c0a:	40a9      	lsls	r1, r5
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	0003      	movs	r3, r0
 8000c10:	40ab      	lsls	r3, r5
 8000c12:	1e58      	subs	r0, r3, #1
 8000c14:	4183      	sbcs	r3, r0
 8000c16:	4319      	orrs	r1, r3
 8000c18:	0008      	movs	r0, r1
 8000c1a:	40d4      	lsrs	r4, r2
 8000c1c:	074b      	lsls	r3, r1, #29
 8000c1e:	d009      	beq.n	8000c34 <__aeabi_dmul+0x550>
 8000c20:	230f      	movs	r3, #15
 8000c22:	400b      	ands	r3, r1
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d005      	beq.n	8000c34 <__aeabi_dmul+0x550>
 8000c28:	1d0b      	adds	r3, r1, #4
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	4180      	sbcs	r0, r0
 8000c2e:	4240      	negs	r0, r0
 8000c30:	1824      	adds	r4, r4, r0
 8000c32:	0018      	movs	r0, r3
 8000c34:	0223      	lsls	r3, r4, #8
 8000c36:	d400      	bmi.n	8000c3a <__aeabi_dmul+0x556>
 8000c38:	e6d6      	b.n	80009e8 <__aeabi_dmul+0x304>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	2200      	movs	r2, #0
 8000c40:	e5a6      	b.n	8000790 <__aeabi_dmul+0xac>
 8000c42:	290f      	cmp	r1, #15
 8000c44:	d1aa      	bne.n	8000b9c <__aeabi_dmul+0x4b8>
 8000c46:	2380      	movs	r3, #128	@ 0x80
 8000c48:	4652      	mov	r2, sl
 8000c4a:	031b      	lsls	r3, r3, #12
 8000c4c:	421a      	tst	r2, r3
 8000c4e:	d0a9      	beq.n	8000ba4 <__aeabi_dmul+0x4c0>
 8000c50:	421c      	tst	r4, r3
 8000c52:	d1a7      	bne.n	8000ba4 <__aeabi_dmul+0x4c0>
 8000c54:	431c      	orrs	r4, r3
 8000c56:	9b00      	ldr	r3, [sp, #0]
 8000c58:	0002      	movs	r2, r0
 8000c5a:	469b      	mov	fp, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <__aeabi_dmul+0x588>)
 8000c5e:	e597      	b.n	8000790 <__aeabi_dmul+0xac>
 8000c60:	2400      	movs	r4, #0
 8000c62:	e6c1      	b.n	80009e8 <__aeabi_dmul+0x304>
 8000c64:	2400      	movs	r4, #0
 8000c66:	4b01      	ldr	r3, [pc, #4]	@ (8000c6c <__aeabi_dmul+0x588>)
 8000c68:	0022      	movs	r2, r4
 8000c6a:	e591      	b.n	8000790 <__aeabi_dmul+0xac>
 8000c6c:	000007ff 	.word	0x000007ff
 8000c70:	0000041e 	.word	0x0000041e

08000c74 <__aeabi_f2d>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	0242      	lsls	r2, r0, #9
 8000c78:	0043      	lsls	r3, r0, #1
 8000c7a:	0fc4      	lsrs	r4, r0, #31
 8000c7c:	20fe      	movs	r0, #254	@ 0xfe
 8000c7e:	0e1b      	lsrs	r3, r3, #24
 8000c80:	1c59      	adds	r1, r3, #1
 8000c82:	0a55      	lsrs	r5, r2, #9
 8000c84:	4208      	tst	r0, r1
 8000c86:	d00c      	beq.n	8000ca2 <__aeabi_f2d+0x2e>
 8000c88:	21e0      	movs	r1, #224	@ 0xe0
 8000c8a:	0089      	lsls	r1, r1, #2
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	076d      	lsls	r5, r5, #29
 8000c90:	0b12      	lsrs	r2, r2, #12
 8000c92:	4463      	add	r3, ip
 8000c94:	051b      	lsls	r3, r3, #20
 8000c96:	4313      	orrs	r3, r2
 8000c98:	07e4      	lsls	r4, r4, #31
 8000c9a:	4323      	orrs	r3, r4
 8000c9c:	0028      	movs	r0, r5
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d114      	bne.n	8000cd0 <__aeabi_f2d+0x5c>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d01b      	beq.n	8000ce2 <__aeabi_f2d+0x6e>
 8000caa:	0028      	movs	r0, r5
 8000cac:	f000 f8ae 	bl	8000e0c <__clzsi2>
 8000cb0:	280a      	cmp	r0, #10
 8000cb2:	dc1c      	bgt.n	8000cee <__aeabi_f2d+0x7a>
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	002a      	movs	r2, r5
 8000cb8:	1a1b      	subs	r3, r3, r0
 8000cba:	40da      	lsrs	r2, r3
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	3315      	adds	r3, #21
 8000cc0:	409d      	lsls	r5, r3
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <__aeabi_f2d+0x88>)
 8000cc4:	0312      	lsls	r2, r2, #12
 8000cc6:	1a1b      	subs	r3, r3, r0
 8000cc8:	055b      	lsls	r3, r3, #21
 8000cca:	0b12      	lsrs	r2, r2, #12
 8000ccc:	0d5b      	lsrs	r3, r3, #21
 8000cce:	e7e1      	b.n	8000c94 <__aeabi_f2d+0x20>
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d009      	beq.n	8000ce8 <__aeabi_f2d+0x74>
 8000cd4:	0b13      	lsrs	r3, r2, #12
 8000cd6:	2280      	movs	r2, #128	@ 0x80
 8000cd8:	0312      	lsls	r2, r2, #12
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	076d      	lsls	r5, r5, #29
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <__aeabi_f2d+0x8c>)
 8000ce0:	e7d8      	b.n	8000c94 <__aeabi_f2d+0x20>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	e7d5      	b.n	8000c94 <__aeabi_f2d+0x20>
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <__aeabi_f2d+0x8c>)
 8000cec:	e7d2      	b.n	8000c94 <__aeabi_f2d+0x20>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	002a      	movs	r2, r5
 8000cf2:	3b0b      	subs	r3, #11
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	2500      	movs	r5, #0
 8000cf8:	e7e3      	b.n	8000cc2 <__aeabi_f2d+0x4e>
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	00000389 	.word	0x00000389
 8000d00:	000007ff 	.word	0x000007ff

08000d04 <__aeabi_d2f>:
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	004b      	lsls	r3, r1, #1
 8000d08:	030f      	lsls	r7, r1, #12
 8000d0a:	0d5b      	lsrs	r3, r3, #21
 8000d0c:	4c3b      	ldr	r4, [pc, #236]	@ (8000dfc <__aeabi_d2f+0xf8>)
 8000d0e:	0f45      	lsrs	r5, r0, #29
 8000d10:	b083      	sub	sp, #12
 8000d12:	0a7f      	lsrs	r7, r7, #9
 8000d14:	1c5e      	adds	r6, r3, #1
 8000d16:	432f      	orrs	r7, r5
 8000d18:	9000      	str	r0, [sp, #0]
 8000d1a:	9101      	str	r1, [sp, #4]
 8000d1c:	0fca      	lsrs	r2, r1, #31
 8000d1e:	00c5      	lsls	r5, r0, #3
 8000d20:	4226      	tst	r6, r4
 8000d22:	d00b      	beq.n	8000d3c <__aeabi_d2f+0x38>
 8000d24:	4936      	ldr	r1, [pc, #216]	@ (8000e00 <__aeabi_d2f+0xfc>)
 8000d26:	185c      	adds	r4, r3, r1
 8000d28:	2cfe      	cmp	r4, #254	@ 0xfe
 8000d2a:	dd13      	ble.n	8000d54 <__aeabi_d2f+0x50>
 8000d2c:	20ff      	movs	r0, #255	@ 0xff
 8000d2e:	2300      	movs	r3, #0
 8000d30:	05c0      	lsls	r0, r0, #23
 8000d32:	4318      	orrs	r0, r3
 8000d34:	07d2      	lsls	r2, r2, #31
 8000d36:	4310      	orrs	r0, r2
 8000d38:	b003      	add	sp, #12
 8000d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <__aeabi_d2f+0x42>
 8000d40:	2000      	movs	r0, #0
 8000d42:	2300      	movs	r3, #0
 8000d44:	e7f4      	b.n	8000d30 <__aeabi_d2f+0x2c>
 8000d46:	433d      	orrs	r5, r7
 8000d48:	d0f0      	beq.n	8000d2c <__aeabi_d2f+0x28>
 8000d4a:	2380      	movs	r3, #128	@ 0x80
 8000d4c:	03db      	lsls	r3, r3, #15
 8000d4e:	20ff      	movs	r0, #255	@ 0xff
 8000d50:	433b      	orrs	r3, r7
 8000d52:	e7ed      	b.n	8000d30 <__aeabi_d2f+0x2c>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	dd14      	ble.n	8000d82 <__aeabi_d2f+0x7e>
 8000d58:	9b00      	ldr	r3, [sp, #0]
 8000d5a:	00ff      	lsls	r7, r7, #3
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	1e58      	subs	r0, r3, #1
 8000d60:	4183      	sbcs	r3, r0
 8000d62:	0f69      	lsrs	r1, r5, #29
 8000d64:	433b      	orrs	r3, r7
 8000d66:	430b      	orrs	r3, r1
 8000d68:	0759      	lsls	r1, r3, #29
 8000d6a:	d041      	beq.n	8000df0 <__aeabi_d2f+0xec>
 8000d6c:	210f      	movs	r1, #15
 8000d6e:	4019      	ands	r1, r3
 8000d70:	2904      	cmp	r1, #4
 8000d72:	d028      	beq.n	8000dc6 <__aeabi_d2f+0xc2>
 8000d74:	3304      	adds	r3, #4
 8000d76:	0159      	lsls	r1, r3, #5
 8000d78:	d525      	bpl.n	8000dc6 <__aeabi_d2f+0xc2>
 8000d7a:	3401      	adds	r4, #1
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	b2e0      	uxtb	r0, r4
 8000d80:	e7d6      	b.n	8000d30 <__aeabi_d2f+0x2c>
 8000d82:	0021      	movs	r1, r4
 8000d84:	3117      	adds	r1, #23
 8000d86:	dbdb      	blt.n	8000d40 <__aeabi_d2f+0x3c>
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	201e      	movs	r0, #30
 8000d8c:	0409      	lsls	r1, r1, #16
 8000d8e:	4339      	orrs	r1, r7
 8000d90:	1b00      	subs	r0, r0, r4
 8000d92:	281f      	cmp	r0, #31
 8000d94:	dd1b      	ble.n	8000dce <__aeabi_d2f+0xca>
 8000d96:	2602      	movs	r6, #2
 8000d98:	4276      	negs	r6, r6
 8000d9a:	1b34      	subs	r4, r6, r4
 8000d9c:	000e      	movs	r6, r1
 8000d9e:	40e6      	lsrs	r6, r4
 8000da0:	0034      	movs	r4, r6
 8000da2:	2820      	cmp	r0, #32
 8000da4:	d004      	beq.n	8000db0 <__aeabi_d2f+0xac>
 8000da6:	4817      	ldr	r0, [pc, #92]	@ (8000e04 <__aeabi_d2f+0x100>)
 8000da8:	4684      	mov	ip, r0
 8000daa:	4463      	add	r3, ip
 8000dac:	4099      	lsls	r1, r3
 8000dae:	430d      	orrs	r5, r1
 8000db0:	002b      	movs	r3, r5
 8000db2:	1e59      	subs	r1, r3, #1
 8000db4:	418b      	sbcs	r3, r1
 8000db6:	4323      	orrs	r3, r4
 8000db8:	0759      	lsls	r1, r3, #29
 8000dba:	d015      	beq.n	8000de8 <__aeabi_d2f+0xe4>
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	4019      	ands	r1, r3
 8000dc2:	2904      	cmp	r1, #4
 8000dc4:	d117      	bne.n	8000df6 <__aeabi_d2f+0xf2>
 8000dc6:	019b      	lsls	r3, r3, #6
 8000dc8:	0a5b      	lsrs	r3, r3, #9
 8000dca:	b2e0      	uxtb	r0, r4
 8000dcc:	e7b0      	b.n	8000d30 <__aeabi_d2f+0x2c>
 8000dce:	4c0e      	ldr	r4, [pc, #56]	@ (8000e08 <__aeabi_d2f+0x104>)
 8000dd0:	191c      	adds	r4, r3, r4
 8000dd2:	002b      	movs	r3, r5
 8000dd4:	40a5      	lsls	r5, r4
 8000dd6:	40c3      	lsrs	r3, r0
 8000dd8:	40a1      	lsls	r1, r4
 8000dda:	1e68      	subs	r0, r5, #1
 8000ddc:	4185      	sbcs	r5, r0
 8000dde:	4329      	orrs	r1, r5
 8000de0:	430b      	orrs	r3, r1
 8000de2:	2400      	movs	r4, #0
 8000de4:	0759      	lsls	r1, r3, #29
 8000de6:	d1c1      	bne.n	8000d6c <__aeabi_d2f+0x68>
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	2000      	movs	r0, #0
 8000dec:	0a5b      	lsrs	r3, r3, #9
 8000dee:	e79f      	b.n	8000d30 <__aeabi_d2f+0x2c>
 8000df0:	08db      	lsrs	r3, r3, #3
 8000df2:	b2e0      	uxtb	r0, r4
 8000df4:	e79c      	b.n	8000d30 <__aeabi_d2f+0x2c>
 8000df6:	3304      	adds	r3, #4
 8000df8:	e7e5      	b.n	8000dc6 <__aeabi_d2f+0xc2>
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	000007fe 	.word	0x000007fe
 8000e00:	fffffc80 	.word	0xfffffc80
 8000e04:	fffffca2 	.word	0xfffffca2
 8000e08:	fffffc82 	.word	0xfffffc82

08000e0c <__clzsi2>:
 8000e0c:	211c      	movs	r1, #28
 8000e0e:	2301      	movs	r3, #1
 8000e10:	041b      	lsls	r3, r3, #16
 8000e12:	4298      	cmp	r0, r3
 8000e14:	d301      	bcc.n	8000e1a <__clzsi2+0xe>
 8000e16:	0c00      	lsrs	r0, r0, #16
 8000e18:	3910      	subs	r1, #16
 8000e1a:	0a1b      	lsrs	r3, r3, #8
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	d301      	bcc.n	8000e24 <__clzsi2+0x18>
 8000e20:	0a00      	lsrs	r0, r0, #8
 8000e22:	3908      	subs	r1, #8
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	4298      	cmp	r0, r3
 8000e28:	d301      	bcc.n	8000e2e <__clzsi2+0x22>
 8000e2a:	0900      	lsrs	r0, r0, #4
 8000e2c:	3904      	subs	r1, #4
 8000e2e:	a202      	add	r2, pc, #8	@ (adr r2, 8000e38 <__clzsi2+0x2c>)
 8000e30:	5c10      	ldrb	r0, [r2, r0]
 8000e32:	1840      	adds	r0, r0, r1
 8000e34:	4770      	bx	lr
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	02020304 	.word	0x02020304
 8000e3c:	01010101 	.word	0x01010101
	...

08000e48 <Read_ADC_Value>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Read_ADC_Value(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint32_t adcval=0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
	if(HAL_ADC_Start(&hadc)== HAL_OK)
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <Read_ADC_Value+0x4c>)
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 fe53 	bl	8001b00 <HAL_ADC_Start>
 8000e5a:	1e03      	subs	r3, r0, #0
 8000e5c:	d113      	bne.n	8000e86 <Read_ADC_Value+0x3e>
		{
			if(HAL_ADC_PollForConversion(&hadc,1000)==HAL_OK)
 8000e5e:	23fa      	movs	r3, #250	@ 0xfa
 8000e60:	009a      	lsls	r2, r3, #2
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <Read_ADC_Value+0x4c>)
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 fede 	bl	8001c28 <HAL_ADC_PollForConversion>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d106      	bne.n	8000e7e <Read_ADC_Value+0x36>
			{
				adcval=(uint8_t)HAL_ADC_GetValue(&hadc);
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <Read_ADC_Value+0x4c>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 ff70 	bl	8001d58 <HAL_ADC_GetValue>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	607b      	str	r3, [r7, #4]
			}
			HAL_ADC_Stop(&hadc);
 8000e7e:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <Read_ADC_Value+0x4c>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fe91 	bl	8001ba8 <HAL_ADC_Stop>
		}
	return adcval;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	b2db      	uxtb	r3, r3
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	20000028 	.word	0x20000028

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fc8c 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f850 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f9fa 	bl	800129c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ea8:	f000 f910 	bl	80010cc <MX_I2C2_Init>
  MX_SPI2_Init();
 8000eac:	f000 f94e 	bl	800114c <MX_SPI2_Init>
  MX_TSC_Init();
 8000eb0:	f000 f98a 	bl	80011c8 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8000eb4:	f000 f9cc 	bl	8001250 <MX_USB_PCD_Init>
  MX_ADC_Init();
 8000eb8:	f000 f8ac 	bl	8001014 <MX_ADC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      analogValue=Read_ADC_Value();
 8000ebc:	f7ff ffc4 	bl	8000e48 <Read_ADC_Value>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <main+0x94>)
 8000ec6:	701a      	strb	r2, [r3, #0]
      analogVoltage=3.3*((float)analogValue/255);
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <main+0x94>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff fbc7 	bl	8000660 <__aeabi_ui2f>
 8000ed2:	1c03      	adds	r3, r0, #0
 8000ed4:	4916      	ldr	r1, [pc, #88]	@ (8000f30 <main+0x98>)
 8000ed6:	1c18      	adds	r0, r3, #0
 8000ed8:	f7ff f9dc 	bl	8000294 <__aeabi_fdiv>
 8000edc:	1c03      	adds	r3, r0, #0
 8000ede:	1c18      	adds	r0, r3, #0
 8000ee0:	f7ff fec8 	bl	8000c74 <__aeabi_f2d>
 8000ee4:	4a13      	ldr	r2, [pc, #76]	@ (8000f34 <main+0x9c>)
 8000ee6:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <main+0xa0>)
 8000ee8:	f7ff fbfc 	bl	80006e4 <__aeabi_dmul>
 8000eec:	0002      	movs	r2, r0
 8000eee:	000b      	movs	r3, r1
 8000ef0:	0010      	movs	r0, r2
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	f7ff ff06 	bl	8000d04 <__aeabi_d2f>
 8000ef8:	1c02      	adds	r2, r0, #0
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <main+0xa4>)
 8000efc:	601a      	str	r2, [r3, #0]
//		else
//		{
//		     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
//
//		}
      if(analogVoltage>=2)
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <main+0xa4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2180      	movs	r1, #128	@ 0x80
 8000f04:	05c9      	lsls	r1, r1, #23
 8000f06:	1c18      	adds	r0, r3, #0
 8000f08:	f7ff f9ba 	bl	8000280 <__aeabi_fcmpge>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d006      	beq.n	8000f1e <main+0x86>
      {
    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <main+0xa8>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	0018      	movs	r0, r3
 8000f18:	f001 fba6 	bl	8002668 <HAL_GPIO_WritePin>
 8000f1c:	e7ce      	b.n	8000ebc <main+0x24>
      }
      else
      {
    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f1e:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <main+0xa8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	2180      	movs	r1, #128	@ 0x80
 8000f24:	0018      	movs	r0, r3
 8000f26:	f001 fb9f 	bl	8002668 <HAL_GPIO_WritePin>
      analogValue=Read_ADC_Value();
 8000f2a:	e7c7      	b.n	8000ebc <main+0x24>
 8000f2c:	20000440 	.word	0x20000440
 8000f30:	437f0000 	.word	0x437f0000
 8000f34:	66666666 	.word	0x66666666
 8000f38:	400a6666 	.word	0x400a6666
 8000f3c:	20000444 	.word	0x20000444
 8000f40:	48000800 	.word	0x48000800

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b099      	sub	sp, #100	@ 0x64
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	242c      	movs	r4, #44	@ 0x2c
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	0018      	movs	r0, r3
 8000f50:	2334      	movs	r3, #52	@ 0x34
 8000f52:	001a      	movs	r2, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	f002 fd65 	bl	8003a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5a:	231c      	movs	r3, #28
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	0018      	movs	r0, r3
 8000f60:	2310      	movs	r3, #16
 8000f62:	001a      	movs	r2, r3
 8000f64:	2100      	movs	r1, #0
 8000f66:	f002 fd5d 	bl	8003a24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	231c      	movs	r3, #28
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f002 fd56 	bl	8003a24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000f78:	0021      	movs	r1, r4
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2222      	movs	r2, #34	@ 0x22
 8000f7e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2201      	movs	r2, #1
 8000f84:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2201      	movs	r2, #1
 8000f8a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2210      	movs	r2, #16
 8000f90:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2202      	movs	r2, #2
 8000f96:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2280      	movs	r2, #128	@ 0x80
 8000f9c:	0212      	lsls	r2, r2, #8
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	22a0      	movs	r2, #160	@ 0xa0
 8000fa4:	0352      	lsls	r2, r2, #13
 8000fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2201      	movs	r2, #1
 8000fac:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f001 fdd3 	bl	8002b5c <HAL_RCC_OscConfig>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fba:	f000 f9eb 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	211c      	movs	r1, #28
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2202      	movs	r2, #2
 8000fca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	00d2      	lsls	r2, r2, #3
 8000fd8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2101      	movs	r1, #1
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f002 f942 	bl	8003268 <HAL_RCC_ClockConfig>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000fe8:	f000 f9d4 	bl	8001394 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fec:	003b      	movs	r3, r7
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	0292      	lsls	r2, r2, #10
 8000ff2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ff4:	003b      	movs	r3, r7
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffa:	003b      	movs	r3, r7
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f002 fa7f 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001006:	f000 f9c5 	bl	8001394 <Error_Handler>
  }
}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b019      	add	sp, #100	@ 0x64
 8001010:	bd90      	pop	{r4, r7, pc}
	...

08001014 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	0018      	movs	r0, r3
 800101e:	230c      	movs	r3, #12
 8001020:	001a      	movs	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	f002 fcfe 	bl	8003a24 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001028:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <MX_ADC_Init+0xb0>)
 800102a:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <MX_ADC_Init+0xb4>)
 800102c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800102e:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001030:	2280      	movs	r2, #128	@ 0x80
 8001032:	05d2      	lsls	r2, r2, #23
 8001034:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001038:	2210      	movs	r2, #16
 800103a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <MX_ADC_Init+0xb0>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001044:	2201      	movs	r2, #1
 8001046:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <MX_ADC_Init+0xb0>)
 800104a:	2204      	movs	r2, #4
 800104c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001050:	2200      	movs	r2, #0
 8001052:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001056:	2200      	movs	r2, #0
 8001058:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <MX_ADC_Init+0xb0>)
 800105c:	2201      	movs	r2, #1
 800105e:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001062:	2200      	movs	r2, #0
 8001064:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001068:	22c2      	movs	r2, #194	@ 0xc2
 800106a:	32ff      	adds	r2, #255	@ 0xff
 800106c:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001076:	2224      	movs	r2, #36	@ 0x24
 8001078:	2100      	movs	r1, #0
 800107a:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_ADC_Init+0xb0>)
 800107e:	2201      	movs	r2, #1
 8001080:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <MX_ADC_Init+0xb0>)
 8001084:	0018      	movs	r0, r3
 8001086:	f000 fbfb 	bl	8001880 <HAL_ADC_Init>
 800108a:	1e03      	subs	r3, r0, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 800108e:	f000 f981 	bl	8001394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2204      	movs	r2, #4
 8001096:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2280      	movs	r2, #128	@ 0x80
 800109c:	0152      	lsls	r2, r2, #5
 800109e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2206      	movs	r2, #6
 80010a4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a6:	1d3a      	adds	r2, r7, #4
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_ADC_Init+0xb0>)
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 fe5f 	bl	8001d70 <HAL_ADC_ConfigChannel>
 80010b2:	1e03      	subs	r3, r0, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80010b6:	f000 f96d 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b004      	add	sp, #16
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	20000028 	.word	0x20000028
 80010c8:	40012400 	.word	0x40012400

080010cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <MX_I2C2_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303550;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001148 <MX_I2C2_Init+0x7c>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e2:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_I2C2_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_I2C2_Init+0x74>)
 8001108:	0018      	movs	r0, r3
 800110a:	f001 facb 	bl	80026a4 <HAL_I2C_Init>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001112:	f000 f93f 	bl	8001394 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <MX_I2C2_Init+0x74>)
 8001118:	2100      	movs	r1, #0
 800111a:	0018      	movs	r0, r3
 800111c:	f001 fb68 	bl	80027f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001124:	f000 f936 	bl	8001394 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <MX_I2C2_Init+0x74>)
 800112a:	2100      	movs	r1, #0
 800112c:	0018      	movs	r0, r3
 800112e:	f001 fbab 	bl	8002888 <HAL_I2CEx_ConfigDigitalFilter>
 8001132:	1e03      	subs	r3, r0, #0
 8001134:	d001      	beq.n	800113a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 f92d 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000068 	.word	0x20000068
 8001144:	40005800 	.word	0x40005800
 8001148:	00303550 	.word	0x00303550

0800114c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001150:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <MX_SPI2_Init+0x74>)
 8001152:	4a1c      	ldr	r2, [pc, #112]	@ (80011c4 <MX_SPI2_Init+0x78>)
 8001154:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <MX_SPI2_Init+0x74>)
 8001158:	2282      	movs	r2, #130	@ 0x82
 800115a:	0052      	lsls	r2, r2, #1
 800115c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <MX_SPI2_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <MX_SPI2_Init+0x74>)
 8001166:	22c0      	movs	r2, #192	@ 0xc0
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116c:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <MX_SPI2_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <MX_SPI2_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_SPI2_Init+0x74>)
 800117a:	2280      	movs	r2, #128	@ 0x80
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_SPI2_Init+0x74>)
 8001182:	2208      	movs	r2, #8
 8001184:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_SPI2_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_SPI2_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <MX_SPI2_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_SPI2_Init+0x74>)
 800119a:	2207      	movs	r2, #7
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <MX_SPI2_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <MX_SPI2_Init+0x74>)
 80011a6:	2208      	movs	r2, #8
 80011a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011aa:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <MX_SPI2_Init+0x74>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f002 faa5 	bl	80036fc <HAL_SPI_Init>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d001      	beq.n	80011ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011b6:	f000 f8ed 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200000bc 	.word	0x200000bc
 80011c4:	40003800 	.word	0x40003800

080011c8 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <MX_TSC_Init+0x80>)
 80011ce:	4a1f      	ldr	r2, [pc, #124]	@ (800124c <MX_TSC_Init+0x84>)
 80011d0:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <MX_TSC_Init+0x80>)
 80011d4:	2280      	movs	r2, #128	@ 0x80
 80011d6:	0552      	lsls	r2, r2, #21
 80011d8:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <MX_TSC_Init+0x80>)
 80011dc:	2280      	movs	r2, #128	@ 0x80
 80011de:	0452      	lsls	r2, r2, #17
 80011e0:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_TSC_Init+0x80>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <MX_TSC_Init+0x80>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_TSC_Init+0x80>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_TSC_Init+0x80>)
 80011f6:	2280      	movs	r2, #128	@ 0x80
 80011f8:	0192      	lsls	r2, r2, #6
 80011fa:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <MX_TSC_Init+0x80>)
 80011fe:	22a0      	movs	r2, #160	@ 0xa0
 8001200:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_TSC_Init+0x80>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_TSC_Init+0x80>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_TSC_Init+0x80>)
 8001210:	2200      	movs	r2, #0
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_TSC_Init+0x80>)
 8001216:	222c      	movs	r2, #44	@ 0x2c
 8001218:	2100      	movs	r1, #0
 800121a:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <MX_TSC_Init+0x80>)
 800121e:	2291      	movs	r2, #145	@ 0x91
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	631a      	str	r2, [r3, #48]	@ 0x30
  htsc.Init.ShieldIOs = 0;
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <MX_TSC_Init+0x80>)
 8001226:	2200      	movs	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <MX_TSC_Init+0x80>)
 800122c:	2291      	movs	r2, #145	@ 0x91
 800122e:	00d2      	lsls	r2, r2, #3
 8001230:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8001232:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <MX_TSC_Init+0x80>)
 8001234:	0018      	movs	r0, r3
 8001236:	f002 fb19 	bl	800386c <HAL_TSC_Init>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d001      	beq.n	8001242 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 800123e:	f000 f8a9 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000120 	.word	0x20000120
 800124c:	40024000 	.word	0x40024000

08001250 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_USB_PCD_Init+0x44>)
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <MX_USB_PCD_Init+0x48>)
 8001258:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USB_PCD_Init+0x44>)
 800125c:	2208      	movs	r2, #8
 800125e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USB_PCD_Init+0x44>)
 8001262:	2202      	movs	r2, #2
 8001264:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USB_PCD_Init+0x44>)
 8001268:	2202      	movs	r2, #2
 800126a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USB_PCD_Init+0x44>)
 800126e:	2200      	movs	r2, #0
 8001270:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USB_PCD_Init+0x44>)
 8001274:	2200      	movs	r2, #0
 8001276:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USB_PCD_Init+0x44>)
 800127a:	2200      	movs	r2, #0
 800127c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <MX_USB_PCD_Init+0x44>)
 8001280:	0018      	movs	r0, r3
 8001282:	f001 fb4d 	bl	8002920 <HAL_PCD_Init>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800128a:	f000 f883 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800128e:	46c0      	nop			@ (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000164 	.word	0x20000164
 8001298:	40005c00 	.word	0x40005c00

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	240c      	movs	r4, #12
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	0018      	movs	r0, r3
 80012a8:	2314      	movs	r3, #20
 80012aa:	001a      	movs	r2, r3
 80012ac:	2100      	movs	r1, #0
 80012ae:	f002 fbb9 	bl	8003a24 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b35      	ldr	r3, [pc, #212]	@ (8001388 <MX_GPIO_Init+0xec>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <MX_GPIO_Init+0xec>)
 80012b8:	2180      	movs	r1, #128	@ 0x80
 80012ba:	0309      	lsls	r1, r1, #12
 80012bc:	430a      	orrs	r2, r1
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <MX_GPIO_Init+0xec>)
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	031b      	lsls	r3, r3, #12
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <MX_GPIO_Init+0xec>)
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <MX_GPIO_Init+0xec>)
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	0289      	lsls	r1, r1, #10
 80012d8:	430a      	orrs	r2, r1
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <MX_GPIO_Init+0xec>)
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	2380      	movs	r3, #128	@ 0x80
 80012e2:	029b      	lsls	r3, r3, #10
 80012e4:	4013      	ands	r3, r2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <MX_GPIO_Init+0xec>)
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <MX_GPIO_Init+0xec>)
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	02c9      	lsls	r1, r1, #11
 80012f4:	430a      	orrs	r2, r1
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <MX_GPIO_Init+0xec>)
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	02db      	lsls	r3, r3, #11
 8001300:	4013      	ands	r3, r2
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8001306:	4921      	ldr	r1, [pc, #132]	@ (800138c <MX_GPIO_Init+0xf0>)
 8001308:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <MX_GPIO_Init+0xf4>)
 800130a:	2200      	movs	r2, #0
 800130c:	0018      	movs	r0, r3
 800130e:	f001 f9ab 	bl	8002668 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8001312:	193b      	adds	r3, r7, r4
 8001314:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <MX_GPIO_Init+0xf0>)
 8001316:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	193b      	adds	r3, r7, r4
 800131a:	2201      	movs	r2, #1
 800131c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	193b      	adds	r3, r7, r4
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	193b      	adds	r3, r7, r4
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	193b      	adds	r3, r7, r4
 800132c:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <MX_GPIO_Init+0xf4>)
 800132e:	0019      	movs	r1, r3
 8001330:	0010      	movs	r0, r2
 8001332:	f001 f821 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 8001336:	0021      	movs	r1, r4
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2206      	movs	r2, #6
 800133c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2290      	movs	r2, #144	@ 0x90
 8001342:	0352      	lsls	r2, r2, #13
 8001344:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134c:	000c      	movs	r4, r1
 800134e:	187b      	adds	r3, r7, r1
 8001350:	4a0f      	ldr	r2, [pc, #60]	@ (8001390 <MX_GPIO_Init+0xf4>)
 8001352:	0019      	movs	r1, r3
 8001354:	0010      	movs	r0, r2
 8001356:	f001 f80f 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800135a:	0021      	movs	r1, r4
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2290      	movs	r2, #144	@ 0x90
 8001366:	0352      	lsls	r2, r2, #13
 8001368:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001370:	187a      	adds	r2, r7, r1
 8001372:	2390      	movs	r3, #144	@ 0x90
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	0011      	movs	r1, r2
 8001378:	0018      	movs	r0, r3
 800137a:	f000 fffd 	bl	8002378 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b009      	add	sp, #36	@ 0x24
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	40021000 	.word	0x40021000
 800138c:	000003e1 	.word	0x000003e1
 8001390:	48000800 	.word	0x48000800

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	e7fd      	b.n	800139c <Error_Handler+0x8>

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_MspInit+0x44>)
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_MspInit+0x44>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	430a      	orrs	r2, r1
 80013b0:	619a      	str	r2, [r3, #24]
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <HAL_MspInit+0x44>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2201      	movs	r2, #1
 80013b8:	4013      	ands	r3, r2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_MspInit+0x44>)
 80013c0:	69da      	ldr	r2, [r3, #28]
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HAL_MspInit+0x44>)
 80013c4:	2180      	movs	r1, #128	@ 0x80
 80013c6:	0549      	lsls	r1, r1, #21
 80013c8:	430a      	orrs	r2, r1
 80013ca:	61da      	str	r2, [r3, #28]
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_MspInit+0x44>)
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	055b      	lsls	r3, r3, #21
 80013d4:	4013      	ands	r3, r2
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b08b      	sub	sp, #44	@ 0x2c
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	2414      	movs	r4, #20
 80013f2:	193b      	adds	r3, r7, r4
 80013f4:	0018      	movs	r0, r3
 80013f6:	2314      	movs	r3, #20
 80013f8:	001a      	movs	r2, r3
 80013fa:	2100      	movs	r1, #0
 80013fc:	f002 fb12 	bl	8003a24 <memset>
  if(hadc->Instance==ADC1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a19      	ldr	r2, [pc, #100]	@ (800146c <HAL_ADC_MspInit+0x84>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d12b      	bne.n	8001462 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800140a:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <HAL_ADC_MspInit+0x88>)
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_ADC_MspInit+0x88>)
 8001410:	2180      	movs	r1, #128	@ 0x80
 8001412:	0089      	lsls	r1, r1, #2
 8001414:	430a      	orrs	r2, r1
 8001416:	619a      	str	r2, [r3, #24]
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_ADC_MspInit+0x88>)
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_ADC_MspInit+0x88>)
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_ADC_MspInit+0x88>)
 800142c:	2180      	movs	r1, #128	@ 0x80
 800142e:	0289      	lsls	r1, r1, #10
 8001430:	430a      	orrs	r2, r1
 8001432:	615a      	str	r2, [r3, #20]
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <HAL_ADC_MspInit+0x88>)
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	029b      	lsls	r3, r3, #10
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001442:	193b      	adds	r3, r7, r4
 8001444:	2210      	movs	r2, #16
 8001446:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001448:	193b      	adds	r3, r7, r4
 800144a:	2203      	movs	r2, #3
 800144c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	193b      	adds	r3, r7, r4
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	193a      	adds	r2, r7, r4
 8001456:	2390      	movs	r3, #144	@ 0x90
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f000 ff8b 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b00b      	add	sp, #44	@ 0x2c
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	40012400 	.word	0x40012400
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b08b      	sub	sp, #44	@ 0x2c
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	2414      	movs	r4, #20
 800147e:	193b      	adds	r3, r7, r4
 8001480:	0018      	movs	r0, r3
 8001482:	2314      	movs	r3, #20
 8001484:	001a      	movs	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	f002 facc 	bl	8003a24 <memset>
  if(hi2c->Instance==I2C2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <HAL_I2C_MspInit+0x90>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d132      	bne.n	80014fc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <HAL_I2C_MspInit+0x94>)
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_I2C_MspInit+0x94>)
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	02c9      	lsls	r1, r1, #11
 80014a0:	430a      	orrs	r2, r1
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <HAL_I2C_MspInit+0x94>)
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	02db      	lsls	r3, r3, #11
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	22c0      	movs	r2, #192	@ 0xc0
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ba:	0021      	movs	r1, r4
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	2212      	movs	r2, #18
 80014c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	2201      	movs	r2, #1
 80014c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2203      	movs	r2, #3
 80014cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2201      	movs	r2, #1
 80014d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <HAL_I2C_MspInit+0x98>)
 80014d8:	0019      	movs	r1, r3
 80014da:	0010      	movs	r0, r2
 80014dc:	f000 ff4c 	bl	8002378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_I2C_MspInit+0x94>)
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_I2C_MspInit+0x94>)
 80014e6:	2180      	movs	r1, #128	@ 0x80
 80014e8:	03c9      	lsls	r1, r1, #15
 80014ea:	430a      	orrs	r2, r1
 80014ec:	61da      	str	r2, [r3, #28]
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_I2C_MspInit+0x94>)
 80014f0:	69da      	ldr	r2, [r3, #28]
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	03db      	lsls	r3, r3, #15
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b00b      	add	sp, #44	@ 0x2c
 8001502:	bd90      	pop	{r4, r7, pc}
 8001504:	40005800 	.word	0x40005800
 8001508:	40021000 	.word	0x40021000
 800150c:	48000400 	.word	0x48000400

08001510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b08b      	sub	sp, #44	@ 0x2c
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	2414      	movs	r4, #20
 800151a:	193b      	adds	r3, r7, r4
 800151c:	0018      	movs	r0, r3
 800151e:	2314      	movs	r3, #20
 8001520:	001a      	movs	r2, r3
 8001522:	2100      	movs	r1, #0
 8001524:	f002 fa7e 	bl	8003a24 <memset>
  if(hspi->Instance==SPI2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <HAL_SPI_MspInit+0x90>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d132      	bne.n	8001598 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <HAL_SPI_MspInit+0x94>)
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <HAL_SPI_MspInit+0x94>)
 8001538:	2180      	movs	r1, #128	@ 0x80
 800153a:	01c9      	lsls	r1, r1, #7
 800153c:	430a      	orrs	r2, r1
 800153e:	61da      	str	r2, [r3, #28]
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <HAL_SPI_MspInit+0x94>)
 8001542:	69da      	ldr	r2, [r3, #28]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	01db      	lsls	r3, r3, #7
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_SPI_MspInit+0x94>)
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <HAL_SPI_MspInit+0x94>)
 8001554:	2180      	movs	r1, #128	@ 0x80
 8001556:	02c9      	lsls	r1, r1, #11
 8001558:	430a      	orrs	r2, r1
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <HAL_SPI_MspInit+0x94>)
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	02db      	lsls	r3, r3, #11
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800156a:	193b      	adds	r3, r7, r4
 800156c:	22e0      	movs	r2, #224	@ 0xe0
 800156e:	0212      	lsls	r2, r2, #8
 8001570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	0021      	movs	r1, r4
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2202      	movs	r2, #2
 8001578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2203      	movs	r2, #3
 8001584:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	187b      	adds	r3, r7, r1
 800158e:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <HAL_SPI_MspInit+0x98>)
 8001590:	0019      	movs	r1, r3
 8001592:	0010      	movs	r0, r2
 8001594:	f000 fef0 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001598:	46c0      	nop			@ (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b00b      	add	sp, #44	@ 0x2c
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	40003800 	.word	0x40003800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400

080015ac <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b08b      	sub	sp, #44	@ 0x2c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	2414      	movs	r4, #20
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	0018      	movs	r0, r3
 80015ba:	2314      	movs	r3, #20
 80015bc:	001a      	movs	r2, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	f002 fa30 	bl	8003a24 <memset>
  if(htsc->Instance==TSC)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a44      	ldr	r2, [pc, #272]	@ (80016dc <HAL_TSC_MspInit+0x130>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d000      	beq.n	80015d0 <HAL_TSC_MspInit+0x24>
 80015ce:	e080      	b.n	80016d2 <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80015d0:	4b43      	ldr	r3, [pc, #268]	@ (80016e0 <HAL_TSC_MspInit+0x134>)
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	4b42      	ldr	r3, [pc, #264]	@ (80016e0 <HAL_TSC_MspInit+0x134>)
 80015d6:	2180      	movs	r1, #128	@ 0x80
 80015d8:	0449      	lsls	r1, r1, #17
 80015da:	430a      	orrs	r2, r1
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	4b40      	ldr	r3, [pc, #256]	@ (80016e0 <HAL_TSC_MspInit+0x134>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	045b      	lsls	r3, r3, #17
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <HAL_TSC_MspInit+0x134>)
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <HAL_TSC_MspInit+0x134>)
 80015f2:	2180      	movs	r1, #128	@ 0x80
 80015f4:	0289      	lsls	r1, r1, #10
 80015f6:	430a      	orrs	r2, r1
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	4b39      	ldr	r3, [pc, #228]	@ (80016e0 <HAL_TSC_MspInit+0x134>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	2380      	movs	r3, #128	@ 0x80
 8001600:	029b      	lsls	r3, r3, #10
 8001602:	4013      	ands	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <HAL_TSC_MspInit+0x134>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <HAL_TSC_MspInit+0x134>)
 800160e:	2180      	movs	r1, #128	@ 0x80
 8001610:	02c9      	lsls	r1, r1, #11
 8001612:	430a      	orrs	r2, r1
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <HAL_TSC_MspInit+0x134>)
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	2380      	movs	r3, #128	@ 0x80
 800161c:	02db      	lsls	r3, r3, #11
 800161e:	4013      	ands	r3, r2
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001624:	193b      	adds	r3, r7, r4
 8001626:	2244      	movs	r2, #68	@ 0x44
 8001628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	193b      	adds	r3, r7, r4
 800162c:	2202      	movs	r2, #2
 800162e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	193b      	adds	r3, r7, r4
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	193b      	adds	r3, r7, r4
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800163c:	193b      	adds	r3, r7, r4
 800163e:	2203      	movs	r2, #3
 8001640:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	193a      	adds	r2, r7, r4
 8001644:	2390      	movs	r3, #144	@ 0x90
 8001646:	05db      	lsls	r3, r3, #23
 8001648:	0011      	movs	r1, r2
 800164a:	0018      	movs	r0, r3
 800164c:	f000 fe94 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8001650:	193b      	adds	r3, r7, r4
 8001652:	2288      	movs	r2, #136	@ 0x88
 8001654:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001656:	193b      	adds	r3, r7, r4
 8001658:	2212      	movs	r2, #18
 800165a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	193b      	adds	r3, r7, r4
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	193b      	adds	r3, r7, r4
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001668:	193b      	adds	r3, r7, r4
 800166a:	2203      	movs	r2, #3
 800166c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	193a      	adds	r2, r7, r4
 8001670:	2390      	movs	r3, #144	@ 0x90
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	0011      	movs	r1, r2
 8001676:	0018      	movs	r0, r3
 8001678:	f000 fe7e 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800167c:	193b      	adds	r3, r7, r4
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	193b      	adds	r3, r7, r4
 8001684:	2202      	movs	r2, #2
 8001686:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	193b      	adds	r3, r7, r4
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	193b      	adds	r3, r7, r4
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001694:	193b      	adds	r3, r7, r4
 8001696:	2203      	movs	r2, #3
 8001698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	193b      	adds	r3, r7, r4
 800169c:	4a11      	ldr	r2, [pc, #68]	@ (80016e4 <HAL_TSC_MspInit+0x138>)
 800169e:	0019      	movs	r1, r3
 80016a0:	0010      	movs	r0, r2
 80016a2:	f000 fe69 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016a6:	0021      	movs	r1, r4
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	2202      	movs	r2, #2
 80016ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2212      	movs	r2, #18
 80016b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2203      	movs	r2, #3
 80016c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <HAL_TSC_MspInit+0x138>)
 80016ca:	0019      	movs	r1, r3
 80016cc:	0010      	movs	r0, r2
 80016ce:	f000 fe53 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE END TSC_MspInit 1 */

  }

}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b00b      	add	sp, #44	@ 0x2c
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	40024000 	.word	0x40024000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400

080016e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <HAL_PCD_MspInit+0x38>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10d      	bne.n	8001716 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <HAL_PCD_MspInit+0x3c>)
 80016fc:	69da      	ldr	r2, [r3, #28]
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_PCD_MspInit+0x3c>)
 8001700:	2180      	movs	r1, #128	@ 0x80
 8001702:	0409      	lsls	r1, r1, #16
 8001704:	430a      	orrs	r2, r1
 8001706:	61da      	str	r2, [r3, #28]
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_PCD_MspInit+0x3c>)
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	40005c00 	.word	0x40005c00
 8001724:	40021000 	.word	0x40021000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800172c:	46c0      	nop			@ (mov r8, r8)
 800172e:	e7fd      	b.n	800172c <NMI_Handler+0x4>

08001730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	e7fd      	b.n	8001734 <HardFault_Handler+0x4>

08001738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 f87a 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001764:	480d      	ldr	r0, [pc, #52]	@ (800179c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001766:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001768:	f7ff fff7 	bl	800175a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	@ (80017a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	@ (80017a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <LoopForever+0xe>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	@ (80017b0 <LoopForever+0x16>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001792:	f002 f94f 	bl	8003a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001796:	f7ff fb7f 	bl	8000e98 <main>

0800179a <LoopForever>:

LoopForever:
    b LoopForever
 800179a:	e7fe      	b.n	800179a <LoopForever>
  ldr   r0, =_estack
 800179c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017a8:	08003b48 	.word	0x08003b48
  ldr r2, =_sbss
 80017ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017b0:	2000044c 	.word	0x2000044c

080017b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC1_COMP_IRQHandler>
	...

080017b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <HAL_Init+0x24>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_Init+0x24>)
 80017c2:	2110      	movs	r1, #16
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 f809 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ce:	f7ff fde7 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	40022000 	.word	0x40022000

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <HAL_InitTick+0x5c>)
 80017ea:	681c      	ldr	r4, [r3, #0]
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_InitTick+0x60>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	0019      	movs	r1, r3
 80017f2:	23fa      	movs	r3, #250	@ 0xfa
 80017f4:	0098      	lsls	r0, r3, #2
 80017f6:	f7fe fc87 	bl	8000108 <__udivsi3>
 80017fa:	0003      	movs	r3, r0
 80017fc:	0019      	movs	r1, r3
 80017fe:	0020      	movs	r0, r4
 8001800:	f7fe fc82 	bl	8000108 <__udivsi3>
 8001804:	0003      	movs	r3, r0
 8001806:	0018      	movs	r0, r3
 8001808:	f000 fda9 	bl	800235e <HAL_SYSTICK_Config>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d001      	beq.n	8001814 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e00f      	b.n	8001834 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d80b      	bhi.n	8001832 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	2301      	movs	r3, #1
 800181e:	425b      	negs	r3, r3
 8001820:	2200      	movs	r2, #0
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fd86 	bl	8002334 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_InitTick+0x64>)
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b003      	add	sp, #12
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	20000000 	.word	0x20000000
 8001840:	20000008 	.word	0x20000008
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <HAL_IncTick+0x1c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	001a      	movs	r2, r3
 8001852:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <HAL_IncTick+0x20>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	18d2      	adds	r2, r2, r3
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <HAL_IncTick+0x20>)
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	20000008 	.word	0x20000008
 8001868:	20000448 	.word	0x20000448

0800186c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b02      	ldr	r3, [pc, #8]	@ (800187c <HAL_GetTick+0x10>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	20000448 	.word	0x20000448

08001880 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001888:	230f      	movs	r3, #15
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e125      	b.n	8001aea <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2234      	movs	r2, #52	@ 0x34
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff fd96 	bl	80013e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c0:	2210      	movs	r2, #16
 80018c2:	4013      	ands	r3, r2
 80018c4:	d000      	beq.n	80018c8 <HAL_ADC_Init+0x48>
 80018c6:	e103      	b.n	8001ad0 <HAL_ADC_Init+0x250>
 80018c8:	230f      	movs	r3, #15
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d000      	beq.n	80018d4 <HAL_ADC_Init+0x54>
 80018d2:	e0fd      	b.n	8001ad0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2204      	movs	r2, #4
 80018dc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80018de:	d000      	beq.n	80018e2 <HAL_ADC_Init+0x62>
 80018e0:	e0f6      	b.n	8001ad0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e6:	4a83      	ldr	r2, [pc, #524]	@ (8001af4 <HAL_ADC_Init+0x274>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	2202      	movs	r2, #2
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2203      	movs	r2, #3
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d112      	bne.n	8001926 <HAL_ADC_Init+0xa6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	4013      	ands	r3, r2
 800190a:	2b01      	cmp	r3, #1
 800190c:	d009      	beq.n	8001922 <HAL_ADC_Init+0xa2>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	401a      	ands	r2, r3
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	429a      	cmp	r2, r3
 8001920:	d101      	bne.n	8001926 <HAL_ADC_Init+0xa6>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_ADC_Init+0xa8>
 8001926:	2300      	movs	r3, #0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d116      	bne.n	800195a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2218      	movs	r2, #24
 8001934:	4393      	bics	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	0899      	lsrs	r1, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4964      	ldr	r1, [pc, #400]	@ (8001af8 <HAL_ADC_Init+0x278>)
 8001966:	400a      	ands	r2, r1
 8001968:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7e1b      	ldrb	r3, [r3, #24]
 800196e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7e5b      	ldrb	r3, [r3, #25]
 8001974:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001976:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7e9b      	ldrb	r3, [r3, #26]
 800197c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800197e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	2b01      	cmp	r3, #1
 8001986:	d002      	beq.n	800198e <HAL_ADC_Init+0x10e>
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	e000      	b.n	8001990 <HAL_ADC_Init+0x110>
 800198e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001990:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001996:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d101      	bne.n	80019a4 <HAL_ADC_Init+0x124>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e000      	b.n	80019a6 <HAL_ADC_Init+0x126>
 80019a4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80019a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2124      	movs	r1, #36	@ 0x24
 80019ac:	5c5b      	ldrb	r3, [r3, r1]
 80019ae:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80019b0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7edb      	ldrb	r3, [r3, #27]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d115      	bne.n	80019ec <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7e9b      	ldrb	r3, [r3, #26]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d105      	bne.n	80019d4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2280      	movs	r2, #128	@ 0x80
 80019cc:	0252      	lsls	r2, r2, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	e00b      	b.n	80019ec <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d8:	2220      	movs	r2, #32
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e4:	2201      	movs	r2, #1
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	23c2      	movs	r3, #194	@ 0xc2
 80019f2:	33ff      	adds	r3, #255	@ 0xff
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d007      	beq.n	8001a08 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a00:	4313      	orrs	r3, r2
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68d9      	ldr	r1, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	055b      	lsls	r3, r3, #21
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d01b      	beq.n	8001a5c <HAL_ADC_Init+0x1dc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d017      	beq.n	8001a5c <HAL_ADC_Init+0x1dc>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d013      	beq.n	8001a5c <HAL_ADC_Init+0x1dc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d00f      	beq.n	8001a5c <HAL_ADC_Init+0x1dc>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00b      	beq.n	8001a5c <HAL_ADC_Init+0x1dc>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d007      	beq.n	8001a5c <HAL_ADC_Init+0x1dc>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a50:	2b06      	cmp	r3, #6
 8001a52:	d003      	beq.n	8001a5c <HAL_ADC_Init+0x1dc>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	2b07      	cmp	r3, #7
 8001a5a:	d112      	bne.n	8001a82 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2107      	movs	r1, #7
 8001a68:	438a      	bics	r2, r1
 8001a6a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6959      	ldr	r1, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a76:	2207      	movs	r2, #7
 8001a78:	401a      	ands	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <HAL_ADC_Init+0x27c>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d10b      	bne.n	8001aaa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001aa8:	e01c      	b.n	8001ae4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aae:	2212      	movs	r2, #18
 8001ab0:	4393      	bics	r3, r2
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abe:	2201      	movs	r2, #1
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001ac6:	230f      	movs	r3, #15
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ace:	e009      	b.n	8001ae4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001adc:	230f      	movs	r3, #15
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b004      	add	sp, #16
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	fffffefd 	.word	0xfffffefd
 8001af8:	fffe0219 	.word	0xfffe0219
 8001afc:	833fffe7 	.word	0x833fffe7

08001b00 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2204      	movs	r2, #4
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d138      	bne.n	8001b8e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2234      	movs	r2, #52	@ 0x34
 8001b20:	5c9b      	ldrb	r3, [r3, r2]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Start+0x2a>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e038      	b.n	8001b9c <HAL_ADC_Start+0x9c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2234      	movs	r2, #52	@ 0x34
 8001b2e:	2101      	movs	r1, #1
 8001b30:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7e5b      	ldrb	r3, [r3, #25]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d007      	beq.n	8001b4a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	18fc      	adds	r4, r7, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 fa23 	bl	8001f8c <ADC_Enable>
 8001b46:	0003      	movs	r3, r0
 8001b48:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d120      	bne.n	8001b96 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b58:	4a12      	ldr	r2, [pc, #72]	@ (8001ba4 <HAL_ADC_Start+0xa4>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2280      	movs	r2, #128	@ 0x80
 8001b5e:	0052      	lsls	r2, r2, #1
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2234      	movs	r2, #52	@ 0x34
 8001b70:	2100      	movs	r1, #0
 8001b72:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	221c      	movs	r2, #28
 8001b7a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2104      	movs	r1, #4
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	e003      	b.n	8001b96 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b8e:	230f      	movs	r3, #15
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2202      	movs	r2, #2
 8001b94:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b96:	230f      	movs	r3, #15
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b005      	add	sp, #20
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	fffff0fe 	.word	0xfffff0fe

08001ba8 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2234      	movs	r2, #52	@ 0x34
 8001bbc:	5c9b      	ldrb	r3, [r3, r2]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Stop+0x1e>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e029      	b.n	8001c1a <HAL_ADC_Stop+0x72>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2234      	movs	r2, #52	@ 0x34
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001bce:	250f      	movs	r5, #15
 8001bd0:	197c      	adds	r4, r7, r5
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 face 	bl	8002176 <ADC_ConversionStop>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001bde:	197b      	adds	r3, r7, r5
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d112      	bne.n	8001c0c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001be6:	197c      	adds	r4, r7, r5
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 fa52 	bl	8002094 <ADC_Disable>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001bf4:	197b      	adds	r3, r7, r5
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c00:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <HAL_ADC_Stop+0x7c>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	2201      	movs	r2, #1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2234      	movs	r2, #52	@ 0x34
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001c14:	230f      	movs	r3, #15
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	781b      	ldrb	r3, [r3, #0]
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bdb0      	pop	{r4, r5, r7, pc}
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	fffffefe 	.word	0xfffffefe

08001c28 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d102      	bne.n	8001c40 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	e014      	b.n	8001c6a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d10b      	bne.n	8001c66 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c52:	2220      	movs	r2, #32
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2234      	movs	r2, #52	@ 0x34
 8001c5e:	2100      	movs	r1, #0
 8001c60:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e071      	b.n	8001d4a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001c66:	230c      	movs	r3, #12
 8001c68:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c6a:	f7ff fdff 	bl	800186c <HAL_GetTick>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c72:	e01f      	b.n	8001cb4 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	d01c      	beq.n	8001cb4 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_ADC_PollForConversion+0x68>
 8001c80:	f7ff fdf4 	bl	800186c <HAL_GetTick>
 8001c84:	0002      	movs	r2, r0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d211      	bcs.n	8001cb4 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2234      	movs	r2, #52	@ 0x34
 8001cac:	2100      	movs	r1, #0
 8001cae:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e04a      	b.n	8001d4a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d0d9      	beq.n	8001c74 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc4:	2280      	movs	r2, #128	@ 0x80
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	23c0      	movs	r3, #192	@ 0xc0
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d12d      	bne.n	8001d38 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d129      	bne.n	8001d38 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2208      	movs	r2, #8
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d122      	bne.n	8001d38 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d110      	bne.n	8001d20 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	210c      	movs	r1, #12
 8001d0a:	438a      	bics	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d12:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <HAL_ADC_PollForConversion+0x12c>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	2201      	movs	r2, #1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d1e:	e00b      	b.n	8001d38 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d24:	2220      	movs	r2, #32
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d30:	2201      	movs	r2, #1
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7e1b      	ldrb	r3, [r3, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d103      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	220c      	movs	r2, #12
 8001d46:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b004      	add	sp, #16
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	fffffefe 	.word	0xfffffefe

08001d58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b002      	add	sp, #8
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7a:	230f      	movs	r3, #15
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	055b      	lsls	r3, r3, #21
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d011      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x46>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d00d      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x46>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d009      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x46>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d005      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x46>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d001      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x46>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2234      	movs	r2, #52	@ 0x34
 8001dba:	5c9b      	ldrb	r3, [r3, r2]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x54>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e0d0      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x1f6>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2234      	movs	r2, #52	@ 0x34
 8001dc8:	2101      	movs	r1, #1
 8001dca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d000      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x6a>
 8001dd8:	e0b4      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a64      	ldr	r2, [pc, #400]	@ (8001f70 <HAL_ADC_ConfigChannel+0x200>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d100      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x76>
 8001de4:	e082      	b.n	8001eec <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	409a      	lsls	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	055b      	lsls	r3, r3, #21
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d037      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x108>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d033      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x108>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d02f      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x108>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d02b      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x108>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d027      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x108>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d023      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x108>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e34:	2b06      	cmp	r3, #6
 8001e36:	d01f      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x108>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	d01b      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2107      	movs	r1, #7
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d012      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2107      	movs	r1, #7
 8001e5e:	438a      	bics	r2, r1
 8001e60:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6959      	ldr	r1, [r3, #20]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	401a      	ands	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d007      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x120>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b11      	cmp	r3, #17
 8001e86:	d003      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x120>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b12      	cmp	r3, #18
 8001e8e:	d163      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e90:	4b38      	ldr	r3, [pc, #224]	@ (8001f74 <HAL_ADC_ConfigChannel+0x204>)
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d009      	beq.n	8001eb0 <HAL_ADC_ConfigChannel+0x140>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b11      	cmp	r3, #17
 8001ea2:	d102      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x13a>
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	03db      	lsls	r3, r3, #15
 8001ea8:	e004      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x144>
 8001eaa:	2380      	movs	r3, #128	@ 0x80
 8001eac:	045b      	lsls	r3, r3, #17
 8001eae:	e001      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x144>
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8001f74 <HAL_ADC_ConfigChannel+0x204>)
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d14a      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <HAL_ADC_ConfigChannel+0x208>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	492d      	ldr	r1, [pc, #180]	@ (8001f7c <HAL_ADC_ConfigChannel+0x20c>)
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7fe f91d 	bl	8000108 <__udivsi3>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	189b      	adds	r3, r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001edc:	e002      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f9      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x16e>
 8001eea:	e035      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4099      	lsls	r1, r3
 8001efa:	000b      	movs	r3, r1
 8001efc:	43d9      	mvns	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	400a      	ands	r2, r1
 8001f04:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d007      	beq.n	8001f1e <HAL_ADC_ConfigChannel+0x1ae>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b11      	cmp	r3, #17
 8001f14:	d003      	beq.n	8001f1e <HAL_ADC_ConfigChannel+0x1ae>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d11c      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_ADC_ConfigChannel+0x204>)
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d007      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0x1ca>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b11      	cmp	r3, #17
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x1c6>
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <HAL_ADC_ConfigChannel+0x210>)
 8001f34:	e002      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x1cc>
 8001f36:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <HAL_ADC_ConfigChannel+0x214>)
 8001f38:	e000      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x1cc>
 8001f3a:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <HAL_ADC_ConfigChannel+0x218>)
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <HAL_ADC_ConfigChannel+0x204>)
 8001f3e:	400b      	ands	r3, r1
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e009      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f48:	2220      	movs	r2, #32
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001f50:	230f      	movs	r3, #15
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2234      	movs	r2, #52	@ 0x34
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f60:	230f      	movs	r3, #15
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	781b      	ldrb	r3, [r3, #0]
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b004      	add	sp, #16
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	00001001 	.word	0x00001001
 8001f74:	40012708 	.word	0x40012708
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	000f4240 	.word	0x000f4240
 8001f80:	ffbfffff 	.word	0xffbfffff
 8001f84:	feffffff 	.word	0xfeffffff
 8001f88:	ff7fffff 	.word	0xff7fffff

08001f8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d112      	bne.n	8001fd0 <ADC_Enable+0x44>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d009      	beq.n	8001fcc <ADC_Enable+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	2380      	movs	r3, #128	@ 0x80
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d101      	bne.n	8001fd0 <ADC_Enable+0x44>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <ADC_Enable+0x46>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d152      	bne.n	800207c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002088 <ADC_Enable+0xfc>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e03f      	b.n	800207e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2101      	movs	r1, #1
 800200a:	430a      	orrs	r2, r1
 800200c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800200e:	4b1f      	ldr	r3, [pc, #124]	@ (800208c <ADC_Enable+0x100>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	491f      	ldr	r1, [pc, #124]	@ (8002090 <ADC_Enable+0x104>)
 8002014:	0018      	movs	r0, r3
 8002016:	f7fe f877 	bl	8000108 <__udivsi3>
 800201a:	0003      	movs	r3, r0
 800201c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800201e:	e002      	b.n	8002026 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3b01      	subs	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800202c:	f7ff fc1e 	bl	800186c <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002034:	e01b      	b.n	800206e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002036:	f7ff fc19 	bl	800186c <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d914      	bls.n	800206e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	4013      	ands	r3, r2
 800204e:	2b01      	cmp	r3, #1
 8002050:	d00d      	beq.n	800206e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002056:	2210      	movs	r2, #16
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002062:	2201      	movs	r2, #1
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e007      	b.n	800207e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	4013      	ands	r3, r2
 8002078:	2b01      	cmp	r3, #1
 800207a:	d1dc      	bne.n	8002036 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b004      	add	sp, #16
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	80000017 	.word	0x80000017
 800208c:	20000000 	.word	0x20000000
 8002090:	000f4240 	.word	0x000f4240

08002094 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2203      	movs	r2, #3
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d112      	bne.n	80020d4 <ADC_Disable+0x40>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2201      	movs	r2, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d009      	beq.n	80020d0 <ADC_Disable+0x3c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	401a      	ands	r2, r3
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d101      	bne.n	80020d4 <ADC_Disable+0x40>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <ADC_Disable+0x42>
 80020d4:	2300      	movs	r3, #0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d048      	beq.n	800216c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2205      	movs	r2, #5
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d110      	bne.n	800210a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2102      	movs	r1, #2
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2203      	movs	r2, #3
 80020fe:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002100:	f7ff fbb4 	bl	800186c <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002108:	e029      	b.n	800215e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210e:	2210      	movs	r2, #16
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211a:	2201      	movs	r2, #1
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e023      	b.n	800216e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002126:	f7ff fba1 	bl	800186c <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d914      	bls.n	800215e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2201      	movs	r2, #1
 800213c:	4013      	ands	r3, r2
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10d      	bne.n	800215e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002146:	2210      	movs	r2, #16
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	2201      	movs	r2, #1
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e007      	b.n	800216e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	2b01      	cmp	r3, #1
 800216a:	d0dc      	beq.n	8002126 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}

08002176 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2204      	movs	r2, #4
 800218a:	4013      	ands	r3, r2
 800218c:	d03a      	beq.n	8002204 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	2b04      	cmp	r3, #4
 800219a:	d10d      	bne.n	80021b8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80021a6:	d107      	bne.n	80021b8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2110      	movs	r1, #16
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021b8:	f7ff fb58 	bl	800186c <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80021c0:	e01a      	b.n	80021f8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021c2:	f7ff fb53 	bl	800186c <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d913      	bls.n	80021f8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2204      	movs	r2, #4
 80021d8:	4013      	ands	r3, r2
 80021da:	d00d      	beq.n	80021f8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e0:	2210      	movs	r2, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	2201      	movs	r2, #1
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e006      	b.n	8002206 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2204      	movs	r2, #4
 8002200:	4013      	ands	r3, r2
 8002202:	d1de      	bne.n	80021c2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	0002      	movs	r2, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b7f      	cmp	r3, #127	@ 0x7f
 8002224:	d828      	bhi.n	8002278 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002226:	4a2f      	ldr	r2, [pc, #188]	@ (80022e4 <__NVIC_SetPriority+0xd4>)
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	b25b      	sxtb	r3, r3
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	33c0      	adds	r3, #192	@ 0xc0
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	589b      	ldr	r3, [r3, r2]
 8002236:	1dfa      	adds	r2, r7, #7
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	0011      	movs	r1, r2
 800223c:	2203      	movs	r2, #3
 800223e:	400a      	ands	r2, r1
 8002240:	00d2      	lsls	r2, r2, #3
 8002242:	21ff      	movs	r1, #255	@ 0xff
 8002244:	4091      	lsls	r1, r2
 8002246:	000a      	movs	r2, r1
 8002248:	43d2      	mvns	r2, r2
 800224a:	401a      	ands	r2, r3
 800224c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	22ff      	movs	r2, #255	@ 0xff
 8002254:	401a      	ands	r2, r3
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	0018      	movs	r0, r3
 800225c:	2303      	movs	r3, #3
 800225e:	4003      	ands	r3, r0
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002264:	481f      	ldr	r0, [pc, #124]	@ (80022e4 <__NVIC_SetPriority+0xd4>)
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b25b      	sxtb	r3, r3
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	430a      	orrs	r2, r1
 8002270:	33c0      	adds	r3, #192	@ 0xc0
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002276:	e031      	b.n	80022dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002278:	4a1b      	ldr	r2, [pc, #108]	@ (80022e8 <__NVIC_SetPriority+0xd8>)
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	0019      	movs	r1, r3
 8002280:	230f      	movs	r3, #15
 8002282:	400b      	ands	r3, r1
 8002284:	3b08      	subs	r3, #8
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3306      	adds	r3, #6
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	18d3      	adds	r3, r2, r3
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1dfa      	adds	r2, r7, #7
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	0011      	movs	r1, r2
 8002298:	2203      	movs	r2, #3
 800229a:	400a      	ands	r2, r1
 800229c:	00d2      	lsls	r2, r2, #3
 800229e:	21ff      	movs	r1, #255	@ 0xff
 80022a0:	4091      	lsls	r1, r2
 80022a2:	000a      	movs	r2, r1
 80022a4:	43d2      	mvns	r2, r2
 80022a6:	401a      	ands	r2, r3
 80022a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	22ff      	movs	r2, #255	@ 0xff
 80022b0:	401a      	ands	r2, r3
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	0018      	movs	r0, r3
 80022b8:	2303      	movs	r3, #3
 80022ba:	4003      	ands	r3, r0
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c0:	4809      	ldr	r0, [pc, #36]	@ (80022e8 <__NVIC_SetPriority+0xd8>)
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	001c      	movs	r4, r3
 80022c8:	230f      	movs	r3, #15
 80022ca:	4023      	ands	r3, r4
 80022cc:	3b08      	subs	r3, #8
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	430a      	orrs	r2, r1
 80022d2:	3306      	adds	r3, #6
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	18c3      	adds	r3, r0, r3
 80022d8:	3304      	adds	r3, #4
 80022da:	601a      	str	r2, [r3, #0]
}
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b003      	add	sp, #12
 80022e2:	bd90      	pop	{r4, r7, pc}
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	1e5a      	subs	r2, r3, #1
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	045b      	lsls	r3, r3, #17
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d301      	bcc.n	8002304 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002300:	2301      	movs	r3, #1
 8002302:	e010      	b.n	8002326 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <SysTick_Config+0x44>)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	3a01      	subs	r2, #1
 800230a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230c:	2301      	movs	r3, #1
 800230e:	425b      	negs	r3, r3
 8002310:	2103      	movs	r1, #3
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff ff7c 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <SysTick_Config+0x44>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <SysTick_Config+0x44>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	0018      	movs	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	b002      	add	sp, #8
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	210f      	movs	r1, #15
 8002340:	187b      	adds	r3, r7, r1
 8002342:	1c02      	adds	r2, r0, #0
 8002344:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	187b      	adds	r3, r7, r1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	b25b      	sxtb	r3, r3
 800234e:	0011      	movs	r1, r2
 8002350:	0018      	movs	r0, r3
 8002352:	f7ff ff5d 	bl	8002210 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b004      	add	sp, #16
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff ffbf 	bl	80022ec <SysTick_Config>
 800236e:	0003      	movs	r3, r0
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b002      	add	sp, #8
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002386:	e155      	b.n	8002634 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2101      	movs	r1, #1
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4091      	lsls	r1, r2
 8002392:	000a      	movs	r2, r1
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d100      	bne.n	80023a0 <HAL_GPIO_Init+0x28>
 800239e:	e146      	b.n	800262e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2203      	movs	r2, #3
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d005      	beq.n	80023b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d130      	bne.n	800241a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	409a      	lsls	r2, r3
 80023c6:	0013      	movs	r3, r2
 80023c8:	43da      	mvns	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	409a      	lsls	r2, r3
 80023da:	0013      	movs	r3, r2
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ee:	2201      	movs	r2, #1
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	43da      	mvns	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	2201      	movs	r2, #1
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2203      	movs	r2, #3
 8002420:	4013      	ands	r3, r2
 8002422:	2b03      	cmp	r3, #3
 8002424:	d017      	beq.n	8002456 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	409a      	lsls	r2, r3
 8002434:	0013      	movs	r3, r2
 8002436:	43da      	mvns	r2, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	409a      	lsls	r2, r3
 8002448:	0013      	movs	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	4013      	ands	r3, r2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d123      	bne.n	80024aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	08da      	lsrs	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3208      	adds	r2, #8
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	58d3      	ldr	r3, [r2, r3]
 800246e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2207      	movs	r2, #7
 8002474:	4013      	ands	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	220f      	movs	r2, #15
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	43da      	mvns	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2107      	movs	r1, #7
 800248e:	400b      	ands	r3, r1
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	409a      	lsls	r2, r3
 8002494:	0013      	movs	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	08da      	lsrs	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3208      	adds	r2, #8
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	6939      	ldr	r1, [r7, #16]
 80024a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	409a      	lsls	r2, r3
 80024b8:	0013      	movs	r3, r2
 80024ba:	43da      	mvns	r2, r3
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2203      	movs	r2, #3
 80024c8:	401a      	ands	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	409a      	lsls	r2, r3
 80024d0:	0013      	movs	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	23c0      	movs	r3, #192	@ 0xc0
 80024e4:	029b      	lsls	r3, r3, #10
 80024e6:	4013      	ands	r3, r2
 80024e8:	d100      	bne.n	80024ec <HAL_GPIO_Init+0x174>
 80024ea:	e0a0      	b.n	800262e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ec:	4b57      	ldr	r3, [pc, #348]	@ (800264c <HAL_GPIO_Init+0x2d4>)
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	4b56      	ldr	r3, [pc, #344]	@ (800264c <HAL_GPIO_Init+0x2d4>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	430a      	orrs	r2, r1
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_GPIO_Init+0x2d4>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002504:	4a52      	ldr	r2, [pc, #328]	@ (8002650 <HAL_GPIO_Init+0x2d8>)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3302      	adds	r3, #2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	589b      	ldr	r3, [r3, r2]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2203      	movs	r2, #3
 8002516:	4013      	ands	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	43da      	mvns	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	2390      	movs	r3, #144	@ 0x90
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	429a      	cmp	r2, r3
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x1ee>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a47      	ldr	r2, [pc, #284]	@ (8002654 <HAL_GPIO_Init+0x2dc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x1ea>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a46      	ldr	r2, [pc, #280]	@ (8002658 <HAL_GPIO_Init+0x2e0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x1e6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a45      	ldr	r2, [pc, #276]	@ (800265c <HAL_GPIO_Init+0x2e4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x1e2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a44      	ldr	r2, [pc, #272]	@ (8002660 <HAL_GPIO_Init+0x2e8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x1de>
 8002552:	2304      	movs	r3, #4
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x1f0>
 8002556:	2305      	movs	r3, #5
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x1f0>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x1f0>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x1f0>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x1f0>
 8002566:	2300      	movs	r3, #0
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	2103      	movs	r1, #3
 800256c:	400a      	ands	r2, r1
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	@ (8002650 <HAL_GPIO_Init+0x2d8>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b37      	ldr	r3, [pc, #220]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43da      	mvns	r2, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	035b      	lsls	r3, r3, #13
 800259e:	4013      	ands	r3, r2
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80025b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	4013      	ands	r3, r2
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025d4:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80025da:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43da      	mvns	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	029b      	lsls	r3, r3, #10
 80025f2:	4013      	ands	r3, r2
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002604:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	43da      	mvns	r2, r3
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	4013      	ands	r3, r2
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002628:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	40da      	lsrs	r2, r3
 800263c:	1e13      	subs	r3, r2, #0
 800263e:	d000      	beq.n	8002642 <HAL_GPIO_Init+0x2ca>
 8002640:	e6a2      	b.n	8002388 <HAL_GPIO_Init+0x10>
  } 
}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	46c0      	nop			@ (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b006      	add	sp, #24
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	40010000 	.word	0x40010000
 8002654:	48000400 	.word	0x48000400
 8002658:	48000800 	.word	0x48000800
 800265c:	48000c00 	.word	0x48000c00
 8002660:	48001000 	.word	0x48001000
 8002664:	40010400 	.word	0x40010400

08002668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	0008      	movs	r0, r1
 8002672:	0011      	movs	r1, r2
 8002674:	1cbb      	adds	r3, r7, #2
 8002676:	1c02      	adds	r2, r0, #0
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	1c7b      	adds	r3, r7, #1
 800267c:	1c0a      	adds	r2, r1, #0
 800267e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002680:	1c7b      	adds	r3, r7, #1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002688:	1cbb      	adds	r3, r7, #2
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002690:	e003      	b.n	800269a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002692:	1cbb      	adds	r3, r7, #2
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e08f      	b.n	80027d6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2241      	movs	r2, #65	@ 0x41
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2240      	movs	r2, #64	@ 0x40
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7fe fed1 	bl	8001474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2241      	movs	r2, #65	@ 0x41
 80026d6:	2124      	movs	r1, #36	@ 0x24
 80026d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	438a      	bics	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	493b      	ldr	r1, [pc, #236]	@ (80027e0 <HAL_I2C_Init+0x13c>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4938      	ldr	r1, [pc, #224]	@ (80027e4 <HAL_I2C_Init+0x140>)
 8002704:	400a      	ands	r2, r1
 8002706:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d108      	bne.n	8002722 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2180      	movs	r1, #128	@ 0x80
 800271a:	0209      	lsls	r1, r1, #8
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	e007      	b.n	8002732 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2184      	movs	r1, #132	@ 0x84
 800272c:	0209      	lsls	r1, r1, #8
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d109      	bne.n	800274e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2180      	movs	r1, #128	@ 0x80
 8002746:	0109      	lsls	r1, r1, #4
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	e007      	b.n	800275e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4923      	ldr	r1, [pc, #140]	@ (80027e8 <HAL_I2C_Init+0x144>)
 800275a:	400a      	ands	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4920      	ldr	r1, [pc, #128]	@ (80027ec <HAL_I2C_Init+0x148>)
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	491a      	ldr	r1, [pc, #104]	@ (80027e4 <HAL_I2C_Init+0x140>)
 800277a:	400a      	ands	r2, r1
 800277c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	431a      	orrs	r2, r3
 8002788:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69d9      	ldr	r1, [r3, #28]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1a      	ldr	r2, [r3, #32]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2241      	movs	r2, #65	@ 0x41
 80027c2:	2120      	movs	r1, #32
 80027c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2242      	movs	r2, #66	@ 0x42
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	f0ffffff 	.word	0xf0ffffff
 80027e4:	ffff7fff 	.word	0xffff7fff
 80027e8:	fffff7ff 	.word	0xfffff7ff
 80027ec:	02008000 	.word	0x02008000

080027f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2241      	movs	r2, #65	@ 0x41
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b20      	cmp	r3, #32
 8002804:	d138      	bne.n	8002878 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2240      	movs	r2, #64	@ 0x40
 800280a:	5c9b      	ldrb	r3, [r3, r2]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002810:	2302      	movs	r3, #2
 8002812:	e032      	b.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2240      	movs	r2, #64	@ 0x40
 8002818:	2101      	movs	r1, #1
 800281a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2241      	movs	r2, #65	@ 0x41
 8002820:	2124      	movs	r1, #36	@ 0x24
 8002822:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	438a      	bics	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4911      	ldr	r1, [pc, #68]	@ (8002884 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002840:	400a      	ands	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2101      	movs	r1, #1
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2241      	movs	r2, #65	@ 0x41
 8002868:	2120      	movs	r1, #32
 800286a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2240      	movs	r2, #64	@ 0x40
 8002870:	2100      	movs	r1, #0
 8002872:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b002      	add	sp, #8
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	ffffefff 	.word	0xffffefff

08002888 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2241      	movs	r2, #65	@ 0x41
 8002896:	5c9b      	ldrb	r3, [r3, r2]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	d139      	bne.n	8002912 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2240      	movs	r2, #64	@ 0x40
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e033      	b.n	8002914 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	@ 0x40
 80028b0:	2101      	movs	r1, #1
 80028b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2241      	movs	r2, #65	@ 0x41
 80028b8:	2124      	movs	r1, #36	@ 0x24
 80028ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2101      	movs	r1, #1
 80028c8:	438a      	bics	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a11      	ldr	r2, [pc, #68]	@ (800291c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80028d8:	4013      	ands	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2241      	movs	r2, #65	@ 0x41
 8002902:	2120      	movs	r1, #32
 8002904:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2240      	movs	r2, #64	@ 0x40
 800290a:	2100      	movs	r1, #0
 800290c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b004      	add	sp, #16
 800291a:	bd80      	pop	{r7, pc}
 800291c:	fffff0ff 	.word	0xfffff0ff

08002920 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0e4      	b.n	8002afc <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a73      	ldr	r2, [pc, #460]	@ (8002b04 <HAL_PCD_Init+0x1e4>)
 8002936:	5c9b      	ldrb	r3, [r3, r2]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	23a4      	movs	r3, #164	@ 0xa4
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	2100      	movs	r1, #0
 8002946:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	0018      	movs	r0, r3
 800294c:	f7fe fecc 	bl	80016e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a6c      	ldr	r2, [pc, #432]	@ (8002b04 <HAL_PCD_Init+0x1e4>)
 8002954:	2103      	movs	r1, #3
 8002956:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0018      	movs	r0, r3
 800295e:	f001 f82b 	bl	80039b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002962:	230f      	movs	r3, #15
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e047      	b.n	80029fc <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800296c:	200f      	movs	r0, #15
 800296e:	183b      	adds	r3, r7, r0
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	0013      	movs	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	189b      	adds	r3, r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	18cb      	adds	r3, r1, r3
 800297e:	3311      	adds	r3, #17
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002984:	183b      	adds	r3, r7, r0
 8002986:	781a      	ldrb	r2, [r3, #0]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	0013      	movs	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	189b      	adds	r3, r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	18cb      	adds	r3, r1, r3
 8002994:	3310      	adds	r3, #16
 8002996:	183a      	adds	r2, r7, r0
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800299c:	183b      	adds	r3, r7, r0
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	0013      	movs	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	18cb      	adds	r3, r1, r3
 80029ac:	3313      	adds	r3, #19
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029b2:	183b      	adds	r3, r7, r0
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	0013      	movs	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	189b      	adds	r3, r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	18cb      	adds	r3, r1, r3
 80029c2:	3320      	adds	r3, #32
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029c8:	183b      	adds	r3, r7, r0
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	0013      	movs	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	189b      	adds	r3, r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	18cb      	adds	r3, r1, r3
 80029d8:	3324      	adds	r3, #36	@ 0x24
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029de:	183b      	adds	r3, r7, r0
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	0013      	movs	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	189b      	adds	r3, r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	2200      	movs	r2, #0
 80029f0:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f2:	183b      	adds	r3, r7, r0
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	183b      	adds	r3, r7, r0
 80029f8:	3201      	adds	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	791b      	ldrb	r3, [r3, #4]
 8002a00:	210f      	movs	r1, #15
 8002a02:	187a      	adds	r2, r7, r1
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d3b0      	bcc.n	800296c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e056      	b.n	8002ac0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a12:	240f      	movs	r4, #15
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	2352      	movs	r3, #82	@ 0x52
 8002a1c:	33ff      	adds	r3, #255	@ 0xff
 8002a1e:	0019      	movs	r1, r3
 8002a20:	0013      	movs	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	189b      	adds	r3, r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	18c3      	adds	r3, r0, r3
 8002a2a:	185b      	adds	r3, r3, r1
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	23a8      	movs	r3, #168	@ 0xa8
 8002a38:	0059      	lsls	r1, r3, #1
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	189b      	adds	r3, r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	18c3      	adds	r3, r0, r3
 8002a44:	185b      	adds	r3, r3, r1
 8002a46:	193a      	adds	r2, r7, r4
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a4c:	193b      	adds	r3, r7, r4
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	2354      	movs	r3, #84	@ 0x54
 8002a54:	33ff      	adds	r3, #255	@ 0xff
 8002a56:	0019      	movs	r1, r3
 8002a58:	0013      	movs	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	18c3      	adds	r3, r0, r3
 8002a62:	185b      	adds	r3, r3, r1
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	23b0      	movs	r3, #176	@ 0xb0
 8002a70:	0059      	lsls	r1, r3, #1
 8002a72:	0013      	movs	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	189b      	adds	r3, r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	18c3      	adds	r3, r0, r3
 8002a7c:	185b      	adds	r3, r3, r1
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	23b2      	movs	r3, #178	@ 0xb2
 8002a8a:	0059      	lsls	r1, r3, #1
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	189b      	adds	r3, r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	18c3      	adds	r3, r0, r3
 8002a96:	185b      	adds	r3, r3, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	23b4      	movs	r3, #180	@ 0xb4
 8002aa4:	0059      	lsls	r1, r3, #1
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	18c3      	adds	r3, r0, r3
 8002ab0:	185b      	adds	r3, r3, r1
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	3201      	adds	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	791b      	ldrb	r3, [r3, #4]
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	18ba      	adds	r2, r7, r2
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d3a1      	bcc.n	8002a12 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	f000 ff88 	bl	80039ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <HAL_PCD_Init+0x1e4>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7a9b      	ldrb	r3, [r3, #10]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d103      	bne.n	8002afa <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 f807 	bl	8002b08 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b005      	add	sp, #20
 8002b02:	bd90      	pop	{r4, r7, pc}
 8002b04:	00000291 	.word	0x00000291

08002b08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	23b4      	movs	r3, #180	@ 0xb4
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	23b2      	movs	r3, #178	@ 0xb2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	2100      	movs	r1, #0
 8002b28:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2254      	movs	r2, #84	@ 0x54
 8002b2e:	5a9b      	ldrh	r3, [r3, r2]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2201      	movs	r2, #1
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b299      	uxth	r1, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2254      	movs	r2, #84	@ 0x54
 8002b3c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2254      	movs	r2, #84	@ 0x54
 8002b42:	5a9b      	ldrh	r3, [r3, r2]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2202      	movs	r2, #2
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	b299      	uxth	r1, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2254      	movs	r2, #84	@ 0x54
 8002b50:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f000 fb76 	bl	800325c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2201      	movs	r2, #1
 8002b76:	4013      	ands	r3, r2
 8002b78:	d100      	bne.n	8002b7c <HAL_RCC_OscConfig+0x20>
 8002b7a:	e08e      	b.n	8002c9a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b7c:	4bc5      	ldr	r3, [pc, #788]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	220c      	movs	r2, #12
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d00e      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b88:	4bc2      	ldr	r3, [pc, #776]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	220c      	movs	r2, #12
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d117      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x68>
 8002b94:	4bbf      	ldr	r3, [pc, #764]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	23c0      	movs	r3, #192	@ 0xc0
 8002b9a:	025b      	lsls	r3, r3, #9
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	025b      	lsls	r3, r3, #9
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	4bbb      	ldr	r3, [pc, #748]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	029b      	lsls	r3, r3, #10
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d100      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x58>
 8002bb2:	e071      	b.n	8002c98 <HAL_RCC_OscConfig+0x13c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d000      	beq.n	8002bbe <HAL_RCC_OscConfig+0x62>
 8002bbc:	e06c      	b.n	8002c98 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f000 fb4c 	bl	800325c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x80>
 8002bcc:	4bb1      	ldr	r3, [pc, #708]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4bb0      	ldr	r3, [pc, #704]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e02f      	b.n	8002c3c <HAL_RCC_OscConfig+0xe0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10c      	bne.n	8002bfe <HAL_RCC_OscConfig+0xa2>
 8002be4:	4bab      	ldr	r3, [pc, #684]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4baa      	ldr	r3, [pc, #680]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002bea:	49ab      	ldr	r1, [pc, #684]	@ (8002e98 <HAL_RCC_OscConfig+0x33c>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	4ba8      	ldr	r3, [pc, #672]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4ba7      	ldr	r3, [pc, #668]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002bf6:	49a9      	ldr	r1, [pc, #676]	@ (8002e9c <HAL_RCC_OscConfig+0x340>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e01e      	b.n	8002c3c <HAL_RCC_OscConfig+0xe0>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d10e      	bne.n	8002c24 <HAL_RCC_OscConfig+0xc8>
 8002c06:	4ba3      	ldr	r3, [pc, #652]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4ba2      	ldr	r3, [pc, #648]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c0c:	2180      	movs	r1, #128	@ 0x80
 8002c0e:	02c9      	lsls	r1, r1, #11
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	4b9f      	ldr	r3, [pc, #636]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b9e      	ldr	r3, [pc, #632]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c1a:	2180      	movs	r1, #128	@ 0x80
 8002c1c:	0249      	lsls	r1, r1, #9
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0xe0>
 8002c24:	4b9b      	ldr	r3, [pc, #620]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b9a      	ldr	r3, [pc, #616]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c2a:	499b      	ldr	r1, [pc, #620]	@ (8002e98 <HAL_RCC_OscConfig+0x33c>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	4b98      	ldr	r3, [pc, #608]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b97      	ldr	r3, [pc, #604]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c36:	4999      	ldr	r1, [pc, #612]	@ (8002e9c <HAL_RCC_OscConfig+0x340>)
 8002c38:	400a      	ands	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d014      	beq.n	8002c6e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fe12 	bl	800186c <HAL_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4e:	f7fe fe0d 	bl	800186c <HAL_GetTick>
 8002c52:	0002      	movs	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b64      	cmp	r3, #100	@ 0x64
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e2fd      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c60:	4b8c      	ldr	r3, [pc, #560]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	029b      	lsls	r3, r3, #10
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0xf2>
 8002c6c:	e015      	b.n	8002c9a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fdfd 	bl	800186c <HAL_GetTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fdf8 	bl	800186c <HAL_GetTick>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	@ 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e2e8      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	4b82      	ldr	r3, [pc, #520]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	029b      	lsls	r3, r3, #10
 8002c92:	4013      	ands	r3, r2
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x11c>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x14a>
 8002ca4:	e06c      	b.n	8002d80 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	220c      	movs	r2, #12
 8002cac:	4013      	ands	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cb0:	4b78      	ldr	r3, [pc, #480]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	220c      	movs	r2, #12
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d11f      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1a0>
 8002cbc:	4b75      	ldr	r3, [pc, #468]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	23c0      	movs	r3, #192	@ 0xc0
 8002cc2:	025b      	lsls	r3, r3, #9
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	2380      	movs	r3, #128	@ 0x80
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d116      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	4b71      	ldr	r3, [pc, #452]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x188>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e2bb      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b6b      	ldr	r3, [pc, #428]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	22f8      	movs	r2, #248	@ 0xf8
 8002cea:	4393      	bics	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00da      	lsls	r2, r3, #3
 8002cf4:	4b67      	ldr	r3, [pc, #412]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	e041      	b.n	8002d80 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d024      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d04:	4b63      	ldr	r3, [pc, #396]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b62      	ldr	r3, [pc, #392]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe fdac 	bl	800186c <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe fda7 	bl	800186c <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e297      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	4b59      	ldr	r3, [pc, #356]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2202      	movs	r2, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	d0f1      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	4b57      	ldr	r3, [pc, #348]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	22f8      	movs	r2, #248	@ 0xf8
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	00da      	lsls	r2, r3, #3
 8002d46:	4b53      	ldr	r3, [pc, #332]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e018      	b.n	8002d80 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b51      	ldr	r3, [pc, #324]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b50      	ldr	r3, [pc, #320]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d54:	2101      	movs	r1, #1
 8002d56:	438a      	bics	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe fd87 	bl	800186c <HAL_GetTick>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d64:	f7fe fd82 	bl	800186c <HAL_GetTick>
 8002d68:	0002      	movs	r2, r0
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e272      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	4b47      	ldr	r3, [pc, #284]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d1f1      	bne.n	8002d64 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2208      	movs	r2, #8
 8002d86:	4013      	ands	r3, r2
 8002d88:	d036      	beq.n	8002df8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d019      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d96:	4b3f      	ldr	r3, [pc, #252]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d98:	2101      	movs	r1, #1
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fd65 	bl	800186c <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da8:	f7fe fd60 	bl	800186c <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e250      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	4b36      	ldr	r3, [pc, #216]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d0f1      	beq.n	8002da8 <HAL_RCC_OscConfig+0x24c>
 8002dc4:	e018      	b.n	8002df8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc6:	4b33      	ldr	r3, [pc, #204]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002dc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dca:	4b32      	ldr	r3, [pc, #200]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	438a      	bics	r2, r1
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fd4b 	bl	800186c <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe fd46 	bl	800186c <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e236      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dee:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	d1f1      	bne.n	8002ddc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d100      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2a8>
 8002e02:	e0b5      	b.n	8002f70 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e04:	201f      	movs	r0, #31
 8002e06:	183b      	adds	r3, r7, r0
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0c:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	055b      	lsls	r3, r3, #21
 8002e14:	4013      	ands	r3, r2
 8002e16:	d110      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	0549      	lsls	r1, r1, #21
 8002e22:	430a      	orrs	r2, r1
 8002e24:	61da      	str	r2, [r3, #28]
 8002e26:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	055b      	lsls	r3, r3, #21
 8002e2e:	4013      	ands	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e34:	183b      	adds	r3, r7, r0
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <HAL_RCC_OscConfig+0x344>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	d11a      	bne.n	8002e7c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e46:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <HAL_RCC_OscConfig+0x344>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <HAL_RCC_OscConfig+0x344>)
 8002e4c:	2180      	movs	r1, #128	@ 0x80
 8002e4e:	0049      	lsls	r1, r1, #1
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e54:	f7fe fd0a 	bl	800186c <HAL_GetTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7fe fd05 	bl	800186c <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b64      	cmp	r3, #100	@ 0x64
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e1f5      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <HAL_RCC_OscConfig+0x344>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	2380      	movs	r3, #128	@ 0x80
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10f      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x348>
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	4b02      	ldr	r3, [pc, #8]	@ (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	621a      	str	r2, [r3, #32]
 8002e90:	e036      	b.n	8002f00 <HAL_RCC_OscConfig+0x3a4>
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	40021000 	.word	0x40021000
 8002e98:	fffeffff 	.word	0xfffeffff
 8002e9c:	fffbffff 	.word	0xfffbffff
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x36a>
 8002eac:	4bca      	ldr	r3, [pc, #808]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	4bc9      	ldr	r3, [pc, #804]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	621a      	str	r2, [r3, #32]
 8002eb8:	4bc7      	ldr	r3, [pc, #796]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	4bc6      	ldr	r3, [pc, #792]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	438a      	bics	r2, r1
 8002ec2:	621a      	str	r2, [r3, #32]
 8002ec4:	e01c      	b.n	8002f00 <HAL_RCC_OscConfig+0x3a4>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x38c>
 8002ece:	4bc2      	ldr	r3, [pc, #776]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002ed0:	6a1a      	ldr	r2, [r3, #32]
 8002ed2:	4bc1      	ldr	r3, [pc, #772]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	621a      	str	r2, [r3, #32]
 8002eda:	4bbf      	ldr	r3, [pc, #764]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	4bbe      	ldr	r3, [pc, #760]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	621a      	str	r2, [r3, #32]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0x3a4>
 8002ee8:	4bbb      	ldr	r3, [pc, #748]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	4bba      	ldr	r3, [pc, #744]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002eee:	2101      	movs	r1, #1
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	621a      	str	r2, [r3, #32]
 8002ef4:	4bb8      	ldr	r3, [pc, #736]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002ef6:	6a1a      	ldr	r2, [r3, #32]
 8002ef8:	4bb7      	ldr	r3, [pc, #732]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002efa:	2104      	movs	r1, #4
 8002efc:	438a      	bics	r2, r1
 8002efe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d014      	beq.n	8002f32 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7fe fcb0 	bl	800186c <HAL_GetTick>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e009      	b.n	8002f26 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe fcab 	bl	800186c <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	4aaf      	ldr	r2, [pc, #700]	@ (80031dc <HAL_RCC_OscConfig+0x680>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e19a      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f26:	4bac      	ldr	r3, [pc, #688]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x3b6>
 8002f30:	e013      	b.n	8002f5a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f32:	f7fe fc9b 	bl	800186c <HAL_GetTick>
 8002f36:	0003      	movs	r3, r0
 8002f38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3a:	e009      	b.n	8002f50 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fc96 	bl	800186c <HAL_GetTick>
 8002f40:	0002      	movs	r2, r0
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	4aa5      	ldr	r2, [pc, #660]	@ (80031dc <HAL_RCC_OscConfig+0x680>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e185      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f50:	4ba1      	ldr	r3, [pc, #644]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	2202      	movs	r2, #2
 8002f56:	4013      	ands	r3, r2
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f5a:	231f      	movs	r3, #31
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b9c      	ldr	r3, [pc, #624]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	4b9b      	ldr	r3, [pc, #620]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002f6a:	499d      	ldr	r1, [pc, #628]	@ (80031e0 <HAL_RCC_OscConfig+0x684>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2210      	movs	r2, #16
 8002f76:	4013      	ands	r3, r2
 8002f78:	d063      	beq.n	8003042 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d12a      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f82:	4b95      	ldr	r3, [pc, #596]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f86:	4b94      	ldr	r3, [pc, #592]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002f88:	2104      	movs	r1, #4
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002f8e:	4b92      	ldr	r3, [pc, #584]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f92:	4b91      	ldr	r3, [pc, #580]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002f94:	2101      	movs	r1, #1
 8002f96:	430a      	orrs	r2, r1
 8002f98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fc67 	bl	800186c <HAL_GetTick>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fa4:	f7fe fc62 	bl	800186c <HAL_GetTick>
 8002fa8:	0002      	movs	r2, r0
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e152      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fb6:	4b88      	ldr	r3, [pc, #544]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fba:	2202      	movs	r2, #2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d0f1      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002fc0:	4b85      	ldr	r3, [pc, #532]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc4:	22f8      	movs	r2, #248	@ 0xf8
 8002fc6:	4393      	bics	r3, r2
 8002fc8:	0019      	movs	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	00da      	lsls	r2, r3, #3
 8002fd0:	4b81      	ldr	r3, [pc, #516]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fd6:	e034      	b.n	8003042 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	3305      	adds	r3, #5
 8002fde:	d111      	bne.n	8003004 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002fe0:	4b7d      	ldr	r3, [pc, #500]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002fe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe4:	4b7c      	ldr	r3, [pc, #496]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	438a      	bics	r2, r1
 8002fea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002fec:	4b7a      	ldr	r3, [pc, #488]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff0:	22f8      	movs	r2, #248	@ 0xf8
 8002ff2:	4393      	bics	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	00da      	lsls	r2, r3, #3
 8002ffc:	4b76      	ldr	r3, [pc, #472]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	635a      	str	r2, [r3, #52]	@ 0x34
 8003002:	e01e      	b.n	8003042 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003004:	4b74      	ldr	r3, [pc, #464]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003008:	4b73      	ldr	r3, [pc, #460]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800300a:	2104      	movs	r1, #4
 800300c:	430a      	orrs	r2, r1
 800300e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003010:	4b71      	ldr	r3, [pc, #452]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003014:	4b70      	ldr	r3, [pc, #448]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003016:	2101      	movs	r1, #1
 8003018:	438a      	bics	r2, r1
 800301a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe fc26 	bl	800186c <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003026:	f7fe fc21 	bl	800186c <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e111      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003038:	4b67      	ldr	r3, [pc, #412]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800303a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d1f1      	bne.n	8003026 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2220      	movs	r2, #32
 8003048:	4013      	ands	r3, r2
 800304a:	d05c      	beq.n	8003106 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800304c:	4b62      	ldr	r3, [pc, #392]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	220c      	movs	r2, #12
 8003052:	4013      	ands	r3, r2
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d00e      	beq.n	8003076 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003058:	4b5f      	ldr	r3, [pc, #380]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	220c      	movs	r2, #12
 800305e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003060:	2b08      	cmp	r3, #8
 8003062:	d114      	bne.n	800308e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003064:	4b5c      	ldr	r3, [pc, #368]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	23c0      	movs	r3, #192	@ 0xc0
 800306a:	025b      	lsls	r3, r3, #9
 800306c:	401a      	ands	r2, r3
 800306e:	23c0      	movs	r3, #192	@ 0xc0
 8003070:	025b      	lsls	r3, r3, #9
 8003072:	429a      	cmp	r2, r3
 8003074:	d10b      	bne.n	800308e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003076:	4b58      	ldr	r3, [pc, #352]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	4013      	ands	r3, r2
 8003080:	d040      	beq.n	8003104 <HAL_RCC_OscConfig+0x5a8>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d03c      	beq.n	8003104 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0e6      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01b      	beq.n	80030ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003096:	4b50      	ldr	r3, [pc, #320]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800309a:	4b4f      	ldr	r3, [pc, #316]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800309c:	2180      	movs	r1, #128	@ 0x80
 800309e:	0249      	lsls	r1, r1, #9
 80030a0:	430a      	orrs	r2, r1
 80030a2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe fbe2 	bl	800186c <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ae:	f7fe fbdd 	bl	800186c <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0cd      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030c0:	4b45      	ldr	r3, [pc, #276]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 80030c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	029b      	lsls	r3, r3, #10
 80030c8:	4013      	ands	r3, r2
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x552>
 80030cc:	e01b      	b.n	8003106 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80030ce:	4b42      	ldr	r3, [pc, #264]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 80030d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030d2:	4b41      	ldr	r3, [pc, #260]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 80030d4:	4943      	ldr	r1, [pc, #268]	@ (80031e4 <HAL_RCC_OscConfig+0x688>)
 80030d6:	400a      	ands	r2, r1
 80030d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe fbc7 	bl	800186c <HAL_GetTick>
 80030de:	0003      	movs	r3, r0
 80030e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e4:	f7fe fbc2 	bl	800186c <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0b2      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80030f6:	4b38      	ldr	r3, [pc, #224]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 80030f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030fa:	2380      	movs	r3, #128	@ 0x80
 80030fc:	029b      	lsls	r3, r3, #10
 80030fe:	4013      	ands	r3, r2
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x588>
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003104:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d100      	bne.n	8003110 <HAL_RCC_OscConfig+0x5b4>
 800310e:	e0a4      	b.n	800325a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003110:	4b31      	ldr	r3, [pc, #196]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	220c      	movs	r2, #12
 8003116:	4013      	ands	r3, r2
 8003118:	2b08      	cmp	r3, #8
 800311a:	d100      	bne.n	800311e <HAL_RCC_OscConfig+0x5c2>
 800311c:	e078      	b.n	8003210 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	2b02      	cmp	r3, #2
 8003124:	d14c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b2c      	ldr	r3, [pc, #176]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b2b      	ldr	r3, [pc, #172]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800312c:	492e      	ldr	r1, [pc, #184]	@ (80031e8 <HAL_RCC_OscConfig+0x68c>)
 800312e:	400a      	ands	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fe fb9b 	bl	800186c <HAL_GetTick>
 8003136:	0003      	movs	r3, r0
 8003138:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fb96 	bl	800186c <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e086      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314e:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	049b      	lsls	r3, r3, #18
 8003156:	4013      	ands	r3, r2
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315a:	4b1f      	ldr	r3, [pc, #124]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	220f      	movs	r2, #15
 8003160:	4393      	bics	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800316a:	430a      	orrs	r2, r1
 800316c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800316e:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a1e      	ldr	r2, [pc, #120]	@ (80031ec <HAL_RCC_OscConfig+0x690>)
 8003174:	4013      	ands	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	431a      	orrs	r2, r3
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003188:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b12      	ldr	r3, [pc, #72]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 800318e:	2180      	movs	r1, #128	@ 0x80
 8003190:	0449      	lsls	r1, r1, #17
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe fb69 	bl	800186c <HAL_GetTick>
 800319a:	0003      	movs	r3, r0
 800319c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fb64 	bl	800186c <HAL_GetTick>
 80031a4:	0002      	movs	r2, r0
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e054      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b2:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	@ 0x80
 80031b8:	049b      	lsls	r3, r3, #18
 80031ba:	4013      	ands	r3, r2
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x644>
 80031be:	e04c      	b.n	800325a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <HAL_RCC_OscConfig+0x67c>)
 80031c6:	4908      	ldr	r1, [pc, #32]	@ (80031e8 <HAL_RCC_OscConfig+0x68c>)
 80031c8:	400a      	ands	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe fb4e 	bl	800186c <HAL_GetTick>
 80031d0:	0003      	movs	r3, r0
 80031d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d4:	e015      	b.n	8003202 <HAL_RCC_OscConfig+0x6a6>
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	40021000 	.word	0x40021000
 80031dc:	00001388 	.word	0x00001388
 80031e0:	efffffff 	.word	0xefffffff
 80031e4:	fffeffff 	.word	0xfffeffff
 80031e8:	feffffff 	.word	0xfeffffff
 80031ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fb3c 	bl	800186c <HAL_GetTick>
 80031f4:	0002      	movs	r2, r0
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e02c      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003202:	4b18      	ldr	r3, [pc, #96]	@ (8003264 <HAL_RCC_OscConfig+0x708>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	049b      	lsls	r3, r3, #18
 800320a:	4013      	ands	r3, r2
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x694>
 800320e:	e024      	b.n	800325a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e01f      	b.n	800325c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800321c:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <HAL_RCC_OscConfig+0x708>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <HAL_RCC_OscConfig+0x708>)
 8003224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003226:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	23c0      	movs	r3, #192	@ 0xc0
 800322c:	025b      	lsls	r3, r3, #9
 800322e:	401a      	ands	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003234:	429a      	cmp	r2, r3
 8003236:	d10e      	bne.n	8003256 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	220f      	movs	r2, #15
 800323c:	401a      	ands	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	23f0      	movs	r3, #240	@ 0xf0
 800324a:	039b      	lsls	r3, r3, #14
 800324c:	401a      	ands	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b008      	add	sp, #32
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000

08003268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0bf      	b.n	80033fc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b61      	ldr	r3, [pc, #388]	@ (8003404 <HAL_RCC_ClockConfig+0x19c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2201      	movs	r2, #1
 8003282:	4013      	ands	r3, r2
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d911      	bls.n	80032ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b5e      	ldr	r3, [pc, #376]	@ (8003404 <HAL_RCC_ClockConfig+0x19c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	4393      	bics	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	4b5b      	ldr	r3, [pc, #364]	@ (8003404 <HAL_RCC_ClockConfig+0x19c>)
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329c:	4b59      	ldr	r3, [pc, #356]	@ (8003404 <HAL_RCC_ClockConfig+0x19c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	4013      	ands	r3, r2
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0a6      	b.n	80033fc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2202      	movs	r2, #2
 80032b4:	4013      	ands	r3, r2
 80032b6:	d015      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2204      	movs	r2, #4
 80032be:	4013      	ands	r3, r2
 80032c0:	d006      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032c2:	4b51      	ldr	r3, [pc, #324]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4b50      	ldr	r3, [pc, #320]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 80032c8:	21e0      	movs	r1, #224	@ 0xe0
 80032ca:	00c9      	lsls	r1, r1, #3
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	22f0      	movs	r2, #240	@ 0xf0
 80032d6:	4393      	bics	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	4b4a      	ldr	r3, [pc, #296]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	d04c      	beq.n	8003388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b44      	ldr	r3, [pc, #272]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	029b      	lsls	r3, r3, #10
 80032fe:	4013      	ands	r3, r2
 8003300:	d120      	bne.n	8003344 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07a      	b.n	80033fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b3e      	ldr	r3, [pc, #248]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	049b      	lsls	r3, r3, #18
 8003316:	4013      	ands	r3, r2
 8003318:	d114      	bne.n	8003344 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06e      	b.n	80033fc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003326:	4b38      	ldr	r3, [pc, #224]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 8003328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	029b      	lsls	r3, r3, #10
 800332e:	4013      	ands	r3, r2
 8003330:	d108      	bne.n	8003344 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e062      	b.n	80033fc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003336:	4b34      	ldr	r3, [pc, #208]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2202      	movs	r2, #2
 800333c:	4013      	ands	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e05b      	b.n	80033fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003344:	4b30      	ldr	r3, [pc, #192]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2203      	movs	r2, #3
 800334a:	4393      	bics	r3, r2
 800334c:	0019      	movs	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4b2d      	ldr	r3, [pc, #180]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7fe fa88 	bl	800186c <HAL_GetTick>
 800335c:	0003      	movs	r3, r0
 800335e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003360:	e009      	b.n	8003376 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003362:	f7fe fa83 	bl	800186c <HAL_GetTick>
 8003366:	0002      	movs	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	4a27      	ldr	r2, [pc, #156]	@ (800340c <HAL_RCC_ClockConfig+0x1a4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e042      	b.n	80033fc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b24      	ldr	r3, [pc, #144]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	220c      	movs	r2, #12
 800337c:	401a      	ands	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d1ec      	bne.n	8003362 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b1e      	ldr	r3, [pc, #120]	@ (8003404 <HAL_RCC_ClockConfig+0x19c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2201      	movs	r2, #1
 800338e:	4013      	ands	r3, r2
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d211      	bcs.n	80033ba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_RCC_ClockConfig+0x19c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	4393      	bics	r3, r2
 800339e:	0019      	movs	r1, r3
 80033a0:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <HAL_RCC_ClockConfig+0x19c>)
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a8:	4b16      	ldr	r3, [pc, #88]	@ (8003404 <HAL_RCC_ClockConfig+0x19c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e020      	b.n	80033fc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2204      	movs	r2, #4
 80033c0:	4013      	ands	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a11      	ldr	r2, [pc, #68]	@ (8003410 <HAL_RCC_ClockConfig+0x1a8>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033d8:	f000 f820 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033dc:	0001      	movs	r1, r0
 80033de:	4b0a      	ldr	r3, [pc, #40]	@ (8003408 <HAL_RCC_ClockConfig+0x1a0>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	220f      	movs	r2, #15
 80033e6:	4013      	ands	r3, r2
 80033e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <HAL_RCC_ClockConfig+0x1ac>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	000a      	movs	r2, r1
 80033ee:	40da      	lsrs	r2, r3
 80033f0:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1b0>)
 80033f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80033f4:	2000      	movs	r0, #0
 80033f6:	f7fe f9f3 	bl	80017e0 <HAL_InitTick>
  
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b004      	add	sp, #16
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40022000 	.word	0x40022000
 8003408:	40021000 	.word	0x40021000
 800340c:	00001388 	.word	0x00001388
 8003410:	fffff8ff 	.word	0xfffff8ff
 8003414:	08003b10 	.word	0x08003b10
 8003418:	20000000 	.word	0x20000000

0800341c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003436:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	220c      	movs	r2, #12
 8003440:	4013      	ands	r3, r2
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d046      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xb8>
 8003446:	d848      	bhi.n	80034da <HAL_RCC_GetSysClockFreq+0xbe>
 8003448:	2b04      	cmp	r3, #4
 800344a:	d002      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x36>
 800344c:	2b08      	cmp	r3, #8
 800344e:	d003      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x3c>
 8003450:	e043      	b.n	80034da <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003452:	4b27      	ldr	r3, [pc, #156]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003454:	613b      	str	r3, [r7, #16]
      break;
 8003456:	e043      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	0c9b      	lsrs	r3, r3, #18
 800345c:	220f      	movs	r2, #15
 800345e:	4013      	ands	r3, r2
 8003460:	4a24      	ldr	r2, [pc, #144]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003466:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346a:	220f      	movs	r2, #15
 800346c:	4013      	ands	r3, r2
 800346e:	4a22      	ldr	r2, [pc, #136]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	23c0      	movs	r3, #192	@ 0xc0
 8003478:	025b      	lsls	r3, r3, #9
 800347a:	401a      	ands	r2, r3
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	025b      	lsls	r3, r3, #9
 8003480:	429a      	cmp	r2, r3
 8003482:	d109      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	481a      	ldr	r0, [pc, #104]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003488:	f7fc fe3e 	bl	8000108 <__udivsi3>
 800348c:	0003      	movs	r3, r0
 800348e:	001a      	movs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4353      	muls	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e01a      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	23c0      	movs	r3, #192	@ 0xc0
 800349c:	025b      	lsls	r3, r3, #9
 800349e:	401a      	ands	r2, r3
 80034a0:	23c0      	movs	r3, #192	@ 0xc0
 80034a2:	025b      	lsls	r3, r3, #9
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d109      	bne.n	80034bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4814      	ldr	r0, [pc, #80]	@ (80034fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80034ac:	f7fc fe2c 	bl	8000108 <__udivsi3>
 80034b0:	0003      	movs	r3, r0
 80034b2:	001a      	movs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4353      	muls	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e008      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	480c      	ldr	r0, [pc, #48]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80034c0:	f7fc fe22 	bl	8000108 <__udivsi3>
 80034c4:	0003      	movs	r3, r0
 80034c6:	001a      	movs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4353      	muls	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	613b      	str	r3, [r7, #16]
      break;
 80034d2:	e005      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80034d4:	4b09      	ldr	r3, [pc, #36]	@ (80034fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80034d6:	613b      	str	r3, [r7, #16]
      break;
 80034d8:	e002      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80034dc:	613b      	str	r3, [r7, #16]
      break;
 80034de:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034e0:	693b      	ldr	r3, [r7, #16]
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b006      	add	sp, #24
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	40021000 	.word	0x40021000
 80034f0:	007a1200 	.word	0x007a1200
 80034f4:	08003b20 	.word	0x08003b20
 80034f8:	08003b30 	.word	0x08003b30
 80034fc:	02dc6c00 	.word	0x02dc6c00

08003500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	025b      	lsls	r3, r3, #9
 8003518:	4013      	ands	r3, r2
 800351a:	d100      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800351c:	e08e      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800351e:	2017      	movs	r0, #23
 8003520:	183b      	adds	r3, r7, r0
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003526:	4b6e      	ldr	r3, [pc, #440]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	055b      	lsls	r3, r3, #21
 800352e:	4013      	ands	r3, r2
 8003530:	d110      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	4b6b      	ldr	r3, [pc, #428]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003538:	2180      	movs	r1, #128	@ 0x80
 800353a:	0549      	lsls	r1, r1, #21
 800353c:	430a      	orrs	r2, r1
 800353e:	61da      	str	r2, [r3, #28]
 8003540:	4b67      	ldr	r3, [pc, #412]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	2380      	movs	r3, #128	@ 0x80
 8003546:	055b      	lsls	r3, r3, #21
 8003548:	4013      	ands	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354e:	183b      	adds	r3, r7, r0
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	4b63      	ldr	r3, [pc, #396]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	2380      	movs	r3, #128	@ 0x80
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4013      	ands	r3, r2
 800355e:	d11a      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003560:	4b60      	ldr	r3, [pc, #384]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b5f      	ldr	r3, [pc, #380]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003566:	2180      	movs	r1, #128	@ 0x80
 8003568:	0049      	lsls	r1, r1, #1
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7fe f97d 	bl	800186c <HAL_GetTick>
 8003572:	0003      	movs	r3, r0
 8003574:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	e008      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003578:	f7fe f978 	bl	800186c <HAL_GetTick>
 800357c:	0002      	movs	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0a6      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358a:	4b56      	ldr	r3, [pc, #344]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	2380      	movs	r3, #128	@ 0x80
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4013      	ands	r3, r2
 8003594:	d0f0      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003596:	4b52      	ldr	r3, [pc, #328]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	23c0      	movs	r3, #192	@ 0xc0
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4013      	ands	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d034      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	23c0      	movs	r3, #192	@ 0xc0
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4013      	ands	r3, r2
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d02c      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035b8:	4b49      	ldr	r3, [pc, #292]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a4a      	ldr	r2, [pc, #296]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80035be:	4013      	ands	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035c2:	4b47      	ldr	r3, [pc, #284]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	4b46      	ldr	r3, [pc, #280]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035c8:	2180      	movs	r1, #128	@ 0x80
 80035ca:	0249      	lsls	r1, r1, #9
 80035cc:	430a      	orrs	r2, r1
 80035ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d0:	4b43      	ldr	r3, [pc, #268]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	4b42      	ldr	r3, [pc, #264]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035d6:	4945      	ldr	r1, [pc, #276]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80035d8:	400a      	ands	r2, r1
 80035da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035dc:	4b40      	ldr	r3, [pc, #256]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	4013      	ands	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fe f93f 	bl	800186c <HAL_GetTick>
 80035ee:	0003      	movs	r3, r0
 80035f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	e009      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fe f93a 	bl	800186c <HAL_GetTick>
 80035f8:	0002      	movs	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	4a3c      	ldr	r2, [pc, #240]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e067      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	4b35      	ldr	r3, [pc, #212]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	2202      	movs	r2, #2
 800360e:	4013      	ands	r3, r2
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003612:	4b33      	ldr	r3, [pc, #204]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	4a34      	ldr	r2, [pc, #208]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003618:	4013      	ands	r3, r2
 800361a:	0019      	movs	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4b2f      	ldr	r3, [pc, #188]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003622:	430a      	orrs	r2, r1
 8003624:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003626:	2317      	movs	r3, #23
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4b2b      	ldr	r3, [pc, #172]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	4b2a      	ldr	r3, [pc, #168]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003636:	492f      	ldr	r1, [pc, #188]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003638:	400a      	ands	r2, r1
 800363a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2201      	movs	r2, #1
 8003642:	4013      	ands	r3, r2
 8003644:	d009      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003646:	4b26      	ldr	r3, [pc, #152]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	2203      	movs	r2, #3
 800364c:	4393      	bics	r3, r2
 800364e:	0019      	movs	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	4b22      	ldr	r3, [pc, #136]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003656:	430a      	orrs	r2, r1
 8003658:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2202      	movs	r2, #2
 8003660:	4013      	ands	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003664:	4b1e      	ldr	r3, [pc, #120]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003668:	4a23      	ldr	r2, [pc, #140]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	4b1b      	ldr	r3, [pc, #108]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003674:	430a      	orrs	r2, r1
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2220      	movs	r2, #32
 800367e:	4013      	ands	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003682:	4b17      	ldr	r3, [pc, #92]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	2210      	movs	r2, #16
 8003688:	4393      	bics	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	4b13      	ldr	r3, [pc, #76]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003692:	430a      	orrs	r2, r1
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	2380      	movs	r3, #128	@ 0x80
 800369c:	029b      	lsls	r3, r3, #10
 800369e:	4013      	ands	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a2:	4b0f      	ldr	r3, [pc, #60]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	2280      	movs	r2, #128	@ 0x80
 80036a8:	4393      	bics	r3, r2
 80036aa:	0019      	movs	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036b2:	430a      	orrs	r2, r1
 80036b4:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	2380      	movs	r3, #128	@ 0x80
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4013      	ands	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036c2:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	2240      	movs	r2, #64	@ 0x40
 80036c8:	4393      	bics	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	4b03      	ldr	r3, [pc, #12]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036d2:	430a      	orrs	r2, r1
 80036d4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b006      	add	sp, #24
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	fffffcff 	.word	0xfffffcff
 80036ec:	fffeffff 	.word	0xfffeffff
 80036f0:	00001388 	.word	0x00001388
 80036f4:	efffffff 	.word	0xefffffff
 80036f8:	fffcffff 	.word	0xfffcffff

080036fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0a8      	b.n	8003860 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	2382      	movs	r3, #130	@ 0x82
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	429a      	cmp	r2, r3
 8003720:	d009      	beq.n	8003736 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	61da      	str	r2, [r3, #28]
 8003728:	e005      	b.n	8003736 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	225d      	movs	r2, #93	@ 0x5d
 8003740:	5c9b      	ldrb	r3, [r3, r2]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d107      	bne.n	8003758 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	225c      	movs	r2, #92	@ 0x5c
 800374c:	2100      	movs	r1, #0
 800374e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	0018      	movs	r0, r3
 8003754:	f7fd fedc 	bl	8001510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	225d      	movs	r2, #93	@ 0x5d
 800375c:	2102      	movs	r1, #2
 800375e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2140      	movs	r1, #64	@ 0x40
 800376c:	438a      	bics	r2, r1
 800376e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	23e0      	movs	r3, #224	@ 0xe0
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	429a      	cmp	r2, r3
 800377a:	d902      	bls.n	8003782 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e002      	b.n	8003788 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003782:	2380      	movs	r3, #128	@ 0x80
 8003784:	015b      	lsls	r3, r3, #5
 8003786:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	23f0      	movs	r3, #240	@ 0xf0
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	429a      	cmp	r2, r3
 8003792:	d008      	beq.n	80037a6 <HAL_SPI_Init+0xaa>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	23e0      	movs	r3, #224	@ 0xe0
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	429a      	cmp	r2, r3
 800379e:	d002      	beq.n	80037a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	2382      	movs	r3, #130	@ 0x82
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	401a      	ands	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6899      	ldr	r1, [r3, #8]
 80037b4:	2384      	movs	r3, #132	@ 0x84
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	400b      	ands	r3, r1
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2102      	movs	r1, #2
 80037c2:	400b      	ands	r3, r1
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2101      	movs	r1, #1
 80037cc:	400b      	ands	r3, r1
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6999      	ldr	r1, [r3, #24]
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	400b      	ands	r3, r1
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2138      	movs	r1, #56	@ 0x38
 80037e2:	400b      	ands	r3, r1
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	2180      	movs	r1, #128	@ 0x80
 80037ec:	400b      	ands	r3, r1
 80037ee:	431a      	orrs	r2, r3
 80037f0:	0011      	movs	r1, r2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037f6:	2380      	movs	r3, #128	@ 0x80
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	401a      	ands	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	2204      	movs	r2, #4
 800380c:	401a      	ands	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	2110      	movs	r1, #16
 8003814:	400b      	ands	r3, r1
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800381c:	2108      	movs	r1, #8
 800381e:	400b      	ands	r3, r1
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68d9      	ldr	r1, [r3, #12]
 8003826:	23f0      	movs	r3, #240	@ 0xf0
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	400b      	ands	r3, r1
 800382c:	431a      	orrs	r2, r3
 800382e:	0011      	movs	r1, r2
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	015b      	lsls	r3, r3, #5
 8003836:	401a      	ands	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4907      	ldr	r1, [pc, #28]	@ (8003868 <HAL_SPI_Init+0x16c>)
 800384c:	400a      	ands	r2, r1
 800384e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	225d      	movs	r2, #93	@ 0x5d
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b004      	add	sp, #16
 8003866:	bd80      	pop	{r7, pc}
 8003868:	fffff7ff 	.word	0xfffff7ff

0800386c <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e074      	b.n	8003968 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223c      	movs	r2, #60	@ 0x3c
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	223d      	movs	r2, #61	@ 0x3d
 800388e:	2100      	movs	r1, #0
 8003890:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fe89 	bl	80015ac <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	223c      	movs	r2, #60	@ 0x3c
 800389e:	2102      	movs	r1, #2
 80038a0:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80038b8:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 80038c0:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80038c6:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 80038cc:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 80038d2:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 80038d8:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 80038de:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7b1b      	ldrb	r3, [r3, #12]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d108      	bne.n	8003902 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2180      	movs	r1, #128	@ 0x80
 80038fc:	0249      	lsls	r1, r1, #9
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	43d2      	mvns	r2, r2
 8003918:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003932:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681c      	ldr	r4, [r3, #0]
 800393c:	0010      	movs	r0, r2
 800393e:	f000 f817 	bl	8003970 <TSC_extract_groups>
 8003942:	0003      	movs	r3, r0
 8003944:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2103      	movs	r1, #3
 8003952:	438a      	bics	r2, r1
 8003954:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2203      	movs	r2, #3
 800395c:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	223c      	movs	r2, #60	@ 0x3c
 8003962:	2101      	movs	r1, #1
 8003964:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b003      	add	sp, #12
 800396e:	bd90      	pop	{r4, r7, pc}

08003970 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	e011      	b.n	80039a6 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	409a      	lsls	r2, r3
 800398a:	0013      	movs	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4013      	ands	r3, r2
 8003990:	d006      	beq.n	80039a0 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8003992:	2201      	movs	r2, #1
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	409a      	lsls	r2, r3
 8003998:	0013      	movs	r3, r2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b07      	cmp	r3, #7
 80039aa:	d9ea      	bls.n	8003982 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80039ac:	68fb      	ldr	r3, [r7, #12]
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b004      	add	sp, #16
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <USB_DisableGlobalInt+0x30>)
 80039c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2240      	movs	r2, #64	@ 0x40
 80039c8:	5a9b      	ldrh	r3, [r3, r2]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	b292      	uxth	r2, r2
 80039d0:	43d2      	mvns	r2, r2
 80039d2:	b292      	uxth	r2, r2
 80039d4:	4013      	ands	r3, r2
 80039d6:	b299      	uxth	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2240      	movs	r2, #64	@ 0x40
 80039dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b004      	add	sp, #16
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	0000bf80 	.word	0x0000bf80

080039ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	6019      	str	r1, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2240      	movs	r2, #64	@ 0x40
 80039fe:	2101      	movs	r1, #1
 8003a00:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2240      	movs	r2, #64	@ 0x40
 8003a06:	2100      	movs	r1, #0
 8003a08:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2244      	movs	r2, #68	@ 0x44
 8003a0e:	2100      	movs	r1, #0
 8003a10:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2250      	movs	r2, #80	@ 0x50
 8003a16:	2100      	movs	r1, #0
 8003a18:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b004      	add	sp, #16
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <memset>:
 8003a24:	0003      	movs	r3, r0
 8003a26:	1882      	adds	r2, r0, r2
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d100      	bne.n	8003a2e <memset+0xa>
 8003a2c:	4770      	bx	lr
 8003a2e:	7019      	strb	r1, [r3, #0]
 8003a30:	3301      	adds	r3, #1
 8003a32:	e7f9      	b.n	8003a28 <memset+0x4>

08003a34 <__libc_init_array>:
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	2600      	movs	r6, #0
 8003a38:	4c0c      	ldr	r4, [pc, #48]	@ (8003a6c <__libc_init_array+0x38>)
 8003a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8003a70 <__libc_init_array+0x3c>)
 8003a3c:	1b64      	subs	r4, r4, r5
 8003a3e:	10a4      	asrs	r4, r4, #2
 8003a40:	42a6      	cmp	r6, r4
 8003a42:	d109      	bne.n	8003a58 <__libc_init_array+0x24>
 8003a44:	2600      	movs	r6, #0
 8003a46:	f000 f819 	bl	8003a7c <_init>
 8003a4a:	4c0a      	ldr	r4, [pc, #40]	@ (8003a74 <__libc_init_array+0x40>)
 8003a4c:	4d0a      	ldr	r5, [pc, #40]	@ (8003a78 <__libc_init_array+0x44>)
 8003a4e:	1b64      	subs	r4, r4, r5
 8003a50:	10a4      	asrs	r4, r4, #2
 8003a52:	42a6      	cmp	r6, r4
 8003a54:	d105      	bne.n	8003a62 <__libc_init_array+0x2e>
 8003a56:	bd70      	pop	{r4, r5, r6, pc}
 8003a58:	00b3      	lsls	r3, r6, #2
 8003a5a:	58eb      	ldr	r3, [r5, r3]
 8003a5c:	4798      	blx	r3
 8003a5e:	3601      	adds	r6, #1
 8003a60:	e7ee      	b.n	8003a40 <__libc_init_array+0xc>
 8003a62:	00b3      	lsls	r3, r6, #2
 8003a64:	58eb      	ldr	r3, [r5, r3]
 8003a66:	4798      	blx	r3
 8003a68:	3601      	adds	r6, #1
 8003a6a:	e7f2      	b.n	8003a52 <__libc_init_array+0x1e>
 8003a6c:	08003b40 	.word	0x08003b40
 8003a70:	08003b40 	.word	0x08003b40
 8003a74:	08003b44 	.word	0x08003b44
 8003a78:	08003b40 	.word	0x08003b40

08003a7c <_init>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr

08003a88 <_fini>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8e:	bc08      	pop	{r3}
 8003a90:	469e      	mov	lr, r3
 8003a92:	4770      	bx	lr
