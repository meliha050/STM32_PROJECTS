
uart_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b20  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003be0  08003be0  00004be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c20  08003c20  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c20  08003c20  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c20  08003c20  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c20  08003c20  00004c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c24  08003c24  00004c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c28  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  2000000c  08003c34  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08003c34  000054d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126fb  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b5  00000000  00000000  0001772f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdc  00000000  00000000  0001b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9e6  00000000  00000000  0001bbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001480f  00000000  00000000  000365e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000997aa  00000000  00000000  0004adf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e459b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  000e45e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e7c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bc8 	.word	0x08003bc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003bc8 	.word	0x08003bc8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fca4 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82e 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9ae 	bl	800058c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000230:	f000 f894 	bl	800035c <MX_I2C2_Init>
  MX_SPI2_Init();
 8000234:	f000 f8d2 	bl	80003dc <MX_SPI2_Init>
  MX_TSC_Init();
 8000238:	f000 f90e 	bl	8000458 <MX_TSC_Init>
  MX_USB_PCD_Init();
 800023c:	f000 f980 	bl	8000540 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000240:	f000 f94e 	bl	80004e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_UART_Receive_IT(&huart1, data_rx, 1);
 8000244:	490b      	ldr	r1, [pc, #44]	@ (8000274 <main+0x54>)
 8000246:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <main+0x58>)
 8000248:	2201      	movs	r2, #1
 800024a:	0018      	movs	r0, r3
 800024c:	f002 fa83 	bl	8002756 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */
	 // HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
	  // HAL_Delay(250);
	  if (uart1CallbackComplete){
 8000250:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <main+0x5c>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0fb      	beq.n	8000250 <main+0x30>
		  uart1CallbackComplete = false;
 8000258:	4b08      	ldr	r3, [pc, #32]	@ (800027c <main+0x5c>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
		  if (uart1MainBuf[uart1rxLen -1] == 103){
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <main+0x60>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	3b01      	subs	r3, #1
 8000264:	4a07      	ldr	r2, [pc, #28]	@ (8000284 <main+0x64>)
 8000266:	5cd3      	ldrb	r3, [r2, r3]
 8000268:	2b67      	cmp	r3, #103	@ 0x67
 800026a:	d1f1      	bne.n	8000250 <main+0x30>
			  SendPongMessage();
 800026c:	f000 fa0a 	bl	8000684 <SendPongMessage>
	  if (uart1CallbackComplete){
 8000270:	e7ee      	b.n	8000250 <main+0x30>
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	20000028 	.word	0x20000028
 8000278:	20000128 	.word	0x20000128
 800027c:	200004cd 	.word	0x200004cd
 8000280:	200004cc 	.word	0x200004cc
 8000284:	2000048c 	.word	0x2000048c

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b099      	sub	sp, #100	@ 0x64
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	242c      	movs	r4, #44	@ 0x2c
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	2334      	movs	r3, #52	@ 0x34
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f003 fc69 	bl	8003b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	231c      	movs	r3, #28
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	0018      	movs	r0, r3
 80002a4:	2310      	movs	r3, #16
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f003 fc61 	bl	8003b70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ae:	003b      	movs	r3, r7
 80002b0:	0018      	movs	r0, r3
 80002b2:	231c      	movs	r3, #28
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f003 fc5a 	bl	8003b70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80002bc:	0021      	movs	r1, r4
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2222      	movs	r2, #34	@ 0x22
 80002c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2201      	movs	r2, #1
 80002c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2201      	movs	r2, #1
 80002ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2210      	movs	r2, #16
 80002d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2280      	movs	r2, #128	@ 0x80
 80002e0:	0212      	lsls	r2, r2, #8
 80002e2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2280      	movs	r2, #128	@ 0x80
 80002e8:	0352      	lsls	r2, r2, #13
 80002ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 f9ed 	bl	80016d4 <HAL_RCC_OscConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002fe:	f000 fa07 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	211c      	movs	r1, #28
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2207      	movs	r2, #7
 8000308:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2202      	movs	r2, #2
 800030e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2101      	movs	r1, #1
 8000320:	0018      	movs	r0, r3
 8000322:	f001 fd5d 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800032a:	f000 f9f1 	bl	8000710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 800032e:	003b      	movs	r3, r7
 8000330:	4a09      	ldr	r2, [pc, #36]	@ (8000358 <SystemClock_Config+0xd0>)
 8000332:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000334:	003b      	movs	r3, r7
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800033a:	003b      	movs	r3, r7
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000340:	003b      	movs	r3, r7
 8000342:	0018      	movs	r0, r3
 8000344:	f001 feb8 	bl	80020b8 <HAL_RCCEx_PeriphCLKConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800034c:	f000 f9e0 	bl	8000710 <Error_Handler>
  }
}
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b019      	add	sp, #100	@ 0x64
 8000356:	bd90      	pop	{r4, r7, pc}
 8000358:	00020001 	.word	0x00020001

0800035c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <MX_I2C2_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	@ (80003d4 <MX_I2C2_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000366:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <MX_I2C2_Init+0x74>)
 8000368:	4a1b      	ldr	r2, [pc, #108]	@ (80003d8 <MX_I2C2_Init+0x7c>)
 800036a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800036c:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <MX_I2C2_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000372:	4b17      	ldr	r3, [pc, #92]	@ (80003d0 <MX_I2C2_Init+0x74>)
 8000374:	2201      	movs	r2, #1
 8000376:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000378:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <MX_I2C2_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800037e:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <MX_I2C2_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000384:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <MX_I2C2_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800038a:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_I2C2_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_I2C2_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_I2C2_Init+0x74>)
 8000398:	0018      	movs	r0, r3
 800039a:	f000 ff3f 	bl	800121c <HAL_I2C_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003a2:	f000 f9b5 	bl	8000710 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <MX_I2C2_Init+0x74>)
 80003a8:	2100      	movs	r1, #0
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 ffdc 	bl	8001368 <HAL_I2CEx_ConfigAnalogFilter>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003b4:	f000 f9ac 	bl	8000710 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003b8:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <MX_I2C2_Init+0x74>)
 80003ba:	2100      	movs	r1, #0
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 f81f 	bl	8001400 <HAL_I2CEx_ConfigDigitalFilter>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f9a3 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	2000002c 	.word	0x2000002c
 80003d4:	40005800 	.word	0x40005800
 80003d8:	20303e5d 	.word	0x20303e5d

080003dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000450 <MX_SPI2_Init+0x74>)
 80003e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000454 <MX_SPI2_Init+0x78>)
 80003e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000450 <MX_SPI2_Init+0x74>)
 80003e8:	2282      	movs	r2, #130	@ 0x82
 80003ea:	0052      	lsls	r2, r2, #1
 80003ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003ee:	4b18      	ldr	r3, [pc, #96]	@ (8000450 <MX_SPI2_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80003f4:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <MX_SPI2_Init+0x74>)
 80003f6:	22c0      	movs	r2, #192	@ 0xc0
 80003f8:	0092      	lsls	r2, r2, #2
 80003fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003fc:	4b14      	ldr	r3, [pc, #80]	@ (8000450 <MX_SPI2_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000402:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <MX_SPI2_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000408:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <MX_SPI2_Init+0x74>)
 800040a:	2280      	movs	r2, #128	@ 0x80
 800040c:	0092      	lsls	r2, r2, #2
 800040e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000410:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <MX_SPI2_Init+0x74>)
 8000412:	2208      	movs	r2, #8
 8000414:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000416:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <MX_SPI2_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800041c:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <MX_SPI2_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <MX_SPI2_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000428:	4b09      	ldr	r3, [pc, #36]	@ (8000450 <MX_SPI2_Init+0x74>)
 800042a:	2207      	movs	r2, #7
 800042c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800042e:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <MX_SPI2_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000434:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <MX_SPI2_Init+0x74>)
 8000436:	2208      	movs	r2, #8
 8000438:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800043a:	4b05      	ldr	r3, [pc, #20]	@ (8000450 <MX_SPI2_Init+0x74>)
 800043c:	0018      	movs	r0, r3
 800043e:	f001 ff39 	bl	80022b4 <HAL_SPI_Init>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000446:	f000 f963 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000080 	.word	0x20000080
 8000454:	40003800 	.word	0x40003800

08000458 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 800045c:	4b1e      	ldr	r3, [pc, #120]	@ (80004d8 <MX_TSC_Init+0x80>)
 800045e:	4a1f      	ldr	r2, [pc, #124]	@ (80004dc <MX_TSC_Init+0x84>)
 8000460:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000462:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <MX_TSC_Init+0x80>)
 8000464:	2280      	movs	r2, #128	@ 0x80
 8000466:	0552      	lsls	r2, r2, #21
 8000468:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800046a:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <MX_TSC_Init+0x80>)
 800046c:	2280      	movs	r2, #128	@ 0x80
 800046e:	0452      	lsls	r2, r2, #17
 8000470:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000472:	4b19      	ldr	r3, [pc, #100]	@ (80004d8 <MX_TSC_Init+0x80>)
 8000474:	2200      	movs	r2, #0
 8000476:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000478:	4b17      	ldr	r3, [pc, #92]	@ (80004d8 <MX_TSC_Init+0x80>)
 800047a:	2201      	movs	r2, #1
 800047c:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800047e:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <MX_TSC_Init+0x80>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000484:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <MX_TSC_Init+0x80>)
 8000486:	2280      	movs	r2, #128	@ 0x80
 8000488:	0192      	lsls	r2, r2, #6
 800048a:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <MX_TSC_Init+0x80>)
 800048e:	22a0      	movs	r2, #160	@ 0xa0
 8000490:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <MX_TSC_Init+0x80>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000498:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <MX_TSC_Init+0x80>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <MX_TSC_Init+0x80>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <MX_TSC_Init+0x80>)
 80004a6:	222c      	movs	r2, #44	@ 0x2c
 80004a8:	2100      	movs	r1, #0
 80004aa:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <MX_TSC_Init+0x80>)
 80004ae:	2291      	movs	r2, #145	@ 0x91
 80004b0:	0092      	lsls	r2, r2, #2
 80004b2:	631a      	str	r2, [r3, #48]	@ 0x30
  htsc.Init.ShieldIOs = 0;
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <MX_TSC_Init+0x80>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80004ba:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <MX_TSC_Init+0x80>)
 80004bc:	2291      	movs	r2, #145	@ 0x91
 80004be:	00d2      	lsls	r2, r2, #3
 80004c0:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80004c2:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <MX_TSC_Init+0x80>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 ffad 	bl	8002424 <HAL_TSC_Init>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80004ce:	f000 f91f 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000e4 	.word	0x200000e4
 80004dc:	40024000 	.word	0x40024000

080004e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e4:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 80004e6:	4a15      	ldr	r2, [pc, #84]	@ (800053c <MX_USART1_UART_Init+0x5c>)
 80004e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004ea:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 80004ec:	2296      	movs	r2, #150	@ 0x96
 80004ee:	0212      	lsls	r2, r2, #8
 80004f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f2:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 8000506:	220c      	movs	r2, #12
 8000508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <MX_USART1_UART_Init+0x58>)
 8000524:	0018      	movs	r0, r3
 8000526:	f002 f823 	bl	8002570 <HAL_UART_Init>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800052e:	f000 f8ef 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000128 	.word	0x20000128
 800053c:	40013800 	.word	0x40013800

08000540 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000544:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <MX_USB_PCD_Init+0x44>)
 8000546:	4a10      	ldr	r2, [pc, #64]	@ (8000588 <MX_USB_PCD_Init+0x48>)
 8000548:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <MX_USB_PCD_Init+0x44>)
 800054c:	2208      	movs	r2, #8
 800054e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000550:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <MX_USB_PCD_Init+0x44>)
 8000552:	2202      	movs	r2, #2
 8000554:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <MX_USB_PCD_Init+0x44>)
 8000558:	2202      	movs	r2, #2
 800055a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800055c:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <MX_USB_PCD_Init+0x44>)
 800055e:	2200      	movs	r2, #0
 8000560:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <MX_USB_PCD_Init+0x44>)
 8000564:	2200      	movs	r2, #0
 8000566:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <MX_USB_PCD_Init+0x44>)
 800056a:	2200      	movs	r2, #0
 800056c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800056e:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <MX_USB_PCD_Init+0x44>)
 8000570:	0018      	movs	r0, r3
 8000572:	f000 ff91 	bl	8001498 <HAL_PCD_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800057a:	f000 f8c9 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200001b0 	.word	0x200001b0
 8000588:	40005c00 	.word	0x40005c00

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b089      	sub	sp, #36	@ 0x24
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	240c      	movs	r4, #12
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2314      	movs	r3, #20
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f003 fae7 	bl	8003b70 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b35      	ldr	r3, [pc, #212]	@ (8000678 <MX_GPIO_Init+0xec>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <MX_GPIO_Init+0xec>)
 80005a8:	2180      	movs	r1, #128	@ 0x80
 80005aa:	0309      	lsls	r1, r1, #12
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b31      	ldr	r3, [pc, #196]	@ (8000678 <MX_GPIO_Init+0xec>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	@ 0x80
 80005b6:	031b      	lsls	r3, r3, #12
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <MX_GPIO_Init+0xec>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <MX_GPIO_Init+0xec>)
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	0289      	lsls	r1, r1, #10
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000678 <MX_GPIO_Init+0xec>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	@ 0x80
 80005d2:	029b      	lsls	r3, r3, #10
 80005d4:	4013      	ands	r3, r2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <MX_GPIO_Init+0xec>)
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	4b26      	ldr	r3, [pc, #152]	@ (8000678 <MX_GPIO_Init+0xec>)
 80005e0:	2180      	movs	r1, #128	@ 0x80
 80005e2:	02c9      	lsls	r1, r1, #11
 80005e4:	430a      	orrs	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <MX_GPIO_Init+0xec>)
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	02db      	lsls	r3, r3, #11
 80005f0:	4013      	ands	r3, r2
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80005f6:	4921      	ldr	r1, [pc, #132]	@ (800067c <MX_GPIO_Init+0xf0>)
 80005f8:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_GPIO_Init+0xf4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fdef 	bl	80011e0 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000602:	193b      	adds	r3, r7, r4
 8000604:	4a1d      	ldr	r2, [pc, #116]	@ (800067c <MX_GPIO_Init+0xf0>)
 8000606:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2201      	movs	r2, #1
 800060c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061a:	193b      	adds	r3, r7, r4
 800061c:	4a18      	ldr	r2, [pc, #96]	@ (8000680 <MX_GPIO_Init+0xf4>)
 800061e:	0019      	movs	r1, r3
 8000620:	0010      	movs	r0, r2
 8000622:	f000 fc65 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000626:	0021      	movs	r1, r4
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2206      	movs	r2, #6
 800062c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2290      	movs	r2, #144	@ 0x90
 8000632:	0352      	lsls	r2, r2, #13
 8000634:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063c:	000c      	movs	r4, r1
 800063e:	187b      	adds	r3, r7, r1
 8000640:	4a0f      	ldr	r2, [pc, #60]	@ (8000680 <MX_GPIO_Init+0xf4>)
 8000642:	0019      	movs	r1, r3
 8000644:	0010      	movs	r0, r2
 8000646:	f000 fc53 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064a:	0021      	movs	r1, r4
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2290      	movs	r2, #144	@ 0x90
 8000656:	0352      	lsls	r2, r2, #13
 8000658:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000660:	187a      	adds	r2, r7, r1
 8000662:	2390      	movs	r3, #144	@ 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fc41 	bl	8000ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b009      	add	sp, #36	@ 0x24
 8000674:	bd90      	pop	{r4, r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	40021000 	.word	0x40021000
 800067c:	000003e1 	.word	0x000003e1
 8000680:	48000800 	.word	0x48000800

08000684 <SendPongMessage>:
//        HAL_UART_Receive_IT(&huart1, data_rx, sizeof(data_rx));  // Yeniden alım başlatılır
//	    }
//}

void SendPongMessage(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
    uint8_t pongMessage[5] = "pong\n"; // "pong" mesajı, satır sonu ile
 800068a:	003b      	movs	r3, r7
 800068c:	4a07      	ldr	r2, [pc, #28]	@ (80006ac <SendPongMessage+0x28>)
 800068e:	6811      	ldr	r1, [r2, #0]
 8000690:	6019      	str	r1, [r3, #0]
 8000692:	7912      	ldrb	r2, [r2, #4]
 8000694:	711a      	strb	r2, [r3, #4]
    HAL_UART_Transmit(&huart1, pongMessage, 5, HAL_MAX_DELAY);
 8000696:	2301      	movs	r3, #1
 8000698:	425b      	negs	r3, r3
 800069a:	0039      	movs	r1, r7
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <SendPongMessage+0x2c>)
 800069e:	2205      	movs	r2, #5
 80006a0:	f001 ffba 	bl	8002618 <HAL_UART_Transmit>
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08003be0 	.word	0x08003be0
 80006b0:	20000128 	.word	0x20000128

080006b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Eğer gelen veri USART1 üzerinden geldiyse
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a0d      	ldr	r2, [pc, #52]	@ (80006f8 <HAL_UART_RxCpltCallback+0x44>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d113      	bne.n	80006ee <HAL_UART_RxCpltCallback+0x3a>
    {
    	uart1MainBuf[uart1rxLen++] = data_rx[0] & 0xFF;
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <HAL_UART_RxCpltCallback+0x48>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	b2d1      	uxtb	r1, r2
 80006ce:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <HAL_UART_RxCpltCallback+0x48>)
 80006d0:	7011      	strb	r1, [r2, #0]
 80006d2:	001a      	movs	r2, r3
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <HAL_UART_RxCpltCallback+0x4c>)
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <HAL_UART_RxCpltCallback+0x50>)
 80006da:	5499      	strb	r1, [r3, r2]
    	uart1CallbackComplete = true;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <HAL_UART_RxCpltCallback+0x54>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, data_rx, 1); // Yeniden alım başlat
 80006e2:	4907      	ldr	r1, [pc, #28]	@ (8000700 <HAL_UART_RxCpltCallback+0x4c>)
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <HAL_UART_RxCpltCallback+0x58>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 f834 	bl	8002756 <HAL_UART_Receive_IT>
    }
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	40013800 	.word	0x40013800
 80006fc:	200004cc 	.word	0x200004cc
 8000700:	20000028 	.word	0x20000028
 8000704:	2000048c 	.word	0x2000048c
 8000708:	200004cd 	.word	0x200004cd
 800070c:	20000128 	.word	0x20000128

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	e7fd      	b.n	8000718 <Error_Handler+0x8>

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <HAL_MspInit+0x44>)
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <HAL_MspInit+0x44>)
 8000728:	2101      	movs	r1, #1
 800072a:	430a      	orrs	r2, r1
 800072c:	619a      	str	r2, [r3, #24]
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <HAL_MspInit+0x44>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	2201      	movs	r2, #1
 8000734:	4013      	ands	r3, r2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <HAL_MspInit+0x44>)
 800073c:	69da      	ldr	r2, [r3, #28]
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <HAL_MspInit+0x44>)
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	0549      	lsls	r1, r1, #21
 8000744:	430a      	orrs	r2, r1
 8000746:	61da      	str	r2, [r3, #28]
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HAL_MspInit+0x44>)
 800074a:	69da      	ldr	r2, [r3, #28]
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	055b      	lsls	r3, r3, #21
 8000750:	4013      	ands	r3, r2
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b08b      	sub	sp, #44	@ 0x2c
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	2414      	movs	r4, #20
 800076e:	193b      	adds	r3, r7, r4
 8000770:	0018      	movs	r0, r3
 8000772:	2314      	movs	r3, #20
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f003 f9fa 	bl	8003b70 <memset>
  if(hi2c->Instance==I2C2)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <HAL_I2C_MspInit+0x90>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d132      	bne.n	80007ec <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <HAL_I2C_MspInit+0x94>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <HAL_I2C_MspInit+0x94>)
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	02c9      	lsls	r1, r1, #11
 8000790:	430a      	orrs	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <HAL_I2C_MspInit+0x94>)
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	02db      	lsls	r3, r3, #11
 800079c:	4013      	ands	r3, r2
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	22c0      	movs	r2, #192	@ 0xc0
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007aa:	0021      	movs	r1, r4
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2212      	movs	r2, #18
 80007b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2201      	movs	r2, #1
 80007b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2203      	movs	r2, #3
 80007bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2201      	movs	r2, #1
 80007c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <HAL_I2C_MspInit+0x98>)
 80007c8:	0019      	movs	r1, r3
 80007ca:	0010      	movs	r0, r2
 80007cc:	f000 fb90 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_I2C_MspInit+0x94>)
 80007d2:	69da      	ldr	r2, [r3, #28]
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <HAL_I2C_MspInit+0x94>)
 80007d6:	2180      	movs	r1, #128	@ 0x80
 80007d8:	03c9      	lsls	r1, r1, #15
 80007da:	430a      	orrs	r2, r1
 80007dc:	61da      	str	r2, [r3, #28]
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_I2C_MspInit+0x94>)
 80007e0:	69da      	ldr	r2, [r3, #28]
 80007e2:	2380      	movs	r3, #128	@ 0x80
 80007e4:	03db      	lsls	r3, r3, #15
 80007e6:	4013      	ands	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b00b      	add	sp, #44	@ 0x2c
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	40005800 	.word	0x40005800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000400 	.word	0x48000400

08000800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b08b      	sub	sp, #44	@ 0x2c
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	2414      	movs	r4, #20
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	2314      	movs	r3, #20
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f003 f9ac 	bl	8003b70 <memset>
  if(hspi->Instance==SPI2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1c      	ldr	r2, [pc, #112]	@ (8000890 <HAL_SPI_MspInit+0x90>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d132      	bne.n	8000888 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_SPI_MspInit+0x94>)
 8000824:	69da      	ldr	r2, [r3, #28]
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <HAL_SPI_MspInit+0x94>)
 8000828:	2180      	movs	r1, #128	@ 0x80
 800082a:	01c9      	lsls	r1, r1, #7
 800082c:	430a      	orrs	r2, r1
 800082e:	61da      	str	r2, [r3, #28]
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <HAL_SPI_MspInit+0x94>)
 8000832:	69da      	ldr	r2, [r3, #28]
 8000834:	2380      	movs	r3, #128	@ 0x80
 8000836:	01db      	lsls	r3, r3, #7
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_SPI_MspInit+0x94>)
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <HAL_SPI_MspInit+0x94>)
 8000844:	2180      	movs	r1, #128	@ 0x80
 8000846:	02c9      	lsls	r1, r1, #11
 8000848:	430a      	orrs	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <HAL_SPI_MspInit+0x94>)
 800084e:	695a      	ldr	r2, [r3, #20]
 8000850:	2380      	movs	r3, #128	@ 0x80
 8000852:	02db      	lsls	r3, r3, #11
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	22e0      	movs	r2, #224	@ 0xe0
 800085e:	0212      	lsls	r2, r2, #8
 8000860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	0021      	movs	r1, r4
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2202      	movs	r2, #2
 8000868:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2203      	movs	r2, #3
 8000874:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	187b      	adds	r3, r7, r1
 800087e:	4a06      	ldr	r2, [pc, #24]	@ (8000898 <HAL_SPI_MspInit+0x98>)
 8000880:	0019      	movs	r1, r3
 8000882:	0010      	movs	r0, r2
 8000884:	f000 fb34 	bl	8000ef0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b00b      	add	sp, #44	@ 0x2c
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	40003800 	.word	0x40003800
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400

0800089c <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b08b      	sub	sp, #44	@ 0x2c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	2414      	movs	r4, #20
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f003 f95e 	bl	8003b70 <memset>
  if(htsc->Instance==TSC)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a44      	ldr	r2, [pc, #272]	@ (80009cc <HAL_TSC_MspInit+0x130>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d000      	beq.n	80008c0 <HAL_TSC_MspInit+0x24>
 80008be:	e080      	b.n	80009c2 <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80008c0:	4b43      	ldr	r3, [pc, #268]	@ (80009d0 <HAL_TSC_MspInit+0x134>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	4b42      	ldr	r3, [pc, #264]	@ (80009d0 <HAL_TSC_MspInit+0x134>)
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	0449      	lsls	r1, r1, #17
 80008ca:	430a      	orrs	r2, r1
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	4b40      	ldr	r3, [pc, #256]	@ (80009d0 <HAL_TSC_MspInit+0x134>)
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	2380      	movs	r3, #128	@ 0x80
 80008d4:	045b      	lsls	r3, r3, #17
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b3c      	ldr	r3, [pc, #240]	@ (80009d0 <HAL_TSC_MspInit+0x134>)
 80008de:	695a      	ldr	r2, [r3, #20]
 80008e0:	4b3b      	ldr	r3, [pc, #236]	@ (80009d0 <HAL_TSC_MspInit+0x134>)
 80008e2:	2180      	movs	r1, #128	@ 0x80
 80008e4:	0289      	lsls	r1, r1, #10
 80008e6:	430a      	orrs	r2, r1
 80008e8:	615a      	str	r2, [r3, #20]
 80008ea:	4b39      	ldr	r3, [pc, #228]	@ (80009d0 <HAL_TSC_MspInit+0x134>)
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	029b      	lsls	r3, r3, #10
 80008f2:	4013      	ands	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b35      	ldr	r3, [pc, #212]	@ (80009d0 <HAL_TSC_MspInit+0x134>)
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	4b34      	ldr	r3, [pc, #208]	@ (80009d0 <HAL_TSC_MspInit+0x134>)
 80008fe:	2180      	movs	r1, #128	@ 0x80
 8000900:	02c9      	lsls	r1, r1, #11
 8000902:	430a      	orrs	r2, r1
 8000904:	615a      	str	r2, [r3, #20]
 8000906:	4b32      	ldr	r3, [pc, #200]	@ (80009d0 <HAL_TSC_MspInit+0x134>)
 8000908:	695a      	ldr	r2, [r3, #20]
 800090a:	2380      	movs	r3, #128	@ 0x80
 800090c:	02db      	lsls	r3, r3, #11
 800090e:	4013      	ands	r3, r2
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2244      	movs	r2, #68	@ 0x44
 8000918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2202      	movs	r2, #2
 800091e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2203      	movs	r2, #3
 8000930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	193a      	adds	r2, r7, r4
 8000934:	2390      	movs	r3, #144	@ 0x90
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fad8 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2288      	movs	r2, #136	@ 0x88
 8000944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2212      	movs	r2, #18
 800094a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2203      	movs	r2, #3
 800095c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	193a      	adds	r2, r7, r4
 8000960:	2390      	movs	r3, #144	@ 0x90
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fac2 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2201      	movs	r2, #1
 8000970:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2202      	movs	r2, #2
 8000976:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2203      	movs	r2, #3
 8000988:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	193b      	adds	r3, r7, r4
 800098c:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <HAL_TSC_MspInit+0x138>)
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f000 faad 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000996:	0021      	movs	r1, r4
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2202      	movs	r2, #2
 800099c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2212      	movs	r2, #18
 80009a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2203      	movs	r2, #3
 80009b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <HAL_TSC_MspInit+0x138>)
 80009ba:	0019      	movs	r1, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	f000 fa97 	bl	8000ef0 <HAL_GPIO_Init>

  /* USER CODE END TSC_MspInit 1 */

  }

}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b00b      	add	sp, #44	@ 0x2c
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	40024000 	.word	0x40024000
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000400 	.word	0x48000400

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b08b      	sub	sp, #44	@ 0x2c
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	2414      	movs	r4, #20
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2314      	movs	r3, #20
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f003 f8c0 	bl	8003b70 <memset>
  if(huart->Instance==USART1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a21      	ldr	r2, [pc, #132]	@ (8000a7c <HAL_UART_MspInit+0xa4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d13b      	bne.n	8000a72 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <HAL_UART_MspInit+0xa8>)
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <HAL_UART_MspInit+0xa8>)
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	01c9      	lsls	r1, r1, #7
 8000a04:	430a      	orrs	r2, r1
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <HAL_UART_MspInit+0xa8>)
 8000a0a:	699a      	ldr	r2, [r3, #24]
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	01db      	lsls	r3, r3, #7
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <HAL_UART_MspInit+0xa8>)
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <HAL_UART_MspInit+0xa8>)
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	0289      	lsls	r1, r1, #10
 8000a20:	430a      	orrs	r2, r1
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <HAL_UART_MspInit+0xa8>)
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	22c0      	movs	r2, #192	@ 0xc0
 8000a36:	00d2      	lsls	r2, r2, #3
 8000a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2202      	movs	r2, #2
 8000a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2201      	movs	r2, #1
 8000a52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	2390      	movs	r3, #144	@ 0x90
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fa47 	bl	8000ef0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2101      	movs	r1, #1
 8000a66:	201b      	movs	r0, #27
 8000a68:	f000 f992 	bl	8000d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a6c:	201b      	movs	r0, #27
 8000a6e:	f000 f9a4 	bl	8000dba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b00b      	add	sp, #44	@ 0x2c
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	40013800 	.word	0x40013800
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_PCD_MspInit+0x38>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d10d      	bne.n	8000ab2 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_PCD_MspInit+0x3c>)
 8000a98:	69da      	ldr	r2, [r3, #28]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <HAL_PCD_MspInit+0x3c>)
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	0409      	lsls	r1, r1, #16
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	61da      	str	r2, [r3, #28]
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_PCD_MspInit+0x3c>)
 8000aa6:	69da      	ldr	r2, [r3, #28]
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	041b      	lsls	r3, r3, #16
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	40005c00 	.word	0x40005c00
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f888 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <USART1_IRQHandler+0x14>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fe80 	bl	8002804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	20000128 	.word	0x20000128

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f7ff fff6 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b4a:	f003 f819 	bl	8003b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4e:	f7ff fb67 	bl	8000220 <main>

08000b52 <LoopForever>:

LoopForever:
    b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   r0, =_estack
 8000b54:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b60:	08003c28 	.word	0x08003c28
  ldr r2, =_sbss
 8000b64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b68:	200004d4 	.word	0x200004d4

08000b6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_COMP_IRQHandler>
	...

08000b70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <HAL_Init+0x24>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_Init+0x24>)
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f809 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b86:	f7ff fdc9 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <HAL_InitTick+0x5c>)
 8000ba2:	681c      	ldr	r4, [r3, #0]
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <HAL_InitTick+0x60>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	0019      	movs	r1, r3
 8000baa:	23fa      	movs	r3, #250	@ 0xfa
 8000bac:	0098      	lsls	r0, r3, #2
 8000bae:	f7ff faab 	bl	8000108 <__udivsi3>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	0020      	movs	r0, r4
 8000bb8:	f7ff faa6 	bl	8000108 <__udivsi3>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 f90b 	bl	8000dda <HAL_SYSTICK_Config>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e00f      	b.n	8000bec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d80b      	bhi.n	8000bea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 f8d8 	bl	8000d90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_InitTick+0x64>)
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b003      	add	sp, #12
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_IncTick+0x1c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	001a      	movs	r2, r3
 8000c0a:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <HAL_IncTick+0x20>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	18d2      	adds	r2, r2, r3
 8000c10:	4b03      	ldr	r3, [pc, #12]	@ (8000c20 <HAL_IncTick+0x20>)
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	200004d0 	.word	0x200004d0

08000c24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b02      	ldr	r3, [pc, #8]	@ (8000c34 <HAL_GetTick+0x10>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	200004d0 	.word	0x200004d0

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	0002      	movs	r2, r0
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c4a:	d809      	bhi.n	8000c60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	001a      	movs	r2, r3
 8000c52:	231f      	movs	r3, #31
 8000c54:	401a      	ands	r2, r3
 8000c56:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__NVIC_EnableIRQ+0x30>)
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	000a      	movs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
  }
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	0002      	movs	r2, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c80:	d828      	bhi.n	8000cd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c82:	4a2f      	ldr	r2, [pc, #188]	@ (8000d40 <__NVIC_SetPriority+0xd4>)
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	33c0      	adds	r3, #192	@ 0xc0
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	589b      	ldr	r3, [r3, r2]
 8000c92:	1dfa      	adds	r2, r7, #7
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	0011      	movs	r1, r2
 8000c98:	2203      	movs	r2, #3
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	00d2      	lsls	r2, r2, #3
 8000c9e:	21ff      	movs	r1, #255	@ 0xff
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	22ff      	movs	r2, #255	@ 0xff
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2303      	movs	r3, #3
 8000cba:	4003      	ands	r3, r0
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	481f      	ldr	r0, [pc, #124]	@ (8000d40 <__NVIC_SetPriority+0xd4>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	33c0      	adds	r3, #192	@ 0xc0
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cd2:	e031      	b.n	8000d38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d44 <__NVIC_SetPriority+0xd8>)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	0019      	movs	r1, r3
 8000cdc:	230f      	movs	r3, #15
 8000cde:	400b      	ands	r3, r1
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3306      	adds	r3, #6
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	18d3      	adds	r3, r2, r3
 8000cea:	3304      	adds	r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	1dfa      	adds	r2, r7, #7
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	00d2      	lsls	r2, r2, #3
 8000cfa:	21ff      	movs	r1, #255	@ 0xff
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	401a      	ands	r2, r3
 8000d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	22ff      	movs	r2, #255	@ 0xff
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	2303      	movs	r3, #3
 8000d16:	4003      	ands	r3, r0
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <__NVIC_SetPriority+0xd8>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	001c      	movs	r4, r3
 8000d24:	230f      	movs	r3, #15
 8000d26:	4023      	ands	r3, r4
 8000d28:	3b08      	subs	r3, #8
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	3306      	adds	r3, #6
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	18c3      	adds	r3, r0, r3
 8000d34:	3304      	adds	r3, #4
 8000d36:	601a      	str	r2, [r3, #0]
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	045b      	lsls	r3, r3, #17
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d301      	bcc.n	8000d60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e010      	b.n	8000d82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d60:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <SysTick_Config+0x44>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	3a01      	subs	r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d68:	2301      	movs	r3, #1
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff ff7c 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <SysTick_Config+0x44>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <SysTick_Config+0x44>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	1c02      	adds	r2, r0, #0
 8000da0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b004      	add	sp, #16
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff ff33 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ffaf 	bl	8000d48 <SysTick_Config>
 8000dea:	0003      	movs	r3, r0
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b002      	add	sp, #8
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2221      	movs	r2, #33	@ 0x21
 8000e00:	5c9b      	ldrb	r3, [r3, r2]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d008      	beq.n	8000e1a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2220      	movs	r2, #32
 8000e12:	2100      	movs	r1, #0
 8000e14:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e020      	b.n	8000e5c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	210e      	movs	r1, #14
 8000e26:	438a      	bics	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2101      	movs	r1, #1
 8000e36:	438a      	bics	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e42:	2101      	movs	r1, #1
 8000e44:	4091      	lsls	r1, r2
 8000e46:	000a      	movs	r2, r1
 8000e48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2221      	movs	r2, #33	@ 0x21
 8000e4e:	2101      	movs	r1, #1
 8000e50:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2220      	movs	r2, #32
 8000e56:	2100      	movs	r1, #0
 8000e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2221      	movs	r2, #33	@ 0x21
 8000e78:	5c9b      	ldrb	r3, [r3, r2]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d006      	beq.n	8000e8e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2204      	movs	r2, #4
 8000e84:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e028      	b.n	8000ee0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	210e      	movs	r1, #14
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	438a      	bics	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4091      	lsls	r1, r2
 8000eba:	000a      	movs	r2, r1
 8000ebc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2221      	movs	r2, #33	@ 0x21
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2100      	movs	r1, #0
 8000ecc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	0010      	movs	r0, r2
 8000ede:	4798      	blx	r3
    }
  }
  return status;
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	781b      	ldrb	r3, [r3, #0]
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b004      	add	sp, #16
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efe:	e155      	b.n	80011ac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2101      	movs	r1, #1
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d100      	bne.n	8000f18 <HAL_GPIO_Init+0x28>
 8000f16:	e146      	b.n	80011a6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d005      	beq.n	8000f30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d130      	bne.n	8000f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	409a      	lsls	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f66:	2201      	movs	r2, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2203      	movs	r2, #3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d017      	beq.n	8000fce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d123      	bne.n	8001022 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	58d3      	ldr	r3, [r2, r3]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2207      	movs	r2, #7
 8000fec:	4013      	ands	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	691a      	ldr	r2, [r3, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2107      	movs	r1, #7
 8001006:	400b      	ands	r3, r1
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	6939      	ldr	r1, [r7, #16]
 8001020:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	401a      	ands	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	23c0      	movs	r3, #192	@ 0xc0
 800105c:	029b      	lsls	r3, r3, #10
 800105e:	4013      	ands	r3, r2
 8001060:	d100      	bne.n	8001064 <HAL_GPIO_Init+0x174>
 8001062:	e0a0      	b.n	80011a6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001064:	4b57      	ldr	r3, [pc, #348]	@ (80011c4 <HAL_GPIO_Init+0x2d4>)
 8001066:	699a      	ldr	r2, [r3, #24]
 8001068:	4b56      	ldr	r3, [pc, #344]	@ (80011c4 <HAL_GPIO_Init+0x2d4>)
 800106a:	2101      	movs	r1, #1
 800106c:	430a      	orrs	r2, r1
 800106e:	619a      	str	r2, [r3, #24]
 8001070:	4b54      	ldr	r3, [pc, #336]	@ (80011c4 <HAL_GPIO_Init+0x2d4>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	2201      	movs	r2, #1
 8001076:	4013      	ands	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800107c:	4a52      	ldr	r2, [pc, #328]	@ (80011c8 <HAL_GPIO_Init+0x2d8>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	589b      	ldr	r3, [r3, r2]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2203      	movs	r2, #3
 800108e:	4013      	ands	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	2390      	movs	r3, #144	@ 0x90
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x1ee>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a47      	ldr	r2, [pc, #284]	@ (80011cc <HAL_GPIO_Init+0x2dc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x1ea>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a46      	ldr	r2, [pc, #280]	@ (80011d0 <HAL_GPIO_Init+0x2e0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x1e6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a45      	ldr	r2, [pc, #276]	@ (80011d4 <HAL_GPIO_Init+0x2e4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x1e2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a44      	ldr	r2, [pc, #272]	@ (80011d8 <HAL_GPIO_Init+0x2e8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x1de>
 80010ca:	2304      	movs	r3, #4
 80010cc:	e008      	b.n	80010e0 <HAL_GPIO_Init+0x1f0>
 80010ce:	2305      	movs	r3, #5
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x1f0>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x1f0>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x1f0>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x1f0>
 80010de:	2300      	movs	r3, #0
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	2103      	movs	r1, #3
 80010e4:	400a      	ands	r2, r1
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4093      	lsls	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f0:	4935      	ldr	r1, [pc, #212]	@ (80011c8 <HAL_GPIO_Init+0x2d8>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b37      	ldr	r3, [pc, #220]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	035b      	lsls	r3, r3, #13
 8001116:	4013      	ands	r3, r2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001122:	4b2e      	ldr	r3, [pc, #184]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001128:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43da      	mvns	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	039b      	lsls	r3, r3, #14
 8001140:	4013      	ands	r3, r2
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800114c:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001152:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	029b      	lsls	r3, r3, #10
 800116a:	4013      	ands	r3, r2
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43da      	mvns	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	025b      	lsls	r3, r3, #9
 8001194:	4013      	ands	r3, r2
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	40da      	lsrs	r2, r3
 80011b4:	1e13      	subs	r3, r2, #0
 80011b6:	d000      	beq.n	80011ba <HAL_GPIO_Init+0x2ca>
 80011b8:	e6a2      	b.n	8000f00 <HAL_GPIO_Init+0x10>
  } 
}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b006      	add	sp, #24
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	48001000 	.word	0x48001000
 80011dc:	40010400 	.word	0x40010400

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	0008      	movs	r0, r1
 80011ea:	0011      	movs	r1, r2
 80011ec:	1cbb      	adds	r3, r7, #2
 80011ee:	1c02      	adds	r2, r0, #0
 80011f0:	801a      	strh	r2, [r3, #0]
 80011f2:	1c7b      	adds	r3, r7, #1
 80011f4:	1c0a      	adds	r2, r1, #0
 80011f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f8:	1c7b      	adds	r3, r7, #1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001200:	1cbb      	adds	r3, r7, #2
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120a:	1cbb      	adds	r3, r7, #2
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e08f      	b.n	800134e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2241      	movs	r2, #65	@ 0x41
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2240      	movs	r2, #64	@ 0x40
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff fa8d 	bl	8000764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2241      	movs	r2, #65	@ 0x41
 800124e:	2124      	movs	r1, #36	@ 0x24
 8001250:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	438a      	bics	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	493b      	ldr	r1, [pc, #236]	@ (8001358 <HAL_I2C_Init+0x13c>)
 800126c:	400a      	ands	r2, r1
 800126e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4938      	ldr	r1, [pc, #224]	@ (800135c <HAL_I2C_Init+0x140>)
 800127c:	400a      	ands	r2, r1
 800127e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d108      	bne.n	800129a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2180      	movs	r1, #128	@ 0x80
 8001292:	0209      	lsls	r1, r1, #8
 8001294:	430a      	orrs	r2, r1
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e007      	b.n	80012aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2184      	movs	r1, #132	@ 0x84
 80012a4:	0209      	lsls	r1, r1, #8
 80012a6:	430a      	orrs	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d109      	bne.n	80012c6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2180      	movs	r1, #128	@ 0x80
 80012be:	0109      	lsls	r1, r1, #4
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	e007      	b.n	80012d6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4923      	ldr	r1, [pc, #140]	@ (8001360 <HAL_I2C_Init+0x144>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4920      	ldr	r1, [pc, #128]	@ (8001364 <HAL_I2C_Init+0x148>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	491a      	ldr	r1, [pc, #104]	@ (800135c <HAL_I2C_Init+0x140>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	431a      	orrs	r2, r3
 8001300:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69d9      	ldr	r1, [r3, #28]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2101      	movs	r1, #1
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2241      	movs	r2, #65	@ 0x41
 800133a:	2120      	movs	r1, #32
 800133c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2242      	movs	r2, #66	@ 0x42
 8001348:	2100      	movs	r1, #0
 800134a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	f0ffffff 	.word	0xf0ffffff
 800135c:	ffff7fff 	.word	0xffff7fff
 8001360:	fffff7ff 	.word	0xfffff7ff
 8001364:	02008000 	.word	0x02008000

08001368 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2241      	movs	r2, #65	@ 0x41
 8001376:	5c9b      	ldrb	r3, [r3, r2]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b20      	cmp	r3, #32
 800137c:	d138      	bne.n	80013f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2240      	movs	r2, #64	@ 0x40
 8001382:	5c9b      	ldrb	r3, [r3, r2]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001388:	2302      	movs	r3, #2
 800138a:	e032      	b.n	80013f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2240      	movs	r2, #64	@ 0x40
 8001390:	2101      	movs	r1, #1
 8001392:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2241      	movs	r2, #65	@ 0x41
 8001398:	2124      	movs	r1, #36	@ 0x24
 800139a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2101      	movs	r1, #1
 80013a8:	438a      	bics	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4911      	ldr	r1, [pc, #68]	@ (80013fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2101      	movs	r1, #1
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2241      	movs	r2, #65	@ 0x41
 80013e0:	2120      	movs	r1, #32
 80013e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2240      	movs	r2, #64	@ 0x40
 80013e8:	2100      	movs	r1, #0
 80013ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e000      	b.n	80013f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013f0:	2302      	movs	r3, #2
  }
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	ffffefff 	.word	0xffffefff

08001400 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2241      	movs	r2, #65	@ 0x41
 800140e:	5c9b      	ldrb	r3, [r3, r2]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b20      	cmp	r3, #32
 8001414:	d139      	bne.n	800148a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2240      	movs	r2, #64	@ 0x40
 800141a:	5c9b      	ldrb	r3, [r3, r2]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001420:	2302      	movs	r3, #2
 8001422:	e033      	b.n	800148c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2240      	movs	r2, #64	@ 0x40
 8001428:	2101      	movs	r1, #1
 800142a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2241      	movs	r2, #65	@ 0x41
 8001430:	2124      	movs	r1, #36	@ 0x24
 8001432:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2101      	movs	r1, #1
 8001440:	438a      	bics	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	430a      	orrs	r2, r1
 8001474:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2241      	movs	r2, #65	@ 0x41
 800147a:	2120      	movs	r1, #32
 800147c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2240      	movs	r2, #64	@ 0x40
 8001482:	2100      	movs	r1, #0
 8001484:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800148a:	2302      	movs	r3, #2
  }
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bd80      	pop	{r7, pc}
 8001494:	fffff0ff 	.word	0xfffff0ff

08001498 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0e4      	b.n	8001674 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a73      	ldr	r2, [pc, #460]	@ (800167c <HAL_PCD_Init+0x1e4>)
 80014ae:	5c9b      	ldrb	r3, [r3, r2]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d108      	bne.n	80014c8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	23a4      	movs	r3, #164	@ 0xa4
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	2100      	movs	r1, #0
 80014be:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff fade 	bl	8000a84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a6c      	ldr	r2, [pc, #432]	@ (800167c <HAL_PCD_Init+0x1e4>)
 80014cc:	2103      	movs	r1, #3
 80014ce:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f002 fb15 	bl	8003b04 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014da:	230f      	movs	r3, #15
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	e047      	b.n	8001574 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014e4:	200f      	movs	r0, #15
 80014e6:	183b      	adds	r3, r7, r0
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	0013      	movs	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	189b      	adds	r3, r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	18cb      	adds	r3, r1, r3
 80014f6:	3311      	adds	r3, #17
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014fc:	183b      	adds	r3, r7, r0
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	0013      	movs	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	189b      	adds	r3, r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	18cb      	adds	r3, r1, r3
 800150c:	3310      	adds	r3, #16
 800150e:	183a      	adds	r2, r7, r0
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001514:	183b      	adds	r3, r7, r0
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	0013      	movs	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	189b      	adds	r3, r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	18cb      	adds	r3, r1, r3
 8001524:	3313      	adds	r3, #19
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800152a:	183b      	adds	r3, r7, r0
 800152c:	781a      	ldrb	r2, [r3, #0]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	0013      	movs	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	189b      	adds	r3, r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	18cb      	adds	r3, r1, r3
 800153a:	3320      	adds	r3, #32
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001540:	183b      	adds	r3, r7, r0
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	0013      	movs	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	189b      	adds	r3, r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	18cb      	adds	r3, r1, r3
 8001550:	3324      	adds	r3, #36	@ 0x24
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001556:	183b      	adds	r3, r7, r0
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	0013      	movs	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	189b      	adds	r3, r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	2200      	movs	r2, #0
 8001568:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156a:	183b      	adds	r3, r7, r0
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	183b      	adds	r3, r7, r0
 8001570:	3201      	adds	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	791b      	ldrb	r3, [r3, #4]
 8001578:	210f      	movs	r1, #15
 800157a:	187a      	adds	r2, r7, r1
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3b0      	bcc.n	80014e4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e056      	b.n	8001638 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800158a:	240f      	movs	r4, #15
 800158c:	193b      	adds	r3, r7, r4
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	2352      	movs	r3, #82	@ 0x52
 8001594:	33ff      	adds	r3, #255	@ 0xff
 8001596:	0019      	movs	r1, r3
 8001598:	0013      	movs	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	189b      	adds	r3, r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	18c3      	adds	r3, r0, r3
 80015a2:	185b      	adds	r3, r3, r1
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	23a8      	movs	r3, #168	@ 0xa8
 80015b0:	0059      	lsls	r1, r3, #1
 80015b2:	0013      	movs	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	18c3      	adds	r3, r0, r3
 80015bc:	185b      	adds	r3, r3, r1
 80015be:	193a      	adds	r2, r7, r4
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	2354      	movs	r3, #84	@ 0x54
 80015cc:	33ff      	adds	r3, #255	@ 0xff
 80015ce:	0019      	movs	r1, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	189b      	adds	r3, r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	18c3      	adds	r3, r0, r3
 80015da:	185b      	adds	r3, r3, r1
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	23b0      	movs	r3, #176	@ 0xb0
 80015e8:	0059      	lsls	r1, r3, #1
 80015ea:	0013      	movs	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	189b      	adds	r3, r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	18c3      	adds	r3, r0, r3
 80015f4:	185b      	adds	r3, r3, r1
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015fa:	193b      	adds	r3, r7, r4
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	23b2      	movs	r3, #178	@ 0xb2
 8001602:	0059      	lsls	r1, r3, #1
 8001604:	0013      	movs	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	189b      	adds	r3, r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	18c3      	adds	r3, r0, r3
 800160e:	185b      	adds	r3, r3, r1
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001614:	193b      	adds	r3, r7, r4
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	23b4      	movs	r3, #180	@ 0xb4
 800161c:	0059      	lsls	r1, r3, #1
 800161e:	0013      	movs	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	189b      	adds	r3, r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	18c3      	adds	r3, r0, r3
 8001628:	185b      	adds	r3, r3, r1
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162e:	193b      	adds	r3, r7, r4
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	193b      	adds	r3, r7, r4
 8001634:	3201      	adds	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	791b      	ldrb	r3, [r3, #4]
 800163c:	220f      	movs	r2, #15
 800163e:	18ba      	adds	r2, r7, r2
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d3a1      	bcc.n	800158a <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	f002 fa72 	bl	8003b38 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a07      	ldr	r2, [pc, #28]	@ (800167c <HAL_PCD_Init+0x1e4>)
 800165e:	2101      	movs	r1, #1
 8001660:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7a9b      	ldrb	r3, [r3, #10]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d103      	bne.n	8001672 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0018      	movs	r0, r3
 800166e:	f000 f807 	bl	8001680 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b005      	add	sp, #20
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	00000291 	.word	0x00000291

08001680 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	23b4      	movs	r3, #180	@ 0xb4
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	2101      	movs	r1, #1
 8001696:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	23b2      	movs	r3, #178	@ 0xb2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	2100      	movs	r1, #0
 80016a0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2254      	movs	r2, #84	@ 0x54
 80016a6:	5a9b      	ldrh	r3, [r3, r2]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2201      	movs	r2, #1
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b299      	uxth	r1, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2254      	movs	r2, #84	@ 0x54
 80016b4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2254      	movs	r2, #84	@ 0x54
 80016ba:	5a9b      	ldrh	r3, [r3, r2]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2202      	movs	r2, #2
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b299      	uxth	r1, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2254      	movs	r2, #84	@ 0x54
 80016c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b004      	add	sp, #16
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f000 fb76 	bl	8001dd4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	4013      	ands	r3, r2
 80016f0:	d100      	bne.n	80016f4 <HAL_RCC_OscConfig+0x20>
 80016f2:	e08e      	b.n	8001812 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016f4:	4bc5      	ldr	r3, [pc, #788]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	220c      	movs	r2, #12
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d00e      	beq.n	800171e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001700:	4bc2      	ldr	r3, [pc, #776]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	220c      	movs	r2, #12
 8001706:	4013      	ands	r3, r2
 8001708:	2b08      	cmp	r3, #8
 800170a:	d117      	bne.n	800173c <HAL_RCC_OscConfig+0x68>
 800170c:	4bbf      	ldr	r3, [pc, #764]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	23c0      	movs	r3, #192	@ 0xc0
 8001712:	025b      	lsls	r3, r3, #9
 8001714:	401a      	ands	r2, r3
 8001716:	2380      	movs	r3, #128	@ 0x80
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	429a      	cmp	r2, r3
 800171c:	d10e      	bne.n	800173c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171e:	4bbb      	ldr	r3, [pc, #748]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	@ 0x80
 8001724:	029b      	lsls	r3, r3, #10
 8001726:	4013      	ands	r3, r2
 8001728:	d100      	bne.n	800172c <HAL_RCC_OscConfig+0x58>
 800172a:	e071      	b.n	8001810 <HAL_RCC_OscConfig+0x13c>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d000      	beq.n	8001736 <HAL_RCC_OscConfig+0x62>
 8001734:	e06c      	b.n	8001810 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	f000 fb4c 	bl	8001dd4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x80>
 8001744:	4bb1      	ldr	r3, [pc, #708]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4bb0      	ldr	r3, [pc, #704]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800174a:	2180      	movs	r1, #128	@ 0x80
 800174c:	0249      	lsls	r1, r1, #9
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e02f      	b.n	80017b4 <HAL_RCC_OscConfig+0xe0>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10c      	bne.n	8001776 <HAL_RCC_OscConfig+0xa2>
 800175c:	4bab      	ldr	r3, [pc, #684]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4baa      	ldr	r3, [pc, #680]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001762:	49ab      	ldr	r1, [pc, #684]	@ (8001a10 <HAL_RCC_OscConfig+0x33c>)
 8001764:	400a      	ands	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	4ba8      	ldr	r3, [pc, #672]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4ba7      	ldr	r3, [pc, #668]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800176e:	49a9      	ldr	r1, [pc, #676]	@ (8001a14 <HAL_RCC_OscConfig+0x340>)
 8001770:	400a      	ands	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e01e      	b.n	80017b4 <HAL_RCC_OscConfig+0xe0>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b05      	cmp	r3, #5
 800177c:	d10e      	bne.n	800179c <HAL_RCC_OscConfig+0xc8>
 800177e:	4ba3      	ldr	r3, [pc, #652]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4ba2      	ldr	r3, [pc, #648]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001784:	2180      	movs	r1, #128	@ 0x80
 8001786:	02c9      	lsls	r1, r1, #11
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	4b9f      	ldr	r3, [pc, #636]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b9e      	ldr	r3, [pc, #632]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001792:	2180      	movs	r1, #128	@ 0x80
 8001794:	0249      	lsls	r1, r1, #9
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xe0>
 800179c:	4b9b      	ldr	r3, [pc, #620]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b9a      	ldr	r3, [pc, #616]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80017a2:	499b      	ldr	r1, [pc, #620]	@ (8001a10 <HAL_RCC_OscConfig+0x33c>)
 80017a4:	400a      	ands	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	4b98      	ldr	r3, [pc, #608]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b97      	ldr	r3, [pc, #604]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80017ae:	4999      	ldr	r1, [pc, #612]	@ (8001a14 <HAL_RCC_OscConfig+0x340>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d014      	beq.n	80017e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fa32 	bl	8000c24 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c6:	f7ff fa2d 	bl	8000c24 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	@ 0x64
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e2fd      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d8:	4b8c      	ldr	r3, [pc, #560]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0xf2>
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fa1d 	bl	8000c24 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fa18 	bl	8000c24 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	@ 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e2e8      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b82      	ldr	r3, [pc, #520]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	029b      	lsls	r3, r3, #10
 800180a:	4013      	ands	r3, r2
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x11c>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <HAL_RCC_OscConfig+0x14a>
 800181c:	e06c      	b.n	80018f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800181e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	220c      	movs	r2, #12
 8001824:	4013      	ands	r3, r2
 8001826:	d00e      	beq.n	8001846 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001828:	4b78      	ldr	r3, [pc, #480]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	220c      	movs	r2, #12
 800182e:	4013      	ands	r3, r2
 8001830:	2b08      	cmp	r3, #8
 8001832:	d11f      	bne.n	8001874 <HAL_RCC_OscConfig+0x1a0>
 8001834:	4b75      	ldr	r3, [pc, #468]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	23c0      	movs	r3, #192	@ 0xc0
 800183a:	025b      	lsls	r3, r3, #9
 800183c:	401a      	ands	r2, r3
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	429a      	cmp	r2, r3
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b71      	ldr	r3, [pc, #452]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2202      	movs	r2, #2
 800184c:	4013      	ands	r3, r2
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x188>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e2bb      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	22f8      	movs	r2, #248	@ 0xf8
 8001862:	4393      	bics	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00da      	lsls	r2, r3, #3
 800186c:	4b67      	ldr	r3, [pc, #412]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e041      	b.n	80018f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d024      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b63      	ldr	r3, [pc, #396]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b62      	ldr	r3, [pc, #392]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001882:	2101      	movs	r1, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff f9cc 	bl	8000c24 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff f9c7 	bl	8000c24 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e297      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	4b59      	ldr	r3, [pc, #356]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2202      	movs	r2, #2
 80018aa:	4013      	ands	r3, r2
 80018ac:	d0f1      	beq.n	8001892 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b57      	ldr	r3, [pc, #348]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	22f8      	movs	r2, #248	@ 0xf8
 80018b4:	4393      	bics	r3, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	00da      	lsls	r2, r3, #3
 80018be:	4b53      	ldr	r3, [pc, #332]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e018      	b.n	80018f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c6:	4b51      	ldr	r3, [pc, #324]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b50      	ldr	r3, [pc, #320]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80018cc:	2101      	movs	r1, #1
 80018ce:	438a      	bics	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff f9a7 	bl	8000c24 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff f9a2 	bl	8000c24 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e272      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	4b47      	ldr	r3, [pc, #284]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2202      	movs	r2, #2
 80018f4:	4013      	ands	r3, r2
 80018f6:	d1f1      	bne.n	80018dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2208      	movs	r2, #8
 80018fe:	4013      	ands	r3, r2
 8001900:	d036      	beq.n	8001970 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d019      	beq.n	800193e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b40      	ldr	r3, [pc, #256]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 800190c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800190e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001910:	2101      	movs	r1, #1
 8001912:	430a      	orrs	r2, r1
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7ff f985 	bl	8000c24 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff f980 	bl	8000c24 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e250      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b36      	ldr	r3, [pc, #216]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001936:	2202      	movs	r2, #2
 8001938:	4013      	ands	r3, r2
 800193a:	d0f1      	beq.n	8001920 <HAL_RCC_OscConfig+0x24c>
 800193c:	e018      	b.n	8001970 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193e:	4b33      	ldr	r3, [pc, #204]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001942:	4b32      	ldr	r3, [pc, #200]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001944:	2101      	movs	r1, #1
 8001946:	438a      	bics	r2, r1
 8001948:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff f96b 	bl	8000c24 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff f966 	bl	8000c24 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e236      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001966:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	2202      	movs	r2, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d1f1      	bne.n	8001954 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2204      	movs	r2, #4
 8001976:	4013      	ands	r3, r2
 8001978:	d100      	bne.n	800197c <HAL_RCC_OscConfig+0x2a8>
 800197a:	e0b5      	b.n	8001ae8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197c:	201f      	movs	r0, #31
 800197e:	183b      	adds	r3, r7, r0
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001984:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001986:	69da      	ldr	r2, [r3, #28]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	055b      	lsls	r3, r3, #21
 800198c:	4013      	ands	r3, r2
 800198e:	d110      	bne.n	80019b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001996:	2180      	movs	r1, #128	@ 0x80
 8001998:	0549      	lsls	r1, r1, #21
 800199a:	430a      	orrs	r2, r1
 800199c:	61da      	str	r2, [r3, #28]
 800199e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	055b      	lsls	r3, r3, #21
 80019a6:	4013      	ands	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019ac:	183b      	adds	r3, r7, r0
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <HAL_RCC_OscConfig+0x344>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	d11a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_RCC_OscConfig+0x344>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_RCC_OscConfig+0x344>)
 80019c4:	2180      	movs	r1, #128	@ 0x80
 80019c6:	0049      	lsls	r1, r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019cc:	f7ff f92a 	bl	8000c24 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff f925 	bl	8000c24 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	@ 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1f5      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_RCC_OscConfig+0x344>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10f      	bne.n	8001a1c <HAL_RCC_OscConfig+0x348>
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	4b02      	ldr	r3, [pc, #8]	@ (8001a0c <HAL_RCC_OscConfig+0x338>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	621a      	str	r2, [r3, #32]
 8001a08:	e036      	b.n	8001a78 <HAL_RCC_OscConfig+0x3a4>
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	fffeffff 	.word	0xfffeffff
 8001a14:	fffbffff 	.word	0xfffbffff
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10c      	bne.n	8001a3e <HAL_RCC_OscConfig+0x36a>
 8001a24:	4bca      	ldr	r3, [pc, #808]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a26:	6a1a      	ldr	r2, [r3, #32]
 8001a28:	4bc9      	ldr	r3, [pc, #804]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	621a      	str	r2, [r3, #32]
 8001a30:	4bc7      	ldr	r3, [pc, #796]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	4bc6      	ldr	r3, [pc, #792]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	2104      	movs	r1, #4
 8001a38:	438a      	bics	r2, r1
 8001a3a:	621a      	str	r2, [r3, #32]
 8001a3c:	e01c      	b.n	8001a78 <HAL_RCC_OscConfig+0x3a4>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x38c>
 8001a46:	4bc2      	ldr	r3, [pc, #776]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a48:	6a1a      	ldr	r2, [r3, #32]
 8001a4a:	4bc1      	ldr	r3, [pc, #772]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	621a      	str	r2, [r3, #32]
 8001a52:	4bbf      	ldr	r3, [pc, #764]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	4bbe      	ldr	r3, [pc, #760]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a58:	2101      	movs	r1, #1
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	621a      	str	r2, [r3, #32]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0x3a4>
 8001a60:	4bbb      	ldr	r3, [pc, #748]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a62:	6a1a      	ldr	r2, [r3, #32]
 8001a64:	4bba      	ldr	r3, [pc, #744]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a66:	2101      	movs	r1, #1
 8001a68:	438a      	bics	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]
 8001a6c:	4bb8      	ldr	r3, [pc, #736]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	4bb7      	ldr	r3, [pc, #732]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	2104      	movs	r1, #4
 8001a74:	438a      	bics	r2, r1
 8001a76:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d014      	beq.n	8001aaa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff f8d0 	bl	8000c24 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff f8cb 	bl	8000c24 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4aaf      	ldr	r2, [pc, #700]	@ (8001d54 <HAL_RCC_OscConfig+0x680>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e19a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	4bac      	ldr	r3, [pc, #688]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x3b6>
 8001aa8:	e013      	b.n	8001ad2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f8bb 	bl	8000c24 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab2:	e009      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7ff f8b6 	bl	8000c24 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4aa5      	ldr	r2, [pc, #660]	@ (8001d54 <HAL_RCC_OscConfig+0x680>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e185      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	4ba1      	ldr	r3, [pc, #644]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ad2:	231f      	movs	r3, #31
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001adc:	4b9c      	ldr	r3, [pc, #624]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001ade:	69da      	ldr	r2, [r3, #28]
 8001ae0:	4b9b      	ldr	r3, [pc, #620]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	499d      	ldr	r1, [pc, #628]	@ (8001d58 <HAL_RCC_OscConfig+0x684>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2210      	movs	r2, #16
 8001aee:	4013      	ands	r3, r2
 8001af0:	d063      	beq.n	8001bba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d12a      	bne.n	8001b50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001afa:	4b95      	ldr	r3, [pc, #596]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001afe:	4b94      	ldr	r3, [pc, #592]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b00:	2104      	movs	r1, #4
 8001b02:	430a      	orrs	r2, r1
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b06:	4b92      	ldr	r3, [pc, #584]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b0a:	4b91      	ldr	r3, [pc, #580]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f887 	bl	8000c24 <HAL_GetTick>
 8001b16:	0003      	movs	r3, r0
 8001b18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b1c:	f7ff f882 	bl	8000c24 <HAL_GetTick>
 8001b20:	0002      	movs	r2, r0
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e152      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b2e:	4b88      	ldr	r3, [pc, #544]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d0f1      	beq.n	8001b1c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b38:	4b85      	ldr	r3, [pc, #532]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3c:	22f8      	movs	r2, #248	@ 0xf8
 8001b3e:	4393      	bics	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	00da      	lsls	r2, r3, #3
 8001b48:	4b81      	ldr	r3, [pc, #516]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b4e:	e034      	b.n	8001bba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	3305      	adds	r3, #5
 8001b56:	d111      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b58:	4b7d      	ldr	r3, [pc, #500]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b5c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	2104      	movs	r1, #4
 8001b60:	438a      	bics	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b64:	4b7a      	ldr	r3, [pc, #488]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b68:	22f8      	movs	r2, #248	@ 0xf8
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	00da      	lsls	r2, r3, #3
 8001b74:	4b76      	ldr	r3, [pc, #472]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b7a:	e01e      	b.n	8001bba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b7c:	4b74      	ldr	r3, [pc, #464]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b80:	4b73      	ldr	r3, [pc, #460]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	2104      	movs	r1, #4
 8001b84:	430a      	orrs	r2, r1
 8001b86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b88:	4b71      	ldr	r3, [pc, #452]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b8c:	4b70      	ldr	r3, [pc, #448]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	2101      	movs	r1, #1
 8001b90:	438a      	bics	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7ff f846 	bl	8000c24 <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b9e:	f7ff f841 	bl	8000c24 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e111      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bb0:	4b67      	ldr	r3, [pc, #412]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d1f1      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d05c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bc4:	4b62      	ldr	r3, [pc, #392]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	220c      	movs	r2, #12
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d00e      	beq.n	8001bee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001bd0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d114      	bne.n	8001c06 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	23c0      	movs	r3, #192	@ 0xc0
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	401a      	ands	r2, r3
 8001be6:	23c0      	movs	r3, #192	@ 0xc0
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d10b      	bne.n	8001c06 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001bee:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	029b      	lsls	r3, r3, #10
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d040      	beq.n	8001c7c <HAL_RCC_OscConfig+0x5a8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d03c      	beq.n	8001c7c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0e6      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d01b      	beq.n	8001c46 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c0e:	4b50      	ldr	r3, [pc, #320]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c12:	4b4f      	ldr	r3, [pc, #316]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001c14:	2180      	movs	r1, #128	@ 0x80
 8001c16:	0249      	lsls	r1, r1, #9
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f802 	bl	8000c24 <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c26:	f7fe fffd 	bl	8000c24 <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e0cd      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c38:	4b45      	ldr	r3, [pc, #276]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	4013      	ands	r3, r2
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x552>
 8001c44:	e01b      	b.n	8001c7e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c46:	4b42      	ldr	r3, [pc, #264]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c4a:	4b41      	ldr	r3, [pc, #260]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001c4c:	4943      	ldr	r1, [pc, #268]	@ (8001d5c <HAL_RCC_OscConfig+0x688>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe ffe7 	bl	8000c24 <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5c:	f7fe ffe2 	bl	8000c24 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0b2      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c6e:	4b38      	ldr	r3, [pc, #224]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	029b      	lsls	r3, r3, #10
 8001c76:	4013      	ands	r3, r2
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x588>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c7c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d100      	bne.n	8001c88 <HAL_RCC_OscConfig+0x5b4>
 8001c86:	e0a4      	b.n	8001dd2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c88:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d100      	bne.n	8001c96 <HAL_RCC_OscConfig+0x5c2>
 8001c94:	e078      	b.n	8001d88 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d14c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001ca4:	492e      	ldr	r1, [pc, #184]	@ (8001d60 <HAL_RCC_OscConfig+0x68c>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7fe ffbb 	bl	8000c24 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7fe ffb6 	bl	8000c24 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e086      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	049b      	lsls	r3, r3, #18
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	4393      	bics	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4a1e      	ldr	r2, [pc, #120]	@ (8001d64 <HAL_RCC_OscConfig+0x690>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	0019      	movs	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001d06:	2180      	movs	r1, #128	@ 0x80
 8001d08:	0449      	lsls	r1, r1, #17
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ff89 	bl	8000c24 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7fe ff84 	bl	8000c24 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e054      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	049b      	lsls	r3, r3, #18
 8001d32:	4013      	ands	r3, r2
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x644>
 8001d36:	e04c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <HAL_RCC_OscConfig+0x67c>)
 8001d3e:	4908      	ldr	r1, [pc, #32]	@ (8001d60 <HAL_RCC_OscConfig+0x68c>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe ff6e 	bl	8000c24 <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x6a6>
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	00001388 	.word	0x00001388
 8001d58:	efffffff 	.word	0xefffffff
 8001d5c:	fffeffff 	.word	0xfffeffff
 8001d60:	feffffff 	.word	0xfeffffff
 8001d64:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe ff5c 	bl	8000c24 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e02c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_RCC_OscConfig+0x708>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	049b      	lsls	r3, r3, #18
 8001d82:	4013      	ands	r3, r2
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x694>
 8001d86:	e024      	b.n	8001dd2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e01f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_RCC_OscConfig+0x708>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <HAL_RCC_OscConfig+0x708>)
 8001d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	23c0      	movs	r3, #192	@ 0xc0
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	401a      	ands	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d10e      	bne.n	8001dce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	220f      	movs	r2, #15
 8001db4:	401a      	ands	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	23f0      	movs	r3, #240	@ 0xf0
 8001dc2:	039b      	lsls	r3, r3, #14
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b008      	add	sp, #32
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0bf      	b.n	8001f74 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b61      	ldr	r3, [pc, #388]	@ (8001f7c <HAL_RCC_ClockConfig+0x19c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d911      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b5e      	ldr	r3, [pc, #376]	@ (8001f7c <HAL_RCC_ClockConfig+0x19c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4393      	bics	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001f7c <HAL_RCC_ClockConfig+0x19c>)
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e14:	4b59      	ldr	r3, [pc, #356]	@ (8001f7c <HAL_RCC_ClockConfig+0x19c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0a6      	b.n	8001f74 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d015      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2204      	movs	r2, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	d006      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e3a:	4b51      	ldr	r3, [pc, #324]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4b50      	ldr	r3, [pc, #320]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001e40:	21e0      	movs	r1, #224	@ 0xe0
 8001e42:	00c9      	lsls	r1, r1, #3
 8001e44:	430a      	orrs	r2, r1
 8001e46:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b4d      	ldr	r3, [pc, #308]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	22f0      	movs	r2, #240	@ 0xf0
 8001e4e:	4393      	bics	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	4b4a      	ldr	r3, [pc, #296]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	d04c      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b44      	ldr	r3, [pc, #272]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	029b      	lsls	r3, r3, #10
 8001e76:	4013      	ands	r3, r2
 8001e78:	d120      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07a      	b.n	8001f74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	049b      	lsls	r3, r3, #18
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d114      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06e      	b.n	8001f74 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d108      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e062      	b.n	8001f74 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e05b      	b.n	8001f74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebc:	4b30      	ldr	r3, [pc, #192]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7fe fea8 	bl	8000c24 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed8:	e009      	b.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eda:	f7fe fea3 	bl	8000c24 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	4a27      	ldr	r2, [pc, #156]	@ (8001f84 <HAL_RCC_ClockConfig+0x1a4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e042      	b.n	8001f74 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1ec      	bne.n	8001eda <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b1e      	ldr	r3, [pc, #120]	@ (8001f7c <HAL_RCC_ClockConfig+0x19c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d211      	bcs.n	8001f32 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <HAL_RCC_ClockConfig+0x19c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4393      	bics	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_RCC_ClockConfig+0x19c>)
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_RCC_ClockConfig+0x19c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e020      	b.n	8001f74 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2204      	movs	r2, #4
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a11      	ldr	r2, [pc, #68]	@ (8001f88 <HAL_RCC_ClockConfig+0x1a8>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f50:	f000 f820 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f54:	0001      	movs	r1, r0
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a0>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	4013      	ands	r3, r2
 8001f60:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ac>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	000a      	movs	r2, r1
 8001f66:	40da      	lsrs	r2, r3
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_ClockConfig+0x1b0>)
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7fe fe13 	bl	8000b98 <HAL_InitTick>
  
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b004      	add	sp, #16
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	40021000 	.word	0x40021000
 8001f84:	00001388 	.word	0x00001388
 8001f88:	fffff8ff 	.word	0xfffff8ff
 8001f8c:	08003be8 	.word	0x08003be8
 8001f90:	20000000 	.word	0x20000000

08001f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001fae:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d046      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0xb8>
 8001fbe:	d848      	bhi.n	8002052 <HAL_RCC_GetSysClockFreq+0xbe>
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d002      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x36>
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d003      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x3c>
 8001fc8:	e043      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fcc:	613b      	str	r3, [r7, #16]
      break;
 8001fce:	e043      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	0c9b      	lsrs	r3, r3, #18
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	4a24      	ldr	r2, [pc, #144]	@ (800206c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fde:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	4a22      	ldr	r2, [pc, #136]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	23c0      	movs	r3, #192	@ 0xc0
 8001ff0:	025b      	lsls	r3, r3, #9
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d109      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	481a      	ldr	r0, [pc, #104]	@ (8002068 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002000:	f7fe f882 	bl	8000108 <__udivsi3>
 8002004:	0003      	movs	r3, r0
 8002006:	001a      	movs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4353      	muls	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e01a      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	23c0      	movs	r3, #192	@ 0xc0
 8002014:	025b      	lsls	r3, r3, #9
 8002016:	401a      	ands	r2, r3
 8002018:	23c0      	movs	r3, #192	@ 0xc0
 800201a:	025b      	lsls	r3, r3, #9
 800201c:	429a      	cmp	r2, r3
 800201e:	d109      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	4814      	ldr	r0, [pc, #80]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002024:	f7fe f870 	bl	8000108 <__udivsi3>
 8002028:	0003      	movs	r3, r0
 800202a:	001a      	movs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4353      	muls	r3, r2
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e008      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	480c      	ldr	r0, [pc, #48]	@ (8002068 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002038:	f7fe f866 	bl	8000108 <__udivsi3>
 800203c:	0003      	movs	r3, r0
 800203e:	001a      	movs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4353      	muls	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	613b      	str	r3, [r7, #16]
      break;
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xe0>)
 800204e:	613b      	str	r3, [r7, #16]
      break;
 8002050:	e002      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002052:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002054:	613b      	str	r3, [r7, #16]
      break;
 8002056:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002058:	693b      	ldr	r3, [r7, #16]
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b006      	add	sp, #24
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	40021000 	.word	0x40021000
 8002068:	007a1200 	.word	0x007a1200
 800206c:	08003c00 	.word	0x08003c00
 8002070:	08003c10 	.word	0x08003c10
 8002074:	02dc6c00 	.word	0x02dc6c00

08002078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <HAL_RCC_GetHCLKFreq+0x10>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002090:	f7ff fff2 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 8002094:	0001      	movs	r1, r0
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	2207      	movs	r2, #7
 800209e:	4013      	ands	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	40d9      	lsrs	r1, r3
 80020a6:	000b      	movs	r3, r1
}    
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08003bf8 	.word	0x08003bf8

080020b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4013      	ands	r3, r2
 80020d2:	d100      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020d4:	e08e      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2017      	movs	r0, #23
 80020d8:	183b      	adds	r3, r7, r0
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b6e      	ldr	r3, [pc, #440]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	055b      	lsls	r3, r3, #21
 80020e6:	4013      	ands	r3, r2
 80020e8:	d110      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020f0:	2180      	movs	r1, #128	@ 0x80
 80020f2:	0549      	lsls	r1, r1, #21
 80020f4:	430a      	orrs	r2, r1
 80020f6:	61da      	str	r2, [r3, #28]
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	2380      	movs	r3, #128	@ 0x80
 80020fe:	055b      	lsls	r3, r3, #21
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	183b      	adds	r3, r7, r0
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b63      	ldr	r3, [pc, #396]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d11a      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002118:	4b60      	ldr	r3, [pc, #384]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b5f      	ldr	r3, [pc, #380]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800211e:	2180      	movs	r1, #128	@ 0x80
 8002120:	0049      	lsls	r1, r1, #1
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fd7d 	bl	8000c24 <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	e008      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002130:	f7fe fd78 	bl	8000c24 <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	@ 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0a6      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b56      	ldr	r3, [pc, #344]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4013      	ands	r3, r2
 800214c:	d0f0      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800214e:	4b52      	ldr	r3, [pc, #328]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002150:	6a1a      	ldr	r2, [r3, #32]
 8002152:	23c0      	movs	r3, #192	@ 0xc0
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4013      	ands	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d034      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	23c0      	movs	r3, #192	@ 0xc0
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4013      	ands	r3, r2
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d02c      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002170:	4b49      	ldr	r3, [pc, #292]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a4a      	ldr	r2, [pc, #296]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800217a:	4b47      	ldr	r3, [pc, #284]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800217c:	6a1a      	ldr	r2, [r3, #32]
 800217e:	4b46      	ldr	r3, [pc, #280]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002180:	2180      	movs	r1, #128	@ 0x80
 8002182:	0249      	lsls	r1, r1, #9
 8002184:	430a      	orrs	r2, r1
 8002186:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002188:	4b43      	ldr	r3, [pc, #268]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	4b42      	ldr	r3, [pc, #264]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800218e:	4945      	ldr	r1, [pc, #276]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002190:	400a      	ands	r2, r1
 8002192:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002194:	4b40      	ldr	r3, [pc, #256]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe fd3f 	bl	8000c24 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	e009      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7fe fd3a 	bl	8000c24 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	4a3c      	ldr	r2, [pc, #240]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e067      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	4b35      	ldr	r3, [pc, #212]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	2202      	movs	r2, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ca:	4b33      	ldr	r3, [pc, #204]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a34      	ldr	r2, [pc, #208]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021de:	2317      	movs	r3, #23
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ee:	492f      	ldr	r1, [pc, #188]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80021f0:	400a      	ands	r2, r1
 80021f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2201      	movs	r2, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fe:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	2203      	movs	r2, #3
 8002204:	4393      	bics	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800220e:	430a      	orrs	r2, r1
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800221c:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	4a23      	ldr	r2, [pc, #140]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800222c:	430a      	orrs	r2, r1
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2220      	movs	r2, #32
 8002236:	4013      	ands	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800223a:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	2210      	movs	r2, #16
 8002240:	4393      	bics	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800224a:	430a      	orrs	r2, r1
 800224c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	029b      	lsls	r3, r3, #10
 8002256:	4013      	ands	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	2280      	movs	r2, #128	@ 0x80
 8002260:	4393      	bics	r3, r2
 8002262:	0019      	movs	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800226a:	430a      	orrs	r2, r1
 800226c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	2380      	movs	r3, #128	@ 0x80
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4013      	ands	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	2240      	movs	r2, #64	@ 0x40
 8002280:	4393      	bics	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800228a:	430a      	orrs	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b006      	add	sp, #24
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	40007000 	.word	0x40007000
 80022a0:	fffffcff 	.word	0xfffffcff
 80022a4:	fffeffff 	.word	0xfffeffff
 80022a8:	00001388 	.word	0x00001388
 80022ac:	efffffff 	.word	0xefffffff
 80022b0:	fffcffff 	.word	0xfffcffff

080022b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0a8      	b.n	8002418 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	2382      	movs	r3, #130	@ 0x82
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d009      	beq.n	80022ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	61da      	str	r2, [r3, #28]
 80022e0:	e005      	b.n	80022ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	225d      	movs	r2, #93	@ 0x5d
 80022f8:	5c9b      	ldrb	r3, [r3, r2]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	225c      	movs	r2, #92	@ 0x5c
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0018      	movs	r0, r3
 800230c:	f7fe fa78 	bl	8000800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	225d      	movs	r2, #93	@ 0x5d
 8002314:	2102      	movs	r1, #2
 8002316:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2140      	movs	r1, #64	@ 0x40
 8002324:	438a      	bics	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	23e0      	movs	r3, #224	@ 0xe0
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	429a      	cmp	r2, r3
 8002332:	d902      	bls.n	800233a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	e002      	b.n	8002340 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	015b      	lsls	r3, r3, #5
 800233e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	23f0      	movs	r3, #240	@ 0xf0
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	429a      	cmp	r2, r3
 800234a:	d008      	beq.n	800235e <HAL_SPI_Init+0xaa>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	23e0      	movs	r3, #224	@ 0xe0
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	429a      	cmp	r2, r3
 8002356:	d002      	beq.n	800235e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	2382      	movs	r3, #130	@ 0x82
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6899      	ldr	r1, [r3, #8]
 800236c:	2384      	movs	r3, #132	@ 0x84
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	400b      	ands	r3, r1
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2102      	movs	r1, #2
 800237a:	400b      	ands	r3, r1
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2101      	movs	r1, #1
 8002384:	400b      	ands	r3, r1
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6999      	ldr	r1, [r3, #24]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	400b      	ands	r3, r1
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2138      	movs	r1, #56	@ 0x38
 800239a:	400b      	ands	r3, r1
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	400b      	ands	r3, r1
 80023a6:	431a      	orrs	r2, r3
 80023a8:	0011      	movs	r1, r2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	019b      	lsls	r3, r3, #6
 80023b2:	401a      	ands	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	2204      	movs	r2, #4
 80023c4:	401a      	ands	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	2110      	movs	r1, #16
 80023cc:	400b      	ands	r3, r1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d4:	2108      	movs	r1, #8
 80023d6:	400b      	ands	r3, r1
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68d9      	ldr	r1, [r3, #12]
 80023de:	23f0      	movs	r3, #240	@ 0xf0
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	400b      	ands	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	0011      	movs	r1, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	015b      	lsls	r3, r3, #5
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4907      	ldr	r1, [pc, #28]	@ (8002420 <HAL_SPI_Init+0x16c>)
 8002404:	400a      	ands	r2, r1
 8002406:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	225d      	movs	r2, #93	@ 0x5d
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b004      	add	sp, #16
 800241e:	bd80      	pop	{r7, pc}
 8002420:	fffff7ff 	.word	0xfffff7ff

08002424 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e074      	b.n	8002520 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	223c      	movs	r2, #60	@ 0x3c
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	223d      	movs	r2, #61	@ 0x3d
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe fa25 	bl	800089c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	223c      	movs	r2, #60	@ 0x3c
 8002456:	2102      	movs	r1, #2
 8002458:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6819      	ldr	r1, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002470:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002478:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800247e:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002484:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800248a:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 8002490:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 8002496:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7b1b      	ldrb	r3, [r3, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2180      	movs	r1, #128	@ 0x80
 80024b4:	0249      	lsls	r1, r1, #9
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	43d2      	mvns	r2, r2
 80024d0:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024ea:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681c      	ldr	r4, [r3, #0]
 80024f4:	0010      	movs	r0, r2
 80024f6:	f000 f817 	bl	8002528 <TSC_extract_groups>
 80024fa:	0003      	movs	r3, r0
 80024fc:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2103      	movs	r1, #3
 800250a:	438a      	bics	r2, r1
 800250c:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2203      	movs	r2, #3
 8002514:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	223c      	movs	r2, #60	@ 0x3c
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b003      	add	sp, #12
 8002526:	bd90      	pop	{r4, r7, pc}

08002528 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	e011      	b.n	800255e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	409a      	lsls	r2, r3
 8002542:	0013      	movs	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4013      	ands	r3, r2
 8002548:	d006      	beq.n	8002558 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800254a:	2201      	movs	r2, #1
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	409a      	lsls	r2, r3
 8002550:	0013      	movs	r3, r2
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3301      	adds	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b07      	cmp	r3, #7
 8002562:	d9ea      	bls.n	800253a <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b004      	add	sp, #16
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e044      	b.n	800260c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d107      	bne.n	800259a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2278      	movs	r2, #120	@ 0x78
 800258e:	2100      	movs	r1, #0
 8002590:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f7fe fa1f 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2224      	movs	r2, #36	@ 0x24
 800259e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2101      	movs	r1, #1
 80025ac:	438a      	bics	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 fda6 	bl	800310c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 fc1a 	bl	8002dfc <UART_SetConfig>
 80025c8:	0003      	movs	r3, r0
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e01c      	b.n	800260c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	490d      	ldr	r1, [pc, #52]	@ (8002614 <HAL_UART_Init+0xa4>)
 80025de:	400a      	ands	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	212a      	movs	r1, #42	@ 0x2a
 80025ee:	438a      	bics	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	0018      	movs	r0, r3
 8002606:	f000 fe35 	bl	8003274 <UART_CheckIdleState>
 800260a:	0003      	movs	r3, r0
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	ffffb7ff 	.word	0xffffb7ff

08002618 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	1dbb      	adds	r3, r7, #6
 8002626:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800262c:	2b20      	cmp	r3, #32
 800262e:	d000      	beq.n	8002632 <HAL_UART_Transmit+0x1a>
 8002630:	e08c      	b.n	800274c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_UART_Transmit+0x28>
 8002638:	1dbb      	adds	r3, r7, #6
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e084      	b.n	800274e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	015b      	lsls	r3, r3, #5
 800264c:	429a      	cmp	r2, r3
 800264e:	d109      	bne.n	8002664 <HAL_UART_Transmit+0x4c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
 800265e:	d001      	beq.n	8002664 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e074      	b.n	800274e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2284      	movs	r2, #132	@ 0x84
 8002668:	2100      	movs	r1, #0
 800266a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2221      	movs	r2, #33	@ 0x21
 8002670:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002672:	f7fe fad7 	bl	8000c24 <HAL_GetTick>
 8002676:	0003      	movs	r3, r0
 8002678:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1dba      	adds	r2, r7, #6
 800267e:	2150      	movs	r1, #80	@ 0x50
 8002680:	8812      	ldrh	r2, [r2, #0]
 8002682:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1dba      	adds	r2, r7, #6
 8002688:	2152      	movs	r1, #82	@ 0x52
 800268a:	8812      	ldrh	r2, [r2, #0]
 800268c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	429a      	cmp	r2, r3
 8002698:	d108      	bne.n	80026ac <HAL_UART_Transmit+0x94>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d104      	bne.n	80026ac <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e003      	b.n	80026b4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026b4:	e02f      	b.n	8002716 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	0013      	movs	r3, r2
 80026c0:	2200      	movs	r2, #0
 80026c2:	2180      	movs	r1, #128	@ 0x80
 80026c4:	f000 fe7e 	bl	80033c4 <UART_WaitOnFlagUntilTimeout>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e03b      	b.n	800274e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	881a      	ldrh	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	05d2      	lsls	r2, r2, #23
 80026e6:	0dd2      	lsrs	r2, r2, #23
 80026e8:	b292      	uxth	r2, r2
 80026ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	3302      	adds	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e007      	b.n	8002704 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2252      	movs	r2, #82	@ 0x52
 8002708:	5a9b      	ldrh	r3, [r3, r2]
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b299      	uxth	r1, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2252      	movs	r2, #82	@ 0x52
 8002714:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2252      	movs	r2, #82	@ 0x52
 800271a:	5a9b      	ldrh	r3, [r3, r2]
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1c9      	bne.n	80026b6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	0013      	movs	r3, r2
 800272c:	2200      	movs	r2, #0
 800272e:	2140      	movs	r1, #64	@ 0x40
 8002730:	f000 fe48 	bl	80033c4 <UART_WaitOnFlagUntilTimeout>
 8002734:	1e03      	subs	r3, r0, #0
 8002736:	d004      	beq.n	8002742 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e005      	b.n	800274e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
  }
}
 800274e:	0018      	movs	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	b008      	add	sp, #32
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b088      	sub	sp, #32
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	1dbb      	adds	r3, r7, #6
 8002762:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	589b      	ldr	r3, [r3, r2]
 800276a:	2b20      	cmp	r3, #32
 800276c:	d145      	bne.n	80027fa <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_UART_Receive_IT+0x26>
 8002774:	1dbb      	adds	r3, r7, #6
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e03d      	b.n	80027fc <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	015b      	lsls	r3, r3, #5
 8002788:	429a      	cmp	r2, r3
 800278a:	d109      	bne.n	80027a0 <HAL_UART_Receive_IT+0x4a>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2201      	movs	r2, #1
 8002798:	4013      	ands	r3, r2
 800279a:	d001      	beq.n	80027a0 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e02d      	b.n	80027fc <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	4013      	ands	r3, r2
 80027b2:	d019      	beq.n	80027e8 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b4:	f3ef 8310 	mrs	r3, PRIMASK
 80027b8:	613b      	str	r3, [r7, #16]
  return(result);
 80027ba:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f383 8810 	msr	PRIMASK, r3
}
 80027c8:	46c0      	nop			@ (mov r8, r8)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2180      	movs	r1, #128	@ 0x80
 80027d6:	04c9      	lsls	r1, r1, #19
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f383 8810 	msr	PRIMASK, r3
}
 80027e6:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027e8:	1dbb      	adds	r3, r7, #6
 80027ea:	881a      	ldrh	r2, [r3, #0]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fe57 	bl	80034a4 <UART_Start_Receive_IT>
 80027f6:	0003      	movs	r3, r0
 80027f8:	e000      	b.n	80027fc <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
  }
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b008      	add	sp, #32
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b0ab      	sub	sp, #172	@ 0xac
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	22a4      	movs	r2, #164	@ 0xa4
 8002814:	18b9      	adds	r1, r7, r2
 8002816:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	20a0      	movs	r0, #160	@ 0xa0
 8002820:	1839      	adds	r1, r7, r0
 8002822:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	219c      	movs	r1, #156	@ 0x9c
 800282c:	1879      	adds	r1, r7, r1
 800282e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002830:	0011      	movs	r1, r2
 8002832:	18bb      	adds	r3, r7, r2
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a99      	ldr	r2, [pc, #612]	@ (8002a9c <HAL_UART_IRQHandler+0x298>)
 8002838:	4013      	ands	r3, r2
 800283a:	2298      	movs	r2, #152	@ 0x98
 800283c:	18bc      	adds	r4, r7, r2
 800283e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002840:	18bb      	adds	r3, r7, r2
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d114      	bne.n	8002872 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002848:	187b      	adds	r3, r7, r1
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2220      	movs	r2, #32
 800284e:	4013      	ands	r3, r2
 8002850:	d00f      	beq.n	8002872 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002852:	183b      	adds	r3, r7, r0
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2220      	movs	r2, #32
 8002858:	4013      	ands	r3, r2
 800285a:	d00a      	beq.n	8002872 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002860:	2b00      	cmp	r3, #0
 8002862:	d100      	bne.n	8002866 <HAL_UART_IRQHandler+0x62>
 8002864:	e29e      	b.n	8002da4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	0010      	movs	r0, r2
 800286e:	4798      	blx	r3
      }
      return;
 8002870:	e298      	b.n	8002da4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002872:	2398      	movs	r3, #152	@ 0x98
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d100      	bne.n	800287e <HAL_UART_IRQHandler+0x7a>
 800287c:	e114      	b.n	8002aa8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800287e:	239c      	movs	r3, #156	@ 0x9c
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2201      	movs	r2, #1
 8002886:	4013      	ands	r3, r2
 8002888:	d106      	bne.n	8002898 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800288a:	23a0      	movs	r3, #160	@ 0xa0
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a83      	ldr	r2, [pc, #524]	@ (8002aa0 <HAL_UART_IRQHandler+0x29c>)
 8002892:	4013      	ands	r3, r2
 8002894:	d100      	bne.n	8002898 <HAL_UART_IRQHandler+0x94>
 8002896:	e107      	b.n	8002aa8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002898:	23a4      	movs	r3, #164	@ 0xa4
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2201      	movs	r2, #1
 80028a0:	4013      	ands	r3, r2
 80028a2:	d012      	beq.n	80028ca <HAL_UART_IRQHandler+0xc6>
 80028a4:	23a0      	movs	r3, #160	@ 0xa0
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d00b      	beq.n	80028ca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2201      	movs	r2, #1
 80028b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2284      	movs	r2, #132	@ 0x84
 80028be:	589b      	ldr	r3, [r3, r2]
 80028c0:	2201      	movs	r2, #1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2184      	movs	r1, #132	@ 0x84
 80028c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ca:	23a4      	movs	r3, #164	@ 0xa4
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2202      	movs	r2, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d011      	beq.n	80028fa <HAL_UART_IRQHandler+0xf6>
 80028d6:	239c      	movs	r3, #156	@ 0x9c
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	d00b      	beq.n	80028fa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2202      	movs	r2, #2
 80028e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2284      	movs	r2, #132	@ 0x84
 80028ee:	589b      	ldr	r3, [r3, r2]
 80028f0:	2204      	movs	r2, #4
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2184      	movs	r1, #132	@ 0x84
 80028f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028fa:	23a4      	movs	r3, #164	@ 0xa4
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2204      	movs	r2, #4
 8002902:	4013      	ands	r3, r2
 8002904:	d011      	beq.n	800292a <HAL_UART_IRQHandler+0x126>
 8002906:	239c      	movs	r3, #156	@ 0x9c
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	d00b      	beq.n	800292a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2204      	movs	r2, #4
 8002918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2284      	movs	r2, #132	@ 0x84
 800291e:	589b      	ldr	r3, [r3, r2]
 8002920:	2202      	movs	r2, #2
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2184      	movs	r1, #132	@ 0x84
 8002928:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800292a:	23a4      	movs	r3, #164	@ 0xa4
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2208      	movs	r2, #8
 8002932:	4013      	ands	r3, r2
 8002934:	d017      	beq.n	8002966 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002936:	23a0      	movs	r3, #160	@ 0xa0
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2220      	movs	r2, #32
 800293e:	4013      	ands	r3, r2
 8002940:	d105      	bne.n	800294e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002942:	239c      	movs	r3, #156	@ 0x9c
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2201      	movs	r2, #1
 800294a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800294c:	d00b      	beq.n	8002966 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2208      	movs	r2, #8
 8002954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2284      	movs	r2, #132	@ 0x84
 800295a:	589b      	ldr	r3, [r3, r2]
 800295c:	2208      	movs	r2, #8
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2184      	movs	r1, #132	@ 0x84
 8002964:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002966:	23a4      	movs	r3, #164	@ 0xa4
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	4013      	ands	r3, r2
 8002972:	d013      	beq.n	800299c <HAL_UART_IRQHandler+0x198>
 8002974:	23a0      	movs	r3, #160	@ 0xa0
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	04db      	lsls	r3, r3, #19
 800297e:	4013      	ands	r3, r2
 8002980:	d00c      	beq.n	800299c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2280      	movs	r2, #128	@ 0x80
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2284      	movs	r2, #132	@ 0x84
 8002990:	589b      	ldr	r3, [r3, r2]
 8002992:	2220      	movs	r2, #32
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2184      	movs	r1, #132	@ 0x84
 800299a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2284      	movs	r2, #132	@ 0x84
 80029a0:	589b      	ldr	r3, [r3, r2]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d100      	bne.n	80029a8 <HAL_UART_IRQHandler+0x1a4>
 80029a6:	e1ff      	b.n	8002da8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029a8:	23a4      	movs	r3, #164	@ 0xa4
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2220      	movs	r2, #32
 80029b0:	4013      	ands	r3, r2
 80029b2:	d00e      	beq.n	80029d2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029b4:	23a0      	movs	r3, #160	@ 0xa0
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2220      	movs	r2, #32
 80029bc:	4013      	ands	r3, r2
 80029be:	d008      	beq.n	80029d2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	0010      	movs	r0, r2
 80029d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2284      	movs	r2, #132	@ 0x84
 80029d6:	589b      	ldr	r3, [r3, r2]
 80029d8:	2194      	movs	r1, #148	@ 0x94
 80029da:	187a      	adds	r2, r7, r1
 80029dc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2240      	movs	r2, #64	@ 0x40
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b40      	cmp	r3, #64	@ 0x40
 80029ea:	d004      	beq.n	80029f6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2228      	movs	r2, #40	@ 0x28
 80029f2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029f4:	d047      	beq.n	8002a86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 fe1d 	bl	8003638 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2240      	movs	r2, #64	@ 0x40
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b40      	cmp	r3, #64	@ 0x40
 8002a0a:	d137      	bne.n	8002a7c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a10:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a14:	2090      	movs	r0, #144	@ 0x90
 8002a16:	183a      	adds	r2, r7, r0
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a20:	f383 8810 	msr	PRIMASK, r3
}
 8002a24:	46c0      	nop			@ (mov r8, r8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2140      	movs	r1, #64	@ 0x40
 8002a32:	438a      	bics	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	183b      	adds	r3, r7, r0
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d012      	beq.n	8002a72 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a50:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <HAL_UART_IRQHandler+0x2a0>)
 8002a52:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7fe fa03 	bl	8000e64 <HAL_DMA_Abort_IT>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d01a      	beq.n	8002a98 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	e012      	b.n	8002a98 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f9ad 	bl	8002dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7a:	e00d      	b.n	8002a98 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 f9a8 	bl	8002dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a84:	e008      	b.n	8002a98 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f9a3 	bl	8002dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2284      	movs	r2, #132	@ 0x84
 8002a92:	2100      	movs	r1, #0
 8002a94:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a96:	e187      	b.n	8002da8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a98:	46c0      	nop			@ (mov r8, r8)
    return;
 8002a9a:	e185      	b.n	8002da8 <HAL_UART_IRQHandler+0x5a4>
 8002a9c:	0000080f 	.word	0x0000080f
 8002aa0:	04000120 	.word	0x04000120
 8002aa4:	08003701 	.word	0x08003701

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d000      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x2ae>
 8002ab0:	e139      	b.n	8002d26 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ab2:	23a4      	movs	r3, #164	@ 0xa4
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4013      	ands	r3, r2
 8002abc:	d100      	bne.n	8002ac0 <HAL_UART_IRQHandler+0x2bc>
 8002abe:	e132      	b.n	8002d26 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ac0:	23a0      	movs	r3, #160	@ 0xa0
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d100      	bne.n	8002ace <HAL_UART_IRQHandler+0x2ca>
 8002acc:	e12b      	b.n	8002d26 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2240      	movs	r2, #64	@ 0x40
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b40      	cmp	r3, #64	@ 0x40
 8002ae2:	d000      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x2e2>
 8002ae4:	e09f      	b.n	8002c26 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	217e      	movs	r1, #126	@ 0x7e
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d100      	bne.n	8002afe <HAL_UART_IRQHandler+0x2fa>
 8002afc:	e156      	b.n	8002dac <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2258      	movs	r2, #88	@ 0x58
 8002b02:	5a9b      	ldrh	r3, [r3, r2]
 8002b04:	187a      	adds	r2, r7, r1
 8002b06:	8812      	ldrh	r2, [r2, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d300      	bcc.n	8002b0e <HAL_UART_IRQHandler+0x30a>
 8002b0c:	e14e      	b.n	8002dac <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	187a      	adds	r2, r7, r1
 8002b12:	215a      	movs	r1, #90	@ 0x5a
 8002b14:	8812      	ldrh	r2, [r2, #0]
 8002b16:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d06f      	beq.n	8002c02 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b22:	f3ef 8310 	mrs	r3, PRIMASK
 8002b26:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b32:	f383 8810 	msr	PRIMASK, r3
}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	499e      	ldr	r1, [pc, #632]	@ (8002dbc <HAL_UART_IRQHandler+0x5b8>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4e:	f383 8810 	msr	PRIMASK, r3
}
 8002b52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b5e:	2301      	movs	r3, #1
 8002b60:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	438a      	bics	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b7c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b86:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b90:	2301      	movs	r3, #1
 8002b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b96:	f383 8810 	msr	PRIMASK, r3
}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2140      	movs	r1, #64	@ 0x40
 8002ba8:	438a      	bics	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bae:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bb2:	f383 8810 	msr	PRIMASK, r3
}
 8002bb6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2280      	movs	r2, #128	@ 0x80
 8002bbc:	2120      	movs	r1, #32
 8002bbe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bca:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bd6:	f383 8810 	msr	PRIMASK, r3
}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2110      	movs	r1, #16
 8002be8:	438a      	bics	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bf2:	f383 8810 	msr	PRIMASK, r3
}
 8002bf6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fe f8f9 	bl	8000df4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2258      	movs	r2, #88	@ 0x58
 8002c0c:	5a9a      	ldrh	r2, [r3, r2]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	215a      	movs	r1, #90	@ 0x5a
 8002c12:	5a5b      	ldrh	r3, [r3, r1]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0011      	movs	r1, r2
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 f8e0 	bl	8002de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c24:	e0c2      	b.n	8002dac <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2258      	movs	r2, #88	@ 0x58
 8002c2a:	5a99      	ldrh	r1, [r3, r2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	225a      	movs	r2, #90	@ 0x5a
 8002c30:	5a9b      	ldrh	r3, [r3, r2]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	208e      	movs	r0, #142	@ 0x8e
 8002c36:	183b      	adds	r3, r7, r0
 8002c38:	1a8a      	subs	r2, r1, r2
 8002c3a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	225a      	movs	r2, #90	@ 0x5a
 8002c40:	5a9b      	ldrh	r3, [r3, r2]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d100      	bne.n	8002c4a <HAL_UART_IRQHandler+0x446>
 8002c48:	e0b2      	b.n	8002db0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002c4a:	183b      	adds	r3, r7, r0
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d100      	bne.n	8002c54 <HAL_UART_IRQHandler+0x450>
 8002c52:	e0ad      	b.n	8002db0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c54:	f3ef 8310 	mrs	r3, PRIMASK
 8002c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c5c:	2488      	movs	r4, #136	@ 0x88
 8002c5e:	193a      	adds	r2, r7, r4
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	2301      	movs	r3, #1
 8002c64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4951      	ldr	r1, [pc, #324]	@ (8002dc0 <HAL_UART_IRQHandler+0x5bc>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f383 8810 	msr	PRIMASK, r3
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c90:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c92:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	2484      	movs	r4, #132	@ 0x84
 8002c96:	193a      	adds	r2, r7, r4
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f383 8810 	msr	PRIMASK, r3
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	438a      	bics	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f383 8810 	msr	PRIMASK, r3
}
 8002cc2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	2120      	movs	r1, #32
 8002cca:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce0:	2480      	movs	r4, #128	@ 0x80
 8002ce2:	193a      	adds	r2, r7, r4
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	f383 8810 	msr	PRIMASK, r3
}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2110      	movs	r1, #16
 8002cfe:	438a      	bics	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0a:	f383 8810 	msr	PRIMASK, r3
}
 8002d0e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d16:	183b      	adds	r3, r7, r0
 8002d18:	881a      	ldrh	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0011      	movs	r1, r2
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 f860 	bl	8002de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d24:	e044      	b.n	8002db0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d26:	23a4      	movs	r3, #164	@ 0xa4
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	035b      	lsls	r3, r3, #13
 8002d30:	4013      	ands	r3, r2
 8002d32:	d010      	beq.n	8002d56 <HAL_UART_IRQHandler+0x552>
 8002d34:	239c      	movs	r3, #156	@ 0x9c
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	@ 0x80
 8002d3c:	03db      	lsls	r3, r3, #15
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2280      	movs	r2, #128	@ 0x80
 8002d48:	0352      	lsls	r2, r2, #13
 8002d4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 fed0 	bl	8003af4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d54:	e02f      	b.n	8002db6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d56:	23a4      	movs	r3, #164	@ 0xa4
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2280      	movs	r2, #128	@ 0x80
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d00f      	beq.n	8002d82 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d62:	23a0      	movs	r3, #160	@ 0xa0
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2280      	movs	r2, #128	@ 0x80
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01e      	beq.n	8002db4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	4798      	blx	r3
    }
    return;
 8002d80:	e018      	b.n	8002db4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d82:	23a4      	movs	r3, #164	@ 0xa4
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2240      	movs	r2, #64	@ 0x40
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_UART_IRQHandler+0x5b2>
 8002d8e:	23a0      	movs	r3, #160	@ 0xa0
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2240      	movs	r2, #64	@ 0x40
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00d      	beq.n	8002db6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 fcc6 	bl	800372e <UART_EndTransmit_IT>
    return;
 8002da2:	e008      	b.n	8002db6 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002da4:	46c0      	nop			@ (mov r8, r8)
 8002da6:	e006      	b.n	8002db6 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	e004      	b.n	8002db6 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	e002      	b.n	8002db6 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002db0:	46c0      	nop			@ (mov r8, r8)
 8002db2:	e000      	b.n	8002db6 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002db4:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b02b      	add	sp, #172	@ 0xac
 8002dba:	bd90      	pop	{r4, r7, pc}
 8002dbc:	fffffeff 	.word	0xfffffeff
 8002dc0:	fffffedf 	.word	0xfffffedf

08002dc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ddc:	46c0      	nop			@ (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	000a      	movs	r2, r1
 8002dee:	1cbb      	adds	r3, r7, #2
 8002df0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e04:	231e      	movs	r3, #30
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4aaf      	ldr	r2, [pc, #700]	@ (80030e8 <UART_SetConfig+0x2ec>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	0019      	movs	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4aaa      	ldr	r2, [pc, #680]	@ (80030ec <UART_SetConfig+0x2f0>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4aa1      	ldr	r2, [pc, #644]	@ (80030f0 <UART_SetConfig+0x2f4>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a9d      	ldr	r2, [pc, #628]	@ (80030f4 <UART_SetConfig+0x2f8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d127      	bne.n	8002ed2 <UART_SetConfig+0xd6>
 8002e82:	4b9d      	ldr	r3, [pc, #628]	@ (80030f8 <UART_SetConfig+0x2fc>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	2203      	movs	r2, #3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d00d      	beq.n	8002eaa <UART_SetConfig+0xae>
 8002e8e:	d81b      	bhi.n	8002ec8 <UART_SetConfig+0xcc>
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d014      	beq.n	8002ebe <UART_SetConfig+0xc2>
 8002e94:	d818      	bhi.n	8002ec8 <UART_SetConfig+0xcc>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <UART_SetConfig+0xa4>
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d00a      	beq.n	8002eb4 <UART_SetConfig+0xb8>
 8002e9e:	e013      	b.n	8002ec8 <UART_SetConfig+0xcc>
 8002ea0:	231f      	movs	r3, #31
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e065      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002eaa:	231f      	movs	r3, #31
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	2202      	movs	r2, #2
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e060      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002eb4:	231f      	movs	r3, #31
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	2204      	movs	r2, #4
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e05b      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002ebe:	231f      	movs	r3, #31
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e056      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002ec8:	231f      	movs	r3, #31
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	2210      	movs	r2, #16
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e051      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a89      	ldr	r2, [pc, #548]	@ (80030fc <UART_SetConfig+0x300>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d134      	bne.n	8002f46 <UART_SetConfig+0x14a>
 8002edc:	4b86      	ldr	r3, [pc, #536]	@ (80030f8 <UART_SetConfig+0x2fc>)
 8002ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ee0:	23c0      	movs	r3, #192	@ 0xc0
 8002ee2:	029b      	lsls	r3, r3, #10
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	22c0      	movs	r2, #192	@ 0xc0
 8002ee8:	0292      	lsls	r2, r2, #10
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d017      	beq.n	8002f1e <UART_SetConfig+0x122>
 8002eee:	22c0      	movs	r2, #192	@ 0xc0
 8002ef0:	0292      	lsls	r2, r2, #10
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d822      	bhi.n	8002f3c <UART_SetConfig+0x140>
 8002ef6:	2280      	movs	r2, #128	@ 0x80
 8002ef8:	0292      	lsls	r2, r2, #10
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <UART_SetConfig+0x136>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	0292      	lsls	r2, r2, #10
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d81a      	bhi.n	8002f3c <UART_SetConfig+0x140>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <UART_SetConfig+0x118>
 8002f0a:	2280      	movs	r2, #128	@ 0x80
 8002f0c:	0252      	lsls	r2, r2, #9
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00a      	beq.n	8002f28 <UART_SetConfig+0x12c>
 8002f12:	e013      	b.n	8002f3c <UART_SetConfig+0x140>
 8002f14:	231f      	movs	r3, #31
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
 8002f1c:	e02b      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002f1e:	231f      	movs	r3, #31
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2202      	movs	r2, #2
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e026      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002f28:	231f      	movs	r3, #31
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e021      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002f32:	231f      	movs	r3, #31
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2208      	movs	r2, #8
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e01c      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002f3c:	231f      	movs	r3, #31
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2210      	movs	r2, #16
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e017      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6d      	ldr	r2, [pc, #436]	@ (8003100 <UART_SetConfig+0x304>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d104      	bne.n	8002f5a <UART_SetConfig+0x15e>
 8002f50:	231f      	movs	r3, #31
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	e00d      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a69      	ldr	r2, [pc, #420]	@ (8003104 <UART_SetConfig+0x308>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d104      	bne.n	8002f6e <UART_SetConfig+0x172>
 8002f64:	231f      	movs	r3, #31
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	e003      	b.n	8002f76 <UART_SetConfig+0x17a>
 8002f6e:	231f      	movs	r3, #31
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	2210      	movs	r2, #16
 8002f74:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	2380      	movs	r3, #128	@ 0x80
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d15c      	bne.n	800303c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8002f82:	231f      	movs	r3, #31
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d015      	beq.n	8002fb8 <UART_SetConfig+0x1bc>
 8002f8c:	dc18      	bgt.n	8002fc0 <UART_SetConfig+0x1c4>
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d00d      	beq.n	8002fae <UART_SetConfig+0x1b2>
 8002f92:	dc15      	bgt.n	8002fc0 <UART_SetConfig+0x1c4>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <UART_SetConfig+0x1a2>
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d005      	beq.n	8002fa8 <UART_SetConfig+0x1ac>
 8002f9c:	e010      	b.n	8002fc0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f9e:	f7ff f875 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	61bb      	str	r3, [r7, #24]
        break;
 8002fa6:	e012      	b.n	8002fce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa8:	4b57      	ldr	r3, [pc, #348]	@ (8003108 <UART_SetConfig+0x30c>)
 8002faa:	61bb      	str	r3, [r7, #24]
        break;
 8002fac:	e00f      	b.n	8002fce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fae:	f7fe fff1 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	61bb      	str	r3, [r7, #24]
        break;
 8002fb6:	e00a      	b.n	8002fce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb8:	2380      	movs	r3, #128	@ 0x80
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	61bb      	str	r3, [r7, #24]
        break;
 8002fbe:	e006      	b.n	8002fce <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fc4:	231e      	movs	r3, #30
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
        break;
 8002fcc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d100      	bne.n	8002fd6 <UART_SetConfig+0x1da>
 8002fd4:	e07a      	b.n	80030cc <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	005a      	lsls	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	18d2      	adds	r2, r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	0010      	movs	r0, r2
 8002fea:	f7fd f88d 	bl	8000108 <__udivsi3>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d91c      	bls.n	8003032 <UART_SetConfig+0x236>
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	025b      	lsls	r3, r3, #9
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d217      	bcs.n	8003032 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	b29a      	uxth	r2, r3
 8003006:	200e      	movs	r0, #14
 8003008:	183b      	adds	r3, r7, r0
 800300a:	210f      	movs	r1, #15
 800300c:	438a      	bics	r2, r1
 800300e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	2207      	movs	r2, #7
 8003018:	4013      	ands	r3, r2
 800301a:	b299      	uxth	r1, r3
 800301c:	183b      	adds	r3, r7, r0
 800301e:	183a      	adds	r2, r7, r0
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	183a      	adds	r2, r7, r0
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	e04c      	b.n	80030cc <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003032:	231e      	movs	r3, #30
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e047      	b.n	80030cc <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800303c:	231f      	movs	r3, #31
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d015      	beq.n	8003072 <UART_SetConfig+0x276>
 8003046:	dc18      	bgt.n	800307a <UART_SetConfig+0x27e>
 8003048:	2b04      	cmp	r3, #4
 800304a:	d00d      	beq.n	8003068 <UART_SetConfig+0x26c>
 800304c:	dc15      	bgt.n	800307a <UART_SetConfig+0x27e>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <UART_SetConfig+0x25c>
 8003052:	2b02      	cmp	r3, #2
 8003054:	d005      	beq.n	8003062 <UART_SetConfig+0x266>
 8003056:	e010      	b.n	800307a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003058:	f7ff f818 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 800305c:	0003      	movs	r3, r0
 800305e:	61bb      	str	r3, [r7, #24]
        break;
 8003060:	e012      	b.n	8003088 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003062:	4b29      	ldr	r3, [pc, #164]	@ (8003108 <UART_SetConfig+0x30c>)
 8003064:	61bb      	str	r3, [r7, #24]
        break;
 8003066:	e00f      	b.n	8003088 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003068:	f7fe ff94 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 800306c:	0003      	movs	r3, r0
 800306e:	61bb      	str	r3, [r7, #24]
        break;
 8003070:	e00a      	b.n	8003088 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003072:	2380      	movs	r3, #128	@ 0x80
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	61bb      	str	r3, [r7, #24]
        break;
 8003078:	e006      	b.n	8003088 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800307e:	231e      	movs	r3, #30
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
        break;
 8003086:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01e      	beq.n	80030cc <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	085a      	lsrs	r2, r3, #1
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	18d2      	adds	r2, r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0019      	movs	r1, r3
 800309e:	0010      	movs	r0, r2
 80030a0:	f7fd f832 	bl	8000108 <__udivsi3>
 80030a4:	0003      	movs	r3, r0
 80030a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	d90a      	bls.n	80030c4 <UART_SetConfig+0x2c8>
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	2380      	movs	r3, #128	@ 0x80
 80030b2:	025b      	lsls	r3, r3, #9
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d205      	bcs.n	80030c4 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	e003      	b.n	80030cc <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80030c4:	231e      	movs	r3, #30
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80030d8:	231e      	movs	r3, #30
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	781b      	ldrb	r3, [r3, #0]
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b008      	add	sp, #32
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	efff69f3 	.word	0xefff69f3
 80030ec:	ffffcfff 	.word	0xffffcfff
 80030f0:	fffff4ff 	.word	0xfffff4ff
 80030f4:	40013800 	.word	0x40013800
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40004400 	.word	0x40004400
 8003100:	40004800 	.word	0x40004800
 8003104:	40004c00 	.word	0x40004c00
 8003108:	007a1200 	.word	0x007a1200

0800310c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	2208      	movs	r2, #8
 800311a:	4013      	ands	r3, r2
 800311c:	d00b      	beq.n	8003136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a4a      	ldr	r2, [pc, #296]	@ (8003250 <UART_AdvFeatureConfig+0x144>)
 8003126:	4013      	ands	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	2201      	movs	r2, #1
 800313c:	4013      	ands	r3, r2
 800313e:	d00b      	beq.n	8003158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4a43      	ldr	r2, [pc, #268]	@ (8003254 <UART_AdvFeatureConfig+0x148>)
 8003148:	4013      	ands	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	2202      	movs	r2, #2
 800315e:	4013      	ands	r3, r2
 8003160:	d00b      	beq.n	800317a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a3b      	ldr	r2, [pc, #236]	@ (8003258 <UART_AdvFeatureConfig+0x14c>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	2204      	movs	r2, #4
 8003180:	4013      	ands	r3, r2
 8003182:	d00b      	beq.n	800319c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a34      	ldr	r2, [pc, #208]	@ (800325c <UART_AdvFeatureConfig+0x150>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	2210      	movs	r2, #16
 80031a2:	4013      	ands	r3, r2
 80031a4:	d00b      	beq.n	80031be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003260 <UART_AdvFeatureConfig+0x154>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	2220      	movs	r2, #32
 80031c4:	4013      	ands	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4a25      	ldr	r2, [pc, #148]	@ (8003264 <UART_AdvFeatureConfig+0x158>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	2240      	movs	r2, #64	@ 0x40
 80031e6:	4013      	ands	r3, r2
 80031e8:	d01d      	beq.n	8003226 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003268 <UART_AdvFeatureConfig+0x15c>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	035b      	lsls	r3, r3, #13
 800320a:	429a      	cmp	r2, r3
 800320c:	d10b      	bne.n	8003226 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a15      	ldr	r2, [pc, #84]	@ (800326c <UART_AdvFeatureConfig+0x160>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	2280      	movs	r2, #128	@ 0x80
 800322c:	4013      	ands	r3, r2
 800322e:	d00b      	beq.n	8003248 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a0e      	ldr	r2, [pc, #56]	@ (8003270 <UART_AdvFeatureConfig+0x164>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }
}
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}
 8003250:	ffff7fff 	.word	0xffff7fff
 8003254:	fffdffff 	.word	0xfffdffff
 8003258:	fffeffff 	.word	0xfffeffff
 800325c:	fffbffff 	.word	0xfffbffff
 8003260:	ffffefff 	.word	0xffffefff
 8003264:	ffffdfff 	.word	0xffffdfff
 8003268:	ffefffff 	.word	0xffefffff
 800326c:	ff9fffff 	.word	0xff9fffff
 8003270:	fff7ffff 	.word	0xfff7ffff

08003274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b092      	sub	sp, #72	@ 0x48
 8003278:	af02      	add	r7, sp, #8
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2284      	movs	r2, #132	@ 0x84
 8003280:	2100      	movs	r1, #0
 8003282:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003284:	f7fd fcce 	bl	8000c24 <HAL_GetTick>
 8003288:	0003      	movs	r3, r0
 800328a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	4013      	ands	r3, r2
 8003296:	2b08      	cmp	r3, #8
 8003298:	d12c      	bne.n	80032f4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800329a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329c:	2280      	movs	r2, #128	@ 0x80
 800329e:	0391      	lsls	r1, r2, #14
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4a46      	ldr	r2, [pc, #280]	@ (80033bc <UART_CheckIdleState+0x148>)
 80032a4:	9200      	str	r2, [sp, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f000 f88c 	bl	80033c4 <UART_WaitOnFlagUntilTimeout>
 80032ac:	1e03      	subs	r3, r0, #0
 80032ae:	d021      	beq.n	80032f4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b0:	f3ef 8310 	mrs	r3, PRIMASK
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032ba:	2301      	movs	r3, #1
 80032bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	46c0      	nop			@ (mov r8, r8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2180      	movs	r1, #128	@ 0x80
 80032d2:	438a      	bics	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032dc:	f383 8810 	msr	PRIMASK, r3
}
 80032e0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2278      	movs	r2, #120	@ 0x78
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e05f      	b.n	80033b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2204      	movs	r2, #4
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d146      	bne.n	8003390 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003304:	2280      	movs	r2, #128	@ 0x80
 8003306:	03d1      	lsls	r1, r2, #15
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4a2c      	ldr	r2, [pc, #176]	@ (80033bc <UART_CheckIdleState+0x148>)
 800330c:	9200      	str	r2, [sp, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	f000 f858 	bl	80033c4 <UART_WaitOnFlagUntilTimeout>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d03b      	beq.n	8003390 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003318:	f3ef 8310 	mrs	r3, PRIMASK
 800331c:	60fb      	str	r3, [r7, #12]
  return(result);
 800331e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003320:	637b      	str	r3, [r7, #52]	@ 0x34
 8003322:	2301      	movs	r3, #1
 8003324:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f383 8810 	msr	PRIMASK, r3
}
 800332c:	46c0      	nop			@ (mov r8, r8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4921      	ldr	r1, [pc, #132]	@ (80033c0 <UART_CheckIdleState+0x14c>)
 800333a:	400a      	ands	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003340:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f383 8810 	msr	PRIMASK, r3
}
 8003348:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334a:	f3ef 8310 	mrs	r3, PRIMASK
 800334e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003350:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003352:	633b      	str	r3, [r7, #48]	@ 0x30
 8003354:	2301      	movs	r3, #1
 8003356:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f383 8810 	msr	PRIMASK, r3
}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2101      	movs	r1, #1
 800336c:	438a      	bics	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	f383 8810 	msr	PRIMASK, r3
}
 800337a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2280      	movs	r2, #128	@ 0x80
 8003380:	2120      	movs	r1, #32
 8003382:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2278      	movs	r2, #120	@ 0x78
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e011      	b.n	80033b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2280      	movs	r2, #128	@ 0x80
 800339a:	2120      	movs	r1, #32
 800339c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2278      	movs	r2, #120	@ 0x78
 80033ae:	2100      	movs	r1, #0
 80033b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b010      	add	sp, #64	@ 0x40
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	01ffffff 	.word	0x01ffffff
 80033c0:	fffffedf 	.word	0xfffffedf

080033c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d4:	e051      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3301      	adds	r3, #1
 80033da:	d04e      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033dc:	f7fd fc22 	bl	8000c24 <HAL_GetTick>
 80033e0:	0002      	movs	r2, r0
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e051      	b.n	800349a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2204      	movs	r2, #4
 80033fe:	4013      	ands	r3, r2
 8003400:	d03b      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b80      	cmp	r3, #128	@ 0x80
 8003406:	d038      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b40      	cmp	r3, #64	@ 0x40
 800340c:	d035      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	2208      	movs	r2, #8
 8003416:	4013      	ands	r3, r2
 8003418:	2b08      	cmp	r3, #8
 800341a:	d111      	bne.n	8003440 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2208      	movs	r2, #8
 8003422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 f906 	bl	8003638 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2284      	movs	r2, #132	@ 0x84
 8003430:	2108      	movs	r1, #8
 8003432:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2278      	movs	r2, #120	@ 0x78
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e02c      	b.n	800349a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	401a      	ands	r2, r3
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	429a      	cmp	r2, r3
 8003452:	d112      	bne.n	800347a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2280      	movs	r2, #128	@ 0x80
 800345a:	0112      	lsls	r2, r2, #4
 800345c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	0018      	movs	r0, r3
 8003462:	f000 f8e9 	bl	8003638 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2284      	movs	r2, #132	@ 0x84
 800346a:	2120      	movs	r1, #32
 800346c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2278      	movs	r2, #120	@ 0x78
 8003472:	2100      	movs	r1, #0
 8003474:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e00f      	b.n	800349a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4013      	ands	r3, r2
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	425a      	negs	r2, r3
 800348a:	4153      	adcs	r3, r2
 800348c:	b2db      	uxtb	r3, r3
 800348e:	001a      	movs	r2, r3
 8003490:	1dfb      	adds	r3, r7, #7
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d09e      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b090      	sub	sp, #64	@ 0x40
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	1dbb      	adds	r3, r7, #6
 80034b0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1dba      	adds	r2, r7, #6
 80034bc:	2158      	movs	r1, #88	@ 0x58
 80034be:	8812      	ldrh	r2, [r2, #0]
 80034c0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1dba      	adds	r2, r7, #6
 80034c6:	215a      	movs	r1, #90	@ 0x5a
 80034c8:	8812      	ldrh	r2, [r2, #0]
 80034ca:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	015b      	lsls	r3, r3, #5
 80034da:	429a      	cmp	r2, r3
 80034dc:	d10d      	bne.n	80034fa <UART_Start_Receive_IT+0x56>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <UART_Start_Receive_IT+0x4c>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	225c      	movs	r2, #92	@ 0x5c
 80034ea:	4950      	ldr	r1, [pc, #320]	@ (800362c <UART_Start_Receive_IT+0x188>)
 80034ec:	5299      	strh	r1, [r3, r2]
 80034ee:	e02e      	b.n	800354e <UART_Start_Receive_IT+0xaa>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	225c      	movs	r2, #92	@ 0x5c
 80034f4:	21ff      	movs	r1, #255	@ 0xff
 80034f6:	5299      	strh	r1, [r3, r2]
 80034f8:	e029      	b.n	800354e <UART_Start_Receive_IT+0xaa>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <UART_Start_Receive_IT+0x7a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <UART_Start_Receive_IT+0x70>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	225c      	movs	r2, #92	@ 0x5c
 800350e:	21ff      	movs	r1, #255	@ 0xff
 8003510:	5299      	strh	r1, [r3, r2]
 8003512:	e01c      	b.n	800354e <UART_Start_Receive_IT+0xaa>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	225c      	movs	r2, #92	@ 0x5c
 8003518:	217f      	movs	r1, #127	@ 0x7f
 800351a:	5299      	strh	r1, [r3, r2]
 800351c:	e017      	b.n	800354e <UART_Start_Receive_IT+0xaa>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	055b      	lsls	r3, r3, #21
 8003526:	429a      	cmp	r2, r3
 8003528:	d10d      	bne.n	8003546 <UART_Start_Receive_IT+0xa2>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <UART_Start_Receive_IT+0x98>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	225c      	movs	r2, #92	@ 0x5c
 8003536:	217f      	movs	r1, #127	@ 0x7f
 8003538:	5299      	strh	r1, [r3, r2]
 800353a:	e008      	b.n	800354e <UART_Start_Receive_IT+0xaa>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	225c      	movs	r2, #92	@ 0x5c
 8003540:	213f      	movs	r1, #63	@ 0x3f
 8003542:	5299      	strh	r1, [r3, r2]
 8003544:	e003      	b.n	800354e <UART_Start_Receive_IT+0xaa>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	225c      	movs	r2, #92	@ 0x5c
 800354a:	2100      	movs	r1, #0
 800354c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2284      	movs	r2, #132	@ 0x84
 8003552:	2100      	movs	r1, #0
 8003554:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2280      	movs	r2, #128	@ 0x80
 800355a:	2122      	movs	r1, #34	@ 0x22
 800355c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355e:	f3ef 8310 	mrs	r3, PRIMASK
 8003562:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003564:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003568:	2301      	movs	r3, #1
 800356a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2101      	movs	r1, #1
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003586:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	f383 8810 	msr	PRIMASK, r3
}
 800358e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	015b      	lsls	r3, r3, #5
 8003598:	429a      	cmp	r2, r3
 800359a:	d107      	bne.n	80035ac <UART_Start_Receive_IT+0x108>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a22      	ldr	r2, [pc, #136]	@ (8003630 <UART_Start_Receive_IT+0x18c>)
 80035a8:	669a      	str	r2, [r3, #104]	@ 0x68
 80035aa:	e002      	b.n	80035b2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a21      	ldr	r2, [pc, #132]	@ (8003634 <UART_Start_Receive_IT+0x190>)
 80035b0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d019      	beq.n	80035ee <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ba:	f3ef 8310 	mrs	r3, PRIMASK
 80035be:	61fb      	str	r3, [r7, #28]
  return(result);
 80035c0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035c4:	2301      	movs	r3, #1
 80035c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2190      	movs	r1, #144	@ 0x90
 80035dc:	0049      	lsls	r1, r1, #1
 80035de:	430a      	orrs	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	f383 8810 	msr	PRIMASK, r3
}
 80035ec:	e018      	b.n	8003620 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ee:	f3ef 8310 	mrs	r3, PRIMASK
 80035f2:	613b      	str	r3, [r7, #16]
  return(result);
 80035f4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80035f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035f8:	2301      	movs	r3, #1
 80035fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			@ (mov r8, r8)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2120      	movs	r1, #32
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f383 8810 	msr	PRIMASK, r3
}
 800361e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	0018      	movs	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	b010      	add	sp, #64	@ 0x40
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			@ (mov r8, r8)
 800362c:	000001ff 	.word	0x000001ff
 8003630:	0800393d 	.word	0x0800393d
 8003634:	08003785 	.word	0x08003785

08003638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08e      	sub	sp, #56	@ 0x38
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003640:	f3ef 8310 	mrs	r3, PRIMASK
 8003644:	617b      	str	r3, [r7, #20]
  return(result);
 8003646:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003648:	637b      	str	r3, [r7, #52]	@ 0x34
 800364a:	2301      	movs	r3, #1
 800364c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f383 8810 	msr	PRIMASK, r3
}
 8003654:	46c0      	nop			@ (mov r8, r8)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4926      	ldr	r1, [pc, #152]	@ (80036fc <UART_EndRxTransfer+0xc4>)
 8003662:	400a      	ands	r2, r1
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f383 8810 	msr	PRIMASK, r3
}
 8003670:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003672:	f3ef 8310 	mrs	r3, PRIMASK
 8003676:	623b      	str	r3, [r7, #32]
  return(result);
 8003678:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	633b      	str	r3, [r7, #48]	@ 0x30
 800367c:	2301      	movs	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	f383 8810 	msr	PRIMASK, r3
}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2101      	movs	r1, #1
 8003694:	438a      	bics	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d118      	bne.n	80036de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ac:	f3ef 8310 	mrs	r3, PRIMASK
 80036b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036b6:	2301      	movs	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			@ (mov r8, r8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2110      	movs	r1, #16
 80036ce:	438a      	bics	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f383 8810 	msr	PRIMASK, r3
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2280      	movs	r2, #128	@ 0x80
 80036e2:	2120      	movs	r1, #32
 80036e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b00e      	add	sp, #56	@ 0x38
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	fffffedf 	.word	0xfffffedf

08003700 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	225a      	movs	r2, #90	@ 0x5a
 8003712:	2100      	movs	r1, #0
 8003714:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2252      	movs	r2, #82	@ 0x52
 800371a:	2100      	movs	r1, #0
 800371c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	0018      	movs	r0, r3
 8003722:	f7ff fb57 	bl	8002dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}

0800372e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003736:	f3ef 8310 	mrs	r3, PRIMASK
 800373a:	60bb      	str	r3, [r7, #8]
  return(result);
 800373c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	2301      	movs	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2140      	movs	r1, #64	@ 0x40
 8003758:	438a      	bics	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f383 8810 	msr	PRIMASK, r3
}
 8003766:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0018      	movs	r0, r3
 8003778:	f7ff fb24 	bl	8002dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b006      	add	sp, #24
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b094      	sub	sp, #80	@ 0x50
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800378c:	204e      	movs	r0, #78	@ 0x4e
 800378e:	183b      	adds	r3, r7, r0
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	215c      	movs	r1, #92	@ 0x5c
 8003794:	5a52      	ldrh	r2, [r2, r1]
 8003796:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2280      	movs	r2, #128	@ 0x80
 800379c:	589b      	ldr	r3, [r3, r2]
 800379e:	2b22      	cmp	r3, #34	@ 0x22
 80037a0:	d000      	beq.n	80037a4 <UART_RxISR_8BIT+0x20>
 80037a2:	e0ba      	b.n	800391a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	214c      	movs	r1, #76	@ 0x4c
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80037ae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	183b      	adds	r3, r7, r0
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b2d9      	uxtb	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c0:	400a      	ands	r2, r1
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	225a      	movs	r2, #90	@ 0x5a
 80037d4:	5a9b      	ldrh	r3, [r3, r2]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b299      	uxth	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	225a      	movs	r2, #90	@ 0x5a
 80037e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	225a      	movs	r2, #90	@ 0x5a
 80037e6:	5a9b      	ldrh	r3, [r3, r2]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d000      	beq.n	80037f0 <UART_RxISR_8BIT+0x6c>
 80037ee:	e09c      	b.n	800392a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f0:	f3ef 8310 	mrs	r3, PRIMASK
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037fa:	2301      	movs	r3, #1
 80037fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4948      	ldr	r1, [pc, #288]	@ (8003934 <UART_RxISR_8BIT+0x1b0>)
 8003812:	400a      	ands	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003822:	f3ef 8310 	mrs	r3, PRIMASK
 8003826:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382a:	647b      	str	r3, [r7, #68]	@ 0x44
 800382c:	2301      	movs	r3, #1
 800382e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003832:	f383 8810 	msr	PRIMASK, r3
}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2101      	movs	r1, #1
 8003844:	438a      	bics	r2, r1
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800384a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384e:	f383 8810 	msr	PRIMASK, r3
}
 8003852:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2280      	movs	r2, #128	@ 0x80
 8003858:	2120      	movs	r1, #32
 800385a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	4013      	ands	r3, r2
 8003874:	d018      	beq.n	80038a8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003876:	f3ef 8310 	mrs	r3, PRIMASK
 800387a:	61bb      	str	r3, [r7, #24]
  return(result);
 800387c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800387e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003880:	2301      	movs	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f383 8810 	msr	PRIMASK, r3
}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4928      	ldr	r1, [pc, #160]	@ (8003938 <UART_RxISR_8BIT+0x1b4>)
 8003898:	400a      	ands	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800389e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f383 8810 	msr	PRIMASK, r3
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d12f      	bne.n	8003910 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80038bc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038c0:	2301      	movs	r3, #1
 80038c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f383 8810 	msr	PRIMASK, r3
}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2110      	movs	r1, #16
 80038d8:	438a      	bics	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	2210      	movs	r2, #16
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d103      	bne.n	80038fe <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2210      	movs	r2, #16
 80038fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2258      	movs	r2, #88	@ 0x58
 8003902:	5a9a      	ldrh	r2, [r3, r2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0011      	movs	r1, r2
 8003908:	0018      	movs	r0, r3
 800390a:	f7ff fa6b 	bl	8002de4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800390e:	e00c      	b.n	800392a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	0018      	movs	r0, r3
 8003914:	f7fc fece 	bl	80006b4 <HAL_UART_RxCpltCallback>
}
 8003918:	e007      	b.n	800392a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2108      	movs	r1, #8
 8003926:	430a      	orrs	r2, r1
 8003928:	619a      	str	r2, [r3, #24]
}
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	46bd      	mov	sp, r7
 800392e:	b014      	add	sp, #80	@ 0x50
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	fffffedf 	.word	0xfffffedf
 8003938:	fbffffff 	.word	0xfbffffff

0800393c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b094      	sub	sp, #80	@ 0x50
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003944:	204e      	movs	r0, #78	@ 0x4e
 8003946:	183b      	adds	r3, r7, r0
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	215c      	movs	r1, #92	@ 0x5c
 800394c:	5a52      	ldrh	r2, [r2, r1]
 800394e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2280      	movs	r2, #128	@ 0x80
 8003954:	589b      	ldr	r3, [r3, r2]
 8003956:	2b22      	cmp	r3, #34	@ 0x22
 8003958:	d000      	beq.n	800395c <UART_RxISR_16BIT+0x20>
 800395a:	e0ba      	b.n	8003ad2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	214c      	movs	r1, #76	@ 0x4c
 8003962:	187b      	adds	r3, r7, r1
 8003964:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003966:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800396e:	187b      	adds	r3, r7, r1
 8003970:	183a      	adds	r2, r7, r0
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	8812      	ldrh	r2, [r2, #0]
 8003976:	4013      	ands	r3, r2
 8003978:	b29a      	uxth	r2, r3
 800397a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800397c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	225a      	movs	r2, #90	@ 0x5a
 800398c:	5a9b      	ldrh	r3, [r3, r2]
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b299      	uxth	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	225a      	movs	r2, #90	@ 0x5a
 8003998:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	225a      	movs	r2, #90	@ 0x5a
 800399e:	5a9b      	ldrh	r3, [r3, r2]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d000      	beq.n	80039a8 <UART_RxISR_16BIT+0x6c>
 80039a6:	e09c      	b.n	8003ae2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ac:	623b      	str	r3, [r7, #32]
  return(result);
 80039ae:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b2:	2301      	movs	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	f383 8810 	msr	PRIMASK, r3
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4948      	ldr	r1, [pc, #288]	@ (8003aec <UART_RxISR_16BIT+0x1b0>)
 80039ca:	400a      	ands	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039da:	f3ef 8310 	mrs	r3, PRIMASK
 80039de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80039e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80039e4:	2301      	movs	r3, #1
 80039e6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ea:	f383 8810 	msr	PRIMASK, r3
}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	438a      	bics	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2280      	movs	r2, #128	@ 0x80
 8003a10:	2120      	movs	r1, #32
 8003a12:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d018      	beq.n	8003a60 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	617b      	str	r3, [r7, #20]
  return(result);
 8003a34:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a38:	2301      	movs	r3, #1
 8003a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4928      	ldr	r1, [pc, #160]	@ (8003af0 <UART_RxISR_16BIT+0x1b4>)
 8003a50:	400a      	ands	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d12f      	bne.n	8003ac8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a72:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a74:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a78:	2301      	movs	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f383 8810 	msr	PRIMASK, r3
}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2110      	movs	r1, #16
 8003a90:	438a      	bics	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f383 8810 	msr	PRIMASK, r3
}
 8003a9e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d103      	bne.n	8003ab6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2258      	movs	r2, #88	@ 0x58
 8003aba:	5a9a      	ldrh	r2, [r3, r2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0011      	movs	r1, r2
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7ff f98f 	bl	8002de4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ac6:	e00c      	b.n	8003ae2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7fc fdf2 	bl	80006b4 <HAL_UART_RxCpltCallback>
}
 8003ad0:	e007      	b.n	8003ae2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2108      	movs	r1, #8
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	619a      	str	r2, [r3, #24]
}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b014      	add	sp, #80	@ 0x50
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	fffffedf 	.word	0xfffffedf
 8003af0:	fbffffff 	.word	0xfbffffff

08003af4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <USB_DisableGlobalInt+0x30>)
 8003b0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2240      	movs	r2, #64	@ 0x40
 8003b14:	5a9b      	ldrh	r3, [r3, r2]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	43d2      	mvns	r2, r2
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	4013      	ands	r3, r2
 8003b22:	b299      	uxth	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2240      	movs	r2, #64	@ 0x40
 8003b28:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b004      	add	sp, #16
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	0000bf80 	.word	0x0000bf80

08003b38 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	1d3b      	adds	r3, r7, #4
 8003b42:	6019      	str	r1, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2240      	movs	r2, #64	@ 0x40
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2240      	movs	r2, #64	@ 0x40
 8003b52:	2100      	movs	r1, #0
 8003b54:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2244      	movs	r2, #68	@ 0x44
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2250      	movs	r2, #80	@ 0x50
 8003b62:	2100      	movs	r1, #0
 8003b64:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	0018      	movs	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b004      	add	sp, #16
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <memset>:
 8003b70:	0003      	movs	r3, r0
 8003b72:	1882      	adds	r2, r0, r2
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	7019      	strb	r1, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <__libc_init_array>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	2600      	movs	r6, #0
 8003b84:	4c0c      	ldr	r4, [pc, #48]	@ (8003bb8 <__libc_init_array+0x38>)
 8003b86:	4d0d      	ldr	r5, [pc, #52]	@ (8003bbc <__libc_init_array+0x3c>)
 8003b88:	1b64      	subs	r4, r4, r5
 8003b8a:	10a4      	asrs	r4, r4, #2
 8003b8c:	42a6      	cmp	r6, r4
 8003b8e:	d109      	bne.n	8003ba4 <__libc_init_array+0x24>
 8003b90:	2600      	movs	r6, #0
 8003b92:	f000 f819 	bl	8003bc8 <_init>
 8003b96:	4c0a      	ldr	r4, [pc, #40]	@ (8003bc0 <__libc_init_array+0x40>)
 8003b98:	4d0a      	ldr	r5, [pc, #40]	@ (8003bc4 <__libc_init_array+0x44>)
 8003b9a:	1b64      	subs	r4, r4, r5
 8003b9c:	10a4      	asrs	r4, r4, #2
 8003b9e:	42a6      	cmp	r6, r4
 8003ba0:	d105      	bne.n	8003bae <__libc_init_array+0x2e>
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}
 8003ba4:	00b3      	lsls	r3, r6, #2
 8003ba6:	58eb      	ldr	r3, [r5, r3]
 8003ba8:	4798      	blx	r3
 8003baa:	3601      	adds	r6, #1
 8003bac:	e7ee      	b.n	8003b8c <__libc_init_array+0xc>
 8003bae:	00b3      	lsls	r3, r6, #2
 8003bb0:	58eb      	ldr	r3, [r5, r3]
 8003bb2:	4798      	blx	r3
 8003bb4:	3601      	adds	r6, #1
 8003bb6:	e7f2      	b.n	8003b9e <__libc_init_array+0x1e>
 8003bb8:	08003c20 	.word	0x08003c20
 8003bbc:	08003c20 	.word	0x08003c20
 8003bc0:	08003c24 	.word	0x08003c24
 8003bc4:	08003c20 	.word	0x08003c20

08003bc8 <_init>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr

08003bd4 <_fini>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr
